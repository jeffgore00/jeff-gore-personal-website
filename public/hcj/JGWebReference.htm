<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="description"
      content="A reference by and for Jeff Gore in his search for web development knowledge."
    />
    <meta name="keywords" content="HTML,CSS,JavaScript" />
    <meta name="author" content="Jeff Gore" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Jeff's HTML / CSS / JavaScript Reference</title>
    <link href="_styles/master.css" rel="stylesheet" type="text/css" />
    <link href="_styles/examples.css" rel="stylesheet" type="text/css" />
  </head>

  <body id="topOfPage">
    <header>
      <h1 id="mainHeader">Jeff's Web Development Reference Page</h1>
      <div id="pageLastUpdated">
        Last updated: <span id="pageLastModifiedDateTime"></span>
      </div>
    </header>

    <!-- "For Internet Explorer 11 and below, it is suggested that an aria role of "main" be added to the <main> element to ensure it is accessible (screen readers like JAWS, used in combination with older versions of Internet Explorer will be able to understand the semantic meaning of the <main> element once this role attribute is included). -->

    <main role="main">
      <section id="QA">
        <h2 id="navbar">
          An Exhaustive FAQ // Jump to: <a href="#cssSection">CSS</a> /
          <a href="#jsSection">JS</a> / <a href="#cliSection">CLI</a> /
          <a href="#gitSection">Git</a> / <a href="#dsAndAlgos">DSs-Algos</a> /
          <a href="#genDevSection">GenDev</a> /
          <a href="#genWebSection">GenWeb</a>
        </h2>
        <p style="font-style: italic">
          To view or hide the answer to a question, click on the question. A
          <span class="toComplete">question highlighted in green</span> has only
          a partial answer, a
          <span class="toDo">question highlighted in yellow</span> has no
          answer.
        </p>
        <h2 id="randomQuestionHeader">
          Random Question
          <button id="newRandomQuestion">New random question</button>
        </h2>
        <div id="randomQuestion">
          <div class="question">
            <p>Random question loading...</p>
          </div>
          <div class="answer">
            <p></p>
          </div>
        </div>

        <h2 id="allQuestionsHeader">
          All Questions
          <button id="showAllAnswers">Show all answers</button>
          <button id="hideAllAnswers">Hide all answers</button>
          <button id="goToEnd">Go to end</button>
        </h2>

        <a href="#pageEnd"></a>
        <ol id="QAcontainer" class="HTML CSS JS">
          <li id="general_BigThreeWebLanguages" class="QA HTML CSS JS">
            <div class="question">
              <p>
                Which three programming languages "form the backbone of all web
                content", and what roles do each play?
              </p>
            </div>
            <div class="answer">
              <p>
                HTML, CSS, and JavaScript. HTML contains the essential structure
                of the page, CSS controls how it looks, and JavaScript dictates
                how it behaves.
              </p>
            </div>
          </li>
          <h3 id="htmlSection">HTML</h3>

          <li id="general_define_HTML" class="QA HTML">
            <div class="question">
              <p>What does HTML stand for?</p>
            </div>
            <div class="answer">
              <p>
                HTML stands for "HyperText Markup Language." Hypertext is "text
                displayed on a computer display or other electronic devices with
                references (hyperlinks) to other text which the reader can
                immediately access, or where text can be revealed progressively
                at multiple levels of detail."
              </p>
            </div>
          </li>

          <li id="general_define_markuplang">
            <div class="question">
              <p>What is a "markup language"?</p>
            </div>
            <div class="answer">
              <p>
                "A markup language is a system for annotating a document in a
                way that is syntactically distinguishable from the text."
              </p>
            </div>
          </li>

          <li id="synprof_element">
            <div class="question">
              <p>What is an element?</p>
            </div>
            <div class="answer">
              <p>
                Elements are the basic building blocks of a web page. They
                represent different types of content, such as paragraphs,
                images, links, and so on. The below is an instance of the
                paragraph element, which is named
                <code class="HTML"><span class="element">&lt;p&gt;</span></code
                >:
              </p>
              <pre
                class="HTML code"
              ><code class="HTML"><span class="element opentag">&lt;p&gt;</span>This is a paragraph.<span class="element closetag">&lt;/p&gt;</span></code></pre>
              <p>
                Note that the term "element" refers to not only the
                <a href="#synprof_tag">tag</a>, but the content as well.
              </p>
            </div>
          </li>

          <li id="synprof_tag">
            <div class="question">
              <p>What is a tag?</p>
            </div>
            <div class="answer">
              <p>
                A tag is a convention for writing HTML
                <a href="#synprof_element">elements</a>. A tag is an element
                name wrapped in angle brackets (&lt; &gt;) to distinguish itself
                from regular text so that the browser sees it as an instruction
                on how to mark up the page. All elements are introduced with
                tags. Some elements only consist of an opening tag, such as the
                <code class="HTML"
                  ><span class="element">&lt;br&gt;</span></code
                >
                line break element...
              </p>
              <pre
                class="HTML code"
              ><code class="HTML"><span class="element void">&lt;br&gt;</span></code></pre>
              <p>
                ...but many elements have content, such as text, and require
                both an opening and a closing tag. Closing tags look the same as
                opening tags, except they start with a forward slash:
              </p>
              <pre
                class="HTML code"
              ><code class="HTML"><span class="element opentag">&lt;h1&gt;</span>This is a heading.<span class="element closetag">&lt;/h1&gt;</span></code></pre>
              <p>
                In the above example, the tags plus the content which lies
                between them comprises an element.
              </p>
            </div>
          </li>

          <li id="synprof_attribute">
            <div class="question">
              <p>What is an attribute?</p>
            </div>
            <div class="answer">
              <p>
                An attribute modifies an element and, if included, will be found
                after the element name in the opening tag. Some attributes add
                extra functionality to an element, while some are vital to an
                element functioning properly. The below is an example of the
                latter. The anchor element,
                <code class="HTML"><span class="element">&lt;a&gt;</span></code
                >, used to create hyperlinks, depends on the
                <code class="HTML"><span class="attribute">href</span></code>
                (hypertext reference) attribute for the destination page
                address.
              </p>
              <pre
                class="HTML code example"
              ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">href</span> =<span class="value"> "https://developer.mozilla.org"</span>&gt;</span>This entire sentence will be a clickable hyperlink to the Mozilla Developer website.<span class="element closetag">&lt;/a&gt;</span>  </code></pre>

              <pre
                class="HTML code syntax"
              ><code class="HTML"><span class="element opentag">&lt;tag_name <span class="attribute">attribute_name</span> = <span class="value"> "attribute_value"</span>&gt;</span>(content)<span class="element closetag">&lt;/tag&gt;</span></code></pre>

              <p>
                An element can contain multiple attributes - the below example
                is identical to the above, but with additional attributes which
                give the link a title and tells the browser that it should be
                opened in a new tab.
              </p>
              <pre
                class="HTML code example"
              ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">href</span> =<span class="value"> "https://developer.mozilla.org"</span><span class="attribute"> title</span> =<span class="value"> "Mozilla"</span><span class="attribute"> target</span> =<span class="value"> "_blank"</span>&gt;</span>This entire sentence will be a clickable hyperlink to the Mozilla Developer website. When you hover over the link, the word "Mozilla" will appear, because that is the link title.<span class="element closetag">&lt;/a&gt;</span></code></pre>
              <p>
                Note that if you supply multiple attributes for an element, you
                do not separate them with commas.
              </p>
              <p>
                Some attributes can also contain multiple values, which likewise
                are not separated by commas. In the below example, the heading
                is given multiple classes:
              </p>
              <pre
                class="HTML code example"
              ><code class="HTML"><span class="element opentag">&lt;h1 <span class="attribute">class</span> = <span class="value">"stores locations"</span>&gt;</span></code></pre>
            </div>
          </li>

          <li id="browser_text_untagged">
            <div class="question">
              <p>How do browsers treat text found outside of tags?</p>
            </div>
            <div class="answer">
              <p>
                The browser will treat the text as if it were found in a
                paragraph element, and will give the text the browser's default
                styling.
              </p>
            </div>
          </li>

          <li id="general_bureaucracy1">
            <div class="question">
              <p>
                Is there any body or organization that maintains standards for
                HTML?
              </p>
            </div>
            <div class="answer">
              <p>
                "The World Wide Web Consortium (<a
                  href="https://www.w3.org/"
                  title="W3C Homepage"
                  target="_blank"
                  >W3C</a
                >) is the main international standards organization for the
                World Wide Web (abbreviated WWW or W3)." HTML5 was "published"
                by the W3C in 2014. There is also the Web Hypertext Application
                Technology Working Group (<a
                  href="https://whatwg.org"
                  title="WHATWG Homepage"
                  target="_blank"
                  >WHATWG</a
                >), which has its own extensive documentation of HTML as a
                living standard (i.e. no version numbers).
              </p>
            </div>
          </li>

          <li id="general_necessaryelements">
            <div class="question">
              <p>
                List the one declaration and the three core elements an HTML
                document needs to function, in their proper order and nesting.
              </p>
            </div>
            <div class="answer">
              <pre
                class="HTML code example"
              ><code class="HTML">&lt;!DOCTYPE html&gt;
<span class="element">&lt;html&gt;</span>
  <span class="element">&lt;head&gt;</span>
  <span class="element">&lt;/head&gt;</span>
  <span class="element">&lt;body&gt;</span>
  <span class="element">&lt;/body&gt;</span>
<span class="element">&lt;/html&gt;</span></code></pre>
            </div>
          </li>

          <li id="eleprof_DOCTYPE">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML">!DOCTYPE</code> declaration?
              </p>
            </div>
            <div class="answer">
              <p>
                This is a "required preamble" - always make this the first line
                of your code. <code class="HTML">!DOCTYPE</code>s are supposed
                to tell your browser what version of HTML you are using so that
                it will render correctly. Prior to HTML5, this declaration was
                longer and contained a hyperlink. But these days, a simple
                <code class="HTML">&lt;!DOCTYPE html&gt;</code> is the standard.
              </p>
            </div>
          </li>

          <li id="eleprof_HEAD">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;head&gt;</span></code
                >
                element?
              </p>
            </div>
            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;head&gt;</span></code
                >
                element "represents a collection of metadata for the Document."
                It contains information like the character encoding, the page
                title, and links to the external CSS and JavaScript invoked
                later in the page. Below is a the
                <code class="HTML"
                  ><span class="element">&lt;head&gt;</span></code
                >
                element used for this page (as of this writing), with the
                aforementioned elements listed in order - character encoding,
                page title, link to external CSS:
              </p>
              <pre
                class="HTML code example"
              ><code class="HTML"><span class="element opentag">&lt;head&gt;</span>
  <span class="element void">&lt;meta <span class="attribute">charset</span> = <span class="value">"utf-8"</span>&gt;</span>    
  <span class="element opentag">&lt;title&gt;</span>Jeff's HTML / CSS / JavaScript Reference<span class="element closetag">&lt;/title&gt;</span>      
  <span class="element void">&lt;link <span class="attribute">href</span> = <span class="value">"_css/JGWebReference.css"</span> <span class="attribute">rel</span> = <span class="value">"stylesheet"</span> <span class="attribute">type</span> = <span class="value">"text/css"</span>&gt;</span>
<span class="element closetag">&lt;/head&gt;</span></code></pre>
            </div>
          </li>

          <li id="eleprof_META">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;meta&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                "The HTML
                <code class="HTML"
                  ><span class="element">&lt;meta&gt;</span></code
                >
                element represents any metadata information that cannot be
                represented by one of the other HTML meta-related elements
                (<code class="HTML"
                  ><span class="element">&lt;base&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;link&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;script&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;style&gt;</span></code
                >
                or
                <code class="HTML"
                  ><span class="element">&lt;title&gt;</span></code
                >)." The most important attribute to include if using this
                element is the
                <code class="HTML"><span class="attribute">charset</span></code>
                attribute, which declares "the file's character encoding
                declaration when an HTML document is serialized to string form
                (e.g. for transmission over the network or for disk
                storage)....This ensures that, if you ever need to transmit that
                HTML document via something other than a web server (e.g.
                working on it locally, sending as an attachment), the user-agent
                is aware of its mime-type and character set. Just make sure your
                server headers agree."
              </p>

              <p>
                "Authors are encouraged to use
                <a href="https://tools.ietf.org/html/rfc3629">UTF-8</a>." There
                are
                <a
                  href="http://www.iana.org/assignments/character-sets/character-sets.xhtml"
                  >a lot of character encodings</a
                >
                out there.
              </p>

              <p>
                When working with the
                <code class="HTML"
                  ><span class="element">&lt;meta&gt;</span></code
                >
                tag it's very important to note that the element has multiple
                attributes, but they cannot necessarily coexist within the same
                tag - the W3C notes that when using this tag, "<em
                  >exactly one</em
                >
                of the
                <code class="HTML"><span class="attribute">name</span></code
                >,
                <code class="HTML"
                  ><span class="attribute">http-equiv</span></code
                >, and
                <code class="HTML"><span class="attribute">charset</span></code>
                attributes must be specified." In addition, if
                <code class="HTML"><span class="attribute">name</span></code> is
                included, then you must also include
                <code class="HTML"><span class="attribute">content</span></code
                >. See below for an example of the legitimate use of multiple
                meta tags:
              </p>

              <code class="block HTML">
                <span class="void element"
                  >&lt;meta <span class="attribute">charset</span> =
                  <span class="value">"utf-8"</span>&gt;</span
                ><br />

                <span class="void element"
                  >&lt;meta <span class="attribute">name = </span
                  ><span class="value">"description" </span>
                  <span class="attribute">content = </span
                  ><span class="value"
                    >"A reference by and for Jeff Gore in his search for web
                    development knowledge."</span
                  >&gt;</span
                ><br />

                <span class="void element"
                  >&lt;meta <span class="attribute">name = </span>
                  <span class="value">"keywords"</span>
                  <span class="attribute">content = </span
                  ><span class="value">"HTML,CSS,JavaScript"</span>&gt;</span
                ><br />

                <span class="void element"
                  >&lt;meta <span class="attribute">name = </span>
                  <span class="value">"author"</span>
                  <span class="attribute">content = </span
                  ><span class="value">"Jeff Gore"</span>&gt;</span
                >
              </code>

              <p>
                Note that the
                <code class="HTML"><span class="attribute">name</span></code>
                attribute is not synonymous with a title - it introduces a
                certain type of metadata and has a small field of valid values
                that browsers will recognize. Google says they will "sometimes
                use the meta <span class="value">description</span> of a page in
                search results snippets, if we think it gives users a more
                accurate description than would be possible purely from the
                on-page content."
                <a
                  href="https://support.google.com/webmasters/answer/35624?hl=en"
                  >Click here</a
                >
                for Google's full treatment of page titles and meta tags. Also,
                per the W3C, "there must not be more than one
                <code class="HTML"
                  ><span class="element">&lt;meta&gt;</span></code
                >
                element with its
                <code class="HTML"><span class="attribute">name</span></code>
                attribute set to the value
                <span class="value">description</span> per document."
              </p>
            </div>
          </li>

          <li id="eleprof_TITLE">
            <div class="question">
              <p>
                How does the
                <code class="HTML"
                  ><span class="element">&lt;title&gt;</span></code
                >
                element work?
              </p>
            </div>

            <div class="answer">
              <p>
                Always found within the
                <code class="HTML"
                  ><span class="element">&lt;head&gt;</span></code
                >
                element, "the HTML
                <code class="HTML"
                  ><span class="element">&lt;title&gt;</span></code
                >
                element defines the title of the document, shown in a browser's
                title bar or on the page's tab. It can only contain text, and
                any contained tags are ignored." Also note that when a user
                bookmarks your page in Chrome, the default title of the bookmark
                will be your page title.
              </p>
            </div>
          </li>

          <li id="semantc_contentmodels_hdr">
            <div class="question">
              <p>What is a "content model" in relation to HTML?</p>
            </div>

            <div class="answer">
              <p>
                "Each element...has a content model: a description of the
                element's expected contents."..."Each HTML element belongs to
                zero, one, or multiple content models, each setting rules that
                the element's content must follow in an HTML-conformant
                document." In HTML4, elements were either block or inline, but
                now, in HTML5, they can be part of one or many of seven models.
              </p>
            </div>
          </li>

          <li id="semantc_contentmodels_dtl">
            <div class="question">
              <p>
                What are the seven content models recognized by the W3C, and how
                do they interact?
              </p>
            </div>

            <div class="answer">
              <img
                src="_images/semantc_contentmodels_dtl_VennDiagram.png"
                class="presubanswer"
                alt="Venn Diagram of the seven HTML content models"
              />

              <ol type="I">
                <li>
                  <p>
                    <b><i>Metadata.</i></b> Found mostly in the
                    <code class="HTML"
                      ><span class="element">&lt;head&gt;</span></code
                    >
                    element, "metadata content is content that sets up the
                    presentation or behavior of the rest of the content, or that
                    sets up the relationship of the document with other
                    documents, or that conveys other out of band information."
                    (Oracle says that "Out-of-band data is delivered independent
                    of normal data.")
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Flow.</i></b> "Flow content is basically whatever you
                    might want to put inside [the]
                    <code class="HTML"
                      ><span class="element">&lt;body&gt;</span></code
                    >
                    directly, or in any of the “larger” structuring
                    elements."..."Elements belonging to the flow content
                    category typically contain text or embedded content." The
                    <code class="HTML"
                      ><span class="element">&lt; p&gt;</span></code
                    >
                    element, for instance, falls within flow territory but is
                    not listed in any other categories.
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Sectioning.</i></b> "Elements belonging to the
                    sectioning content model create a section in the current
                    outline that defines the scope of
                    <code class="HTML"
                      ><span class="element">&lt;header&gt;</span></code
                    >
                    elements,
                    <code class="HTML"
                      ><span class="element">&lt;footer&gt;</span></code
                    >
                    elements, and heading content."
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Heading.</i></b> "Heading content defines the header
                    of a section (whether explicitly marked up using sectioning
                    content elements, or implied by the heading content itself).
                    "
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Phrasing.</i></b> "Phrasing content is the text of the
                    document, as well as elements that mark up that text at the
                    intra-paragraph level....Most elements that are categorized
                    as phrasing content can only contain elements that are
                    themselves categorized as phrasing content, not any flow
                    content...<b
                      >Runs of phrasing content form paragraphs [but paragraphs
                      themselves are not phrasing content].</b
                    >"..."The easiest way to remember, is that if it can be
                    inside a sentence, it's phrasing content."...if you're
                    thinking in HTML4 terms, think <em>inline</em> elements.
                    This includes images.
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Embedded.</i></b> "Embedded content imports another
                    resource or inserts content from another mark-up language or
                    namespace into the document....some embedded content
                    elements can have fallback content: content that is to be
                    used when the external resource cannot be used (e.g. because
                    it is of an unsupported format)."
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Interactive.</i></b> "Interactive content is content
                    that is specifically intended for user
                    interaction....Certain elements in HTML have an activation
                    behavior, which means that the user can activate them. This
                    triggers a sequence of events dependent on the activation
                    mechanism, and normally culminating in a
                    <span class="domevnt">click</span> event..."
                  </p>
                </li>
              </ol>

              <p class="toDo">
                Add member tags to each content model, linking to where their
                primary treatment within the reference.
              </p>
            </div>
          </li>

          <li id="general_whitespace">
            <div class="question">
              <p>How does HTML handle white space inside of elements?</p>
            </div>

            <div class="answer">
              <p>
                "Whitespace, such as line breaks, spaces, and tabs, is collapsed
                by default in HTML documents." By "collapsed", this means that
                two or more spaces, or any combination of the above spacing
                procedures will result in a single line-level space in HTML.
              </p>
            </div>
          </li>

          <li id="eleprof_PRE">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;pre&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                "The HTML
                <code class="HTML"
                  ><span class="element">&lt;pre&gt;</span></code
                >
                element represents <u>pre</u>formatted text. Text within this
                element is typically displayed in a non-proportional
                ("monospace") font exactly as it is laid out in the file.
                Whitespace inside this element is displayed as typed." As an
                example, the code below, as represented in the text editor, will
                be followed by an actual representation of that code in the
                browser. (Ironically, a
                <code class="HTML"
                  ><span class="element">&lt;pre&gt;</span></code
                >
                tag had to be used on everything within the below grey code
                block to be represented properly.)
              </p>

              <code class="block HTML">
                <pre><span class="element">&lt;p&gt;</span>   3 spaces,      2 tabs,
                    and a line break.<span class="element">&lt;/p&gt;</span></pre>
                <pre><span class="element">&lt;pre&gt;</span>   3 spaces,       2 tabs,
                    and a line break. <span class="element">&lt;/pre&gt;</span></pre>
              </code>

              <samp>
                <p>3 spaces, 2 tabs, and a line break.</p>
                <pre>
   3 spaces,       2 tabs,
                    and a line break. </pre
                >
              </samp>
            </div>
          </li>

          <li id="elecomp_B-STRONG">
            <div class="question">
              <p>
                What is the difference between the
                <code class="HTML"><span class="element">&lt;b&gt;</span></code>
                element and the
                <code class="HTML"
                  ><span class="element">&lt;strong&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                Let's take a look at the below. These two elements seem to
                achieve the exact same results:
              </p>

              <code class="block HTML">
                <span class="element">&lt;b&gt;</span>A sample sentence.<span
                  class="element"
                  >&lt;/b&gt;</span
                ><br /><span class="element">&lt;strong&gt;</span>A sample
                sentence.<span class="element">&lt;/strong&gt;</span>
              </code>

              <samp>
                <b>A sample sentence.</b><br />
                <strong>A sample sentence.</strong>
              </samp>

              <p>
                But that may be because you're reading this on a conventional
                desktop browser, and not a mobile phone. You're also probably
                not a blind person using a screen reader. There is an
                <a href="http://stackoverflow.com/a/271776">excellent post</a>
                on Stack Overflow about this:
              </p>

              <blockquote>
                <p>
                  They have the same effect on normal web browser rendering
                  engines, but there is a fundamental difference between them...
                </p>

                <p>Think of three different situations:</p>

                <ul>
                  <li>web browsers</li>
                  <li>blind people</li>
                  <li>mobile phones</li>
                </ul>

                <p>
                  "Bold" is a style - when you say "bold a word", people
                  basically know that it means to add more, let's say "ink"
                  around the letters until they stand out more amongst the rest
                  of the letters.
                </p>

                <p>
                  That, unfortunately, means nothing to a blind person. And on
                  mobile phones and other PDAs, text is already bold because
                  screen resolution is very small. You can't bold a bold without
                  screwing something up...
                </p>

                <p>
                  [Strong] however is an indication of how something should be
                  understood. "Strong" could (and often does) mean "bold" in a
                  browser, but it could also mean a lower tone for a speaking
                  program like Jaws (for blind people). And strong on a Palm
                  Pilot may be an underline (since you can't bold a bold).
                </p>

                <p>
                  HTML was never meant to be about styles. Do some searches for
                  "Tim Berners-Lee" and "the semantic web".
                  <code class="HTML"
                    ><span class="element">&lt;strong&gt;</span></code
                  >
                  is semantic - it describes the text it surrounds ("this text
                  should be stronger than the rest of the text you've
                  displayed") as opposed to describing how the text it surrounds
                  should be displayed ("this text should be bold").
                </p>
              </blockquote>
            </div>
          </li>

          <li id="elecomp_I-EM">
            <div class="question">
              <p>
                What is the difference between the
                <code class="HTML"><span class="element">&lt;i&gt;</span></code>
                element and the
                <code class="HTML"
                  ><span class="element">&lt;em&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                Let's take a look at the below. These two elements seem to
                achieve the exact same results:
              </p>

              <code class="block HTML">
                <span class="element">&lt;i&gt;</span>A sample sentence.<span
                  class="element"
                  >&lt;/i&gt;</span
                ><br /><span class="element">&lt;em&gt;</span>A sample
                sentence.<span class="element">&lt;/em&gt;</span>
              </code>

              <samp>
                <i>A sample sentence.</i><br />
                <em>A sample sentence.</em>
              </samp>

              <p>
                But that may be because you're reading this on a conventional
                desktop browser, and not a mobile phone. You're also probably
                not a blind person using a screen reader.
                <em
                  >The
                  <code class="HTML"
                    ><span class="element">&lt;i&gt;</span></code
                  >
                  element is stylistic; the
                  <code class="HTML"
                    ><span class="element">&lt;em&gt;</span></code
                  >
                  element is semantic.</em
                >
                An excellent explanation is quoted at length in an
                <a href="#elecomp_B-STRONG">answer</a> to the question about the
                difference between the
                <code class="HTML"><span class="element">&lt;b&gt;</span></code>
                and
                <code class="HTML"
                  ><span class="element">&lt;strong&gt;</span></code
                >
                elements.
              </p>
            </div>
          </li>

          <li id="eleprof_B-I">
            <div class="question">
              <p>
                What are the proper roles of the
                <code class="HTML"><span class="element">&lt;b&gt;</span></code>
                and
                <code class="HTML"><span class="element">&lt;i&gt;</span></code>
                elements in HTML5?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"><span class="element">&lt;b&gt;</span></code>
                and
                <code class="HTML"><span class="element">&lt;i&gt;</span></code>
                elements have not been deprecated in HTML5, however - this is
                what the WHATWG
                <a href="https://html-differences.whatwg.org/#changed-elements"
                  >has to say</a
                >
                about their new roles:
              </p>

              <blockquote>
                <p>
                  The
                  <code class="HTML"
                    ><span class="element">&lt;b&gt;</span></code
                  >
                  element now represents a span of text to which attention is
                  being drawn for utilitarian purposes without conveying any
                  extra importance and with no implication of an alternate voice
                  or mood, such as key words in a document abstract, product
                  names in a review, actionable words in interactive text-driven
                  software, or an article lede.
                </p>

                <p>
                  The
                  <code class="HTML"
                    ><span class="element">&lt;i&gt;</span></code
                  >
                  element now represents a span of text in an alternate voice or
                  mood, or otherwise offset from the normal prose in a manner
                  indicating a different quality of text, such as a taxonomic
                  designation, a technical term, an idiomatic phrase from
                  another language, a thought, or a ship name in Western texts.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="eleprof_HEADINGS">
            <div class="question">
              <p>
                What are all the heading elements, and how should they be used?
              </p>
            </div>

            <div class="answer">
              <p>
                There are six heading elements, appropriately named
                <code class="HTML"><span class="element">&lt;h1&gt;</span></code
                >,
                <code class="HTML"><span class="element">&lt;h2&gt;</span></code
                >,
                <code class="HTML"><span class="element">&lt;h3&gt;</span></code
                >,
                <code class="HTML"><span class="element">&lt;h4&gt;</span></code
                >,
                <code class="HTML"><span class="element">&lt;h5&gt;</span></code
                >, and
                <code class="HTML"><span class="element">&lt;h6&gt;</span></code
                >. Each denotes a different level of heading. Naturally,
                browsers have default font sizes for all of them:
              </p>

              <samp>
                <h1>Heading 1 - All Human Activity</h1>
                <h2>Heading 2 - Recreational Activity</h2>
                <h3>Heading 3 - Skateboarding</h3>
                <h4>Heading 4 - Skateboarding Tricks</h4>
                <h5>Heading 5 - Grinds</h5>
                <h6>Heading 6 - Smith Grinds</h6>
              </samp>

              <p>
                ...but that does NOT mean you should use an
                <code class="HTML"><span class="element">&lt;h1&gt;</span></code
                >, then go straight to an
                <code class="HTML"
                  ><span class="element">&lt;h3&gt;</span></code
                >
                because you like the font size better. Remember,
                <em>styling should be left to CSS.</em>. Heading levels in HTML
                denote the importance and hierarchy of content. MDN has
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements"
                  title="MDN on Headings"
                  >some good guidelines on best usage</a
                >:
              </p>

              <ul>
                <li>
                  Do not use lower levels to decrease heading font size: use the
                  CSS
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >
                  property instead.
                </li>
                <li>
                  Avoid skipping heading levels: always start from
                  <code class="HTML"
                    ><span class="element">&lt;h1&gt;</span></code
                  >, next use
                  <code class="HTML"
                    ><span class="element">&lt;h2&gt;</span></code
                  >
                  and so on.
                </li>
                <li>
                  ...you should consider avoiding using
                  <code class="HTML"
                    ><span class="element">&lt;h1&gt;</span></code
                  >
                  more than once on a page; by convention, it's used for the
                  page's displayed title, with all headings below starting with
                  <code class="HTML"
                    ><span class="element">&lt;h2&gt;</span></code
                  >.
                </li>
              </ul>
            </div>
          </li>

          <li id="attprof_MARGIN">
            <div class="question">
              <p>All HTML elements have margins. True or False?</p>
            </div>

            <div class="answer">
              <p>
                Mostly true. MDN states that
                <code class="CSS"><span class="property">margin</span></code
                >, along with
                <code class="CSS"><span class="property">margin-top</span></code
                >,
                <code class="CSS"
                  ><span class="property">margin-left</span></code
                >,
                <code class="CSS"
                  ><span class="property">margin-bottom</span></code
                >, and
                <code class="CSS"
                  ><span class="property">margin-right</span></code
                >, apply to "all elements, except elements with table
                <code class="CSS"><span class="property">display</span></code>
                types other than <span class="value">table-caption</span>,
                <span class="value">table</span> and
                <span class="value">inline-table</span>."
              </p>
            </div>
          </li>

          <li id="attprof_MARGIN_2">
            <div class="question">
              <p>
                How do margins behave when an element with a bottom margin is
                stacked on top of an element with a top margin?
              </p>
            </div>

            <div class="answer">
              <p>
                In many cases, margins "<a
                  href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing"
                  >collapse</a
                >" - in other words, combine. The margins of vertically adjacent
                sibling elements are, by default, collapsed. Keep in mind
                "sibling" doesn't mean two of the same element, such as two
                paragraphs stacked on top of each other. (In Chrome, the default
                top and bottom margins for a paragraph is 1em.) Siblings are any
                two elements which reside under the same parent element.
              </p>
            </div>
          </li>

          <li id="eleprof_BR">
            <div class="question">
              <p>
                What is the function of the
                <code class="HTML"
                  ><span class="element">&lt;br&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;br&gt;</span></code
                >
                element produces a line break in text. "It is useful for writing
                a poem or an address, where the division of lines is
                significant." For example, the following code:
              </p>

              <code class="block HTML">
                <span class="element">&lt;p&gt;</span><br />
                &nbsp;&nbsp;Jeff Gore <span class="element">&lt;br&gt;</span
                ><br />
                &nbsp;&nbsp;1313 Randolf Place
                <span class="element">&lt;br&gt;</span><br />
                &nbsp;&nbsp;Philadelphia, PA 19147<br />
                <span class="element">&lt;/p&gt;</span><br />
              </code>

              <samp>
                Jeff Gore <br />
                1313 Randolf Place <br />
                Philadelphia, PA 19147
              </samp>
            </div>
          </li>
          <li id="eleprof_blockquote">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;blockquote&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;blockquote&gt;</span></code
                >
                element indicates that the enclosed text is an extended
                quotation. This is a good example of using meaningful,
                self-documenting, semantic code. So, for instance, here I am
                quoting an author:
              </p>
              <blockquote>
                Every journalist who is not too stupid or full of himself to
                notice what is going on knows that what he does is morally
                indefensible. He is a kind of confidence man, preying on
                people's vanity, ignorance, or loneliness, gaining their trust
                and betraying them without remorse.
              </blockquote>
              <p>
                There is no CSS styling on this element; Chrome's default
                stylesheet makes it indented and italic.
              </p>
            </div>
          </li>
          <li id="synprof_voidelements">
            <div class="question">
              <p>What are "void elements"?</p>
            </div>

            <div class="answer">
              <p>
                Void elements only have one tag - they do not have opening and
                closing tags because they do not have content. "A void element
                is an element whose content model never allows it to have
                contents under any circumstances. Void elements can have
                attributes." This is a complete list of void HTML elements:
                <code class="HTML"
                  ><span class="element">&lt;area&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;base&gt;</span></code
                >,
                <code class="HTML"><span class="element">&lt;br&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;col&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;command&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;embed&gt;</span></code
                >,
                <code class="HTML"><span class="element">&lt;hr&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;img&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;input&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;keygen&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;link&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;meta&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;param&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;source&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;track&gt;</span></code
                >,
                <code class="HTML"
                  ><span class="element">&lt;wbr&gt;</span></code
                >.
              </p>

              <p class="answer">
                You may see some void elements written with a closing tag, for
                example,
                <code class="HTML"
                  ><span class="element">&lt;br/&gt;</span></code
                >
                or
                <code class="HTML"
                  ><span class="element">&lt;br /&gt;</span></code
                >. This is optional, and exists because "[in] XHTML, the XML
                syntactic requirements dictate that [the declaration of the
                element as void] must be made explicit using either an explicit
                end tag, as above, or the empty element syntax."
              </p>
            </div>
          </li>

          <li id="synprof_charentities">
            <div class="question">
              <p>What are "character references"?</p>
            </div>

            <div class="answer">
              <p>
                Because HTML itself is written with various characters, and
                needs some of those to be reserved for keywords and
                <span class="toDo">parser instructions</span>, it is impossible
                to include these characters in text through standard keyboard
                entry. For example, if I want to include angle brackets (&lt;
                &gt;) in my text while ensuring that the browser will not look
                at the text as an element, I need to use the character
                references
                <code class="html"><span class="entity">&amp;lt;</span></code>
                (less than) and <span class="entity">&amp;gt;</span> (greater
                than). Since the ampersand (&amp;) is also reserved by HTML as a
                parser instruction, I need to use
                <span class="entity">&amp;amp;</span> if I want to include it in
                text.
              </p>

              <p>
                The above are <strong>named</strong> character references. There
                are in fact three types of character references, all of which
                are HTML entities. All HTML entities start with the ampersand
                (&amp;) character and end with a semicolon. For the sake of
                example, for each type of reference, I will include the code
                which refers to the pound sign (#):
              </p>

              <ol type="I">
                <li>
                  <p>
                    <b><i>Named Character References.</i></b>
                    <span class="entity">&amp;num;</span> "The ampersand must be
                    followed by one of the names given in the
                    <a
                      href="https://www.w3.org/TR/html5/syntax.html#named-character-references"
                      >named character references</a
                    >
                    section, using the same case. The name must be one that is
                    terminated by a ";"... character.
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Decimal Numeric Character References.</i></b>
                    <span class="entity">&amp;#35;</span> This is the same
                    format as a named character reference, except for the
                    additional "#" after the initial ampersand. The number
                    references a character's Unicode decimal code. This is
                    equivalent to using the CHAR() function in Microsoft Excel.
                  </p>
                </li>

                <li>
                  <p>
                    <b><i>Hexadecimal Numeric Character References.</i></b>
                    <span class="entity">&amp;#X23;</span>This is the same
                    format as a decimal numeric reference, except for the
                    additional "x" after the initial "&amp;#". The number
                    references a character's Unicode hexadecimal code. (This
                    example does not make it obvious, but hexadecimal allows all
                    the characters to be represented in a code which is itself a
                    maximum of two characters. The tilde (~) symbol's Unicode
                    decimal code is 126, while its hexadecimal code is 7E.)
                  </p>
                </li>
              </ol>

              <p>
                Two useful character references to know are
                <span class="entity">&amp;copy;</span> for the copyright symbol
                (©) and <span class="entity">&amp;trade;</span> for the
                trademark symbol (™).
              </p>
            </div>
          </li>

          <li id="spcprof_NBSP">
            <div class="question">
              <p>
                What is the purpose of the
                <span class="entity">&amp;nbsp;</span> character reference?
              </p>
            </div>

            <div class="answer">
              <p>
                "NBSP" stands for "Non-Breaking SPace". This means that the
                words spaced with an <span class="entity">&amp;nbsp;</span> will
                never be found on separate lines. You can also use this to
                insert extra spaces in your text without having to wrap it in a
                <code class="HTML"
                  ><span class="element">&lt;pre&gt;</span></code
                >
                tag (since more than one space is, by default,
                <a
                  href="#general_whitespace"
                  title="Regarding White Space in HTML"
                  >ignored</a
                >). Keep in mind that such use of
                <span class="entity">&amp;nbsp;</span> should only be used for
                special cases...if you want to apply a consistent set of margins
                or indents, or even word spacing, then use CSS instead.
              </p>
            </div>
          </li>

          <li id="eleprof_IMG">
            <div class="question">
              <p>How do you place images on a web page?</p>
            </div>

            <div class="answer">
              <p>
                Images are placed using the
                <code class="HTML"
                  ><span class="element">&lt;img&gt;</span></code
                >
                element. See below for a sample:
              </p>

              <code class="block HTML">
                <span class="element"
                  >&lt;img <span class="attribute">src</span> =
                  <span class="value"
                    >"_images/English-bulldog-puppies.jpg"</span
                  >
                  <span class="attribute">width</span> =
                  <span class="value">"250"</span>
                  <span class="attribute">height</span> =
                  <span class="value">"180"</span>
                  <span class="attribute">alt</span> =
                  <span class="value">"Two ADORABLE puppies!"</span>&gt;</span
                >
              </code>

              <samp>
                <img
                  src="_images/eleprof_IMG_puppies.jpg"
                  width="250"
                  height="180"
                  alt="Two ADORABLE puppies!"
                />
              </samp>

              <p>
                Let's take a look at the attributes associated with the
                <code class="HTML"
                  ><span class="element">&lt;img&gt;</span></code
                >
                element one by one:
              </p>

              <ol type="I">
                <li>
                  <p>
                    <b
                      ><code class="HTML"
                        ><span class="attribute">src</span></code
                      ></b
                    >: The image source. This tells the browser where to find
                    the image file, starting from the location of the web page
                    itself. In this case, the <code>_images</code> folder is in
                    the same folder as the web page itself, so all the browser
                    needs is the folder name and the filename.
                  </p>
                </li>

                <li>
                  <p>
                    <b
                      ><code class="HTML"
                        ><span class="attribute">width/height</span></code
                      ></b
                    >: The width and the height of the image as specified in
                    pixels only. If you do not specify this, then the browser
                    will display the image at its native size. In HTML4, you
                    could specify percentages, but now that task should be left
                    to CSS. Speaking of CSS, important note: if you have CSS
                    rules which apply to image size, those rules will actually
                    override the
                    <code class="HTML"
                      ><span class="attribute">width</span></code
                    >
                    and/or
                    <code class="HTML"
                      ><span class="attribute">height</span></code
                    >
                    attributes. This at first seems against the rules of CSS,
                    but keep in mind that what overrules a stylesheet are not
                    element attributes themselves but (1) inline use of the
                    global
                    <code class="HTML"
                      ><span class="attribute">style</span></code
                    >
                    attribute, or (2) inclusion of a rule within the
                    <code class="HTML"
                      ><span class="element">&lt;style&gt;</span></code
                    >
                    element, found in the
                    <code class="HTML"
                      ><span class="element">&lt;head&gt;</span></code
                    >
                    of an HTML document, assuming that (1) and/or (2) are
                    invoked after the external stylesheet link.
                    <em
                      >Older/wiser note: keep in mind mobile devices which have
                      screen widths of less than 350 px!</em
                    >
                  </p>
                </li>

                <li>
                  <p>
                    <b
                      ><code class="HTML"
                        ><span class="attribute">alt</span></code
                      ></b
                    >: From MDN: "This attribute defines the alternative text
                    describing the image. Users will see this text displayed if
                    the image URL is wrong, the image is not in one of the
                    supported formats, or if the image is not yet
                    downloaded....Usage note: Omitting this attribute altogether
                    indicates that the image is a key part of the content, and
                    no textual equivalent is available. Setting this attribute
                    to an empty string (<code
                      ><span class="attribute">alt</span>=""</code
                    >) indicates that this image is not a key part of the
                    content, and that non-visual browsers may omit it from
                    rendering."
                  </p>
                </li>
              </ol>

              <p>
                Keep in mind that
                <code class="HTML"
                  ><span class="element">&lt;img&gt;</span></code
                >
                is an inline element, by default bottom-aligned to the baseline
                of the text. As an example, note that this Atlanta Braves logo
                (<img
                  src="_images/eleprof_IMG_atlantabraves.png"
                  width="25"
                  height="25"
                  alt="braves logo"
                />) has no issues being included on the line of text.
              </p>
            </div>
          </li>

          <li id="eleprof_NAV">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                element (Sectioning, Flow) is new to HTML5, and "represents a
                section of a page that links to other pages or to parts within
                the page: a section with navigation links." You should use
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                only for a "major block or navigation links; typically the
                <code class="HTML"
                  ><span class="element">&lt;footer&gt;</span></code
                >
                element often has a list of links that don't need to be in a
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                element."
              </p>

              <p>
                By default,
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                is a block-level element. Here's an example of how it could be
                used:
              </p>

              <code class="block HTML">
                <span class="element"
                  >&lt;nav <span class="attribute">id</span> =
                  <span class="value">"mainnavigation"</span>&gt;</span
                ><br />
                &nbsp;&nbsp;<span class="element">&lt;ul&gt;</span><br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="element">&lt;li&gt;</span
                ><span class="element"
                  >&lt;a <span class="attribute">href</span> =
                  <span class="value"> #topOfPage</span>&gt;</span
                >Top of Page<span class="element">&lt;/a&gt;</span
                ><span class="element">&lt;/li&gt;</span><br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="element">&lt;li&gt;</span
                ><span class="element"
                  >&lt;a <span class="attribute">href</span> =
                  <span class="value"> #semantc_contentmodels_dtl</span
                  >&gt;</span
                >Content Models<span class="element">&lt;/a&gt;</span
                ><span class="element">&lt;/li&gt;</span><br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="element">&lt;li&gt;</span
                ><span class="element"
                  >&lt;a <span class="attribute">href</span> =
                  <span class="value"> #eleprof_IMG</span>&gt;</span
                >Images<span class="element">&lt;/a&gt;</span
                ><span class="element">&lt;/li&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;/ul&gt;</span><br />
                <span class="element">&lt;/nav&gt;</span><br />
              </code>

              <samp>
                <nav>
                  <ul>
                    <li><a href="#topOfPage">Top of Page</a></li>
                    <li>
                      <a href="#semantc_contentmodels_dtl">Content Models</a>
                    </li>
                    <li><a href="#eleprof_IMG">Images</a></li>
                  </ul>
                </nav>
              </samp>

              <p>
                If you're using Chrome, note the default browser styling for
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >: a bold bulleted list. In sum,
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                should be used for major navigation blocks
                <em>within the site</em>. It is acceptable to use two
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                elements on a page - one for site navigation, and one for
                navigation within the page itself.
              </p>
            </div>
          </li>

          <li id="eleprof_ARTICLE">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;article&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                "The
                <code class="HTML"
                  ><span class="element">&lt;article&gt;</span></code
                >
                element [Sectioning, Flow] represents a self-contained
                composition in a document, page, application, or site, which is
                intended to be independently distributable or reusable (e.g., in
                syndication). This could be a forum post, a magazine or
                newspaper article, a blog entry, an object, or any other
                independent item of content."
              </p>
            </div>
          </li>

          <li id="eleprof_SECTION">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;section&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                "The HTML
                <code class="HTML"
                  ><span class="element">&lt;section&gt;</span></code
                >
                element [Sectioning, Flow] represents a generic section of a
                document, i.e., a thematic grouping of content, typically with a
                heading. Each
                <code class="HTML"
                  ><span class="element">&lt;section&gt;</span></code
                >
                should be identified, typically by including a heading (<code
                  class="HTML"
                  ><span class="element">&lt;h1&gt;</span></code
                >-<code class="HTML"
                  ><span class="element">&lt;h6&gt;</span></code
                >
                element) as a child of the
                <code class="HTML"
                  ><span class="element">&lt;section&gt;</span></code
                >
                element."
              </p>
            </div>
          </li>

          <li id="elereln_SECTIONandARTICLE">
            <div class="question">
              <p>
                How do the
                <code class="HTML"
                  ><span class="element">&lt;section&gt;</span></code
                >
                and
                <code class="HTML"
                  ><span class="element">&lt;article&gt;</span></code
                >
                elements relate to each other? Is one necessarily the child of
                the other?
              </p>
            </div>

            <div class="answer">
              <p>
                There is no hierarchical relationship between
                <code class="HTML"
                  ><span class="element">&lt;section&gt;</span></code
                >
                and
                <code class="HTML"
                  ><span class="element">&lt;article&gt;</span></code
                >. Each can be nested within the other for legitimate reasons.
                We will look at two examples which illustrate this.
              </p>

              <ol type="A" class="listanswer">
                <li>
                  <h3>Sections Within An Article</h3>
                  <code class="block HTML">
                    <span class="element"
                      >&lt;article <span class="attribute">id</span> =
                      <span class="value">"WhyWeShouldEatDogs"</span>&gt;</span
                    ><br />
                    &nbsp;&nbsp;<span class="element">&lt;section&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;h2&gt;</span
                    >
                    1. They're Plentiful <span class="element">&lt;/h2&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;p&gt;</span
                    >
                    There are dogs everywhere, plenty of meat is going to
                    waste!<span class="element">&lt;/p&gt;</span><br />
                    &nbsp;&nbsp;<span class="element">&lt;/section&gt;</span
                    ><br />
                    &nbsp;&nbsp;<span class="element">&lt;section&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;h2&gt;</span
                    >
                    2. They're Tasty <span class="element">&lt;/h2&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;p&gt;</span
                    >
                    Seriously, have you tried dog meat? You'll never eat chicken
                    again!<span class="element">&lt;/p&gt;</span><br />
                    &nbsp;&nbsp;<span class="element">&lt;/section&gt;</span
                    ><br />
                    <span class="element">&lt;/article&gt;</span><br />
                  </code>
                </li>

                <li>
                  <h3>Articles Within A Section</h3>

                  <code class="block HTML">
                    <span class="comment"
                      >&lt;!--End of "JeffWork", begin "JeffPraise" --&gt;</span
                    >
                    <br />
                    <span class="element"
                      >&lt;section <span class="attribute">id</span> =
                      <span class="value">"JeffPraise"</span>&gt;</span
                    >
                    <br />
                    &nbsp;&nbsp;<span class="element"
                      >&lt;article <span class="attribute">id</span> =
                      <span class="value">"NYT20201201"</span>&gt;</span
                    >
                    <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;h2&gt;</span
                    >
                    A Hero, A Savior, An Angel (New York Times, Dec. 1,
                    2020)<span class="element">&lt;/h2&gt;</span><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;p&gt;</span
                    >
                    Jeff Gore really, just wow, takes the cake. The New York
                    Times does not usually utilize its page space simply to
                    compliment someone, but after extensive discussions amongst
                    the editorial board, we have decided to publish this
                    article.<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;/p&gt;</span
                    ><br />
                    &nbsp;&nbsp;<span class="element">&lt;/article&gt;</span>
                    <br />
                    &nbsp;&nbsp;<span class="element"
                      >&lt;article <span class="attribute">id</span> =
                      <span class="value">"WP20210123"</span>&gt;</span
                    >
                    <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;h2&gt;</span
                    >
                    The Times is Right: Jeff is Something Else (Washington Post,
                    Jan. 23, 2021)<span class="element">&lt;/h2&gt;</span>
                    <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                      >&lt;p&gt;</span
                    >
                    Everything the New York Times said. Just wow.<span
                      class="element"
                      >&lt;/p&gt;</span
                    >
                    <br />
                    &nbsp;&nbsp;<span class="element">&lt;/article&gt;</span>
                    <br />
                    <span class="element">&lt;/section&gt;</span>
                    <br />
                  </code>
                </li>
              </ol>
            </div>
          </li>

          <li id="eleprof_ASIDE">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;aside&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                "The HTML
                <code class="HTML"
                  ><span class="element">&lt;aside&gt;</span></code
                >
                element [Sectioning, Flow] represents a section of the page with
                content connected tangentially to the rest, which could be
                considered separate from that content. These sections are often
                represented as sidebars or inserts. They often contain the
                definitions on the sidebars, such as definitions from the
                glossary; there may also be other types of information, such as
                related advertisements; the biography of the author; web
                applications; profile information or related links on the blog."
                (MDN)
              </p>

              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;aside&gt;</span></code
                >
                element should be "tangentially related" to the content of its
                <em>parent</em>. As the MDN definition says, these are often
                represented visually as sidebars. As the name suggests, an
                <code class="HTML"
                  ><span class="element">&lt;aside&gt;</span></code
                >
                is usually quite literally on the side, and therefore is
                frequently given a smaller width and a
                <span class="toDo"
                  >float
                  <!--link when you cover floats!--></span
                >
                property.
              </p>

              <aside class="float">
                <p>
                  "I go out with white women. This makes a lot of people
                  unhappy, mostly black women." - Dennis Rodman
                </p>
                <p class="note">
                  Dennis Rodman is an American retired professional basketball
                  player...nicknamed "The Worm" and was known for his fierce
                  defensive and rebounding abilities.
                </p>
              </aside>

              <code class="block float HTML">
                <span class="element"
                  >&lt;aside <span class="attribute">class</span> =
                  <span class="value">"pullquote"</span>&gt;</span
                >"I go out with white women. This makes a lot of people unhappy,
                mostly black women." - Dennis Rodman<span class="element"
                  >&lt;/aside&gt;</span
                >
              </code>

              <code class="block float CSS">
                <span class="comment">/*CSS of &lt;aside&gt; element:*/</span>
                <br />
                <span class="selector">.pullquote</span> {
                <span class="declaration">
                  <span class="property">float</span>:<span class="value"
                    >right</span
                  >;
                </span>
                <span class="declaration">
                  <span class="property">width</span>:<span class="value"
                    >25%</span
                  >;
                </span>
                }
              </code>
            </div>
          </li>

          <li id="eleprof_DIV">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                Use the
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                element when you need to structure or group content (i.e. put in
                a block-level format) without explicit semantic meaning. Prior
                to HTML5,
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                was used for the bulk of page structure, with
                <code class="HTML"><span class="attribute">class</span></code>
                or
                <code class="HTML"><span class="attribute">id</span></code>
                attributes used to pass along semantic meaning.
              </p>

              <p>
                Per MDN, "the HTML
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                element (or HTML Document Division Element) is the generic
                container for flow content, which does not inherently represent
                anything. It can be used to group elements for styling
                purposes...It should be used only when no other semantic element
                (such as
                <code class="HTML"
                  ><span class="element">&lt;article&gt;</span></code
                >
                or
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >) is appropriate."
              </p>
            </div>
          </li>

          <li id="synprof_GlobalAttributes">
            <div class="question">
              <p>What is a global attribute?</p>
            </div>

            <div class="answer">
              <p>
                "Global attributes are attributes common to all HTML elements;
                they can be used on all elements, though the attributes may have
                no effect on some elements." (MDN). The best examples of these
                are the
                <code class="HTML"><span class="attribute">class</span></code>
                and
                <code class="HTML"><span class="attribute">id</span></code>
                attributes, though
                <code class="HTML"><span class="attribute">style</span></code>
                is another good example.
              </p>
            </div>
          </li>

          <li id="attprof_CLASS">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"><span class="attribute">class</span></code>
                attribute?
              </p>
            </div>

            <div class="answer">
              <p>
                "The
                <code class="HTML"><span class="attribute">class</span></code>
                <a href="#synprof_GlobalAttributes">global attribute</a> is a
                space-separated list of the classes of the element. Classes
                allow CSS and Javascript to select and access specific elements
                via the class selectors or functions like the DOM method
                <span class="dommthd">document.getElementsByClassName</span>."
                (MDN)
              </p>

              <p>
                In essence, classes allow you to apply your own taxonomy to
                elements in order to categorize them. It is encouraged "to use
                names that describe the semantic purpose of the element, rather
                to the presentation of the element." For example,
                <span class="value">sidebar</span> would be superior to
                <span class="value">graybox</span>.
              </p>

              <p class="answer">
                For instance, in this very document, the questions are bold, and
                with a number prefix, while the answers are in regular font
                without numbers. Knowing that I may want to target only the
                answers later (perhaps hiding them in order to "take the test"),
                I created the classes <span class="value">question</span> and
                <span class="value">answer</span>. I also created the class
                <span class="value">toDo</span> to signify items which were on
                my To-Do list, and I applied red font-color to that class in
                order to make those items stand out.
              </p>

              <p class="answer">
                As alluded to earlier, the
                <code class="HTML"><span class="attribute">class</span></code>
                attribute can take multiple values, separated by a space. In the
                below example, giving the
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                a
                <code class="HTML"><span class="attribute">class</span></code>
                of <span class="value">marketing</span> allows us to target that
                class in the CSS for special formatting.
              </p>

              <code class="block HTML">
                <span class="element"
                  >&lt;div <span class="attribute">class</span> =
                  <span class="value">"marketing div2test"</span>&gt;</span
                >
                <br />
                <br />
                <span class="comment">/*CSS*/</span>
                <br />
                <span class="selector">.marketing</span> { <br />
                &nbsp;&nbsp;&nbsp;
                <span class="property">font-weight</span>:<span class="value"
                  >bold</span
                >; <br />
                &nbsp;&nbsp;&nbsp; <span class="property">font-size</span>:<span
                  class="value"
                  >1.2em</span
                >; <br />
                &nbsp;&nbsp;&nbsp;}
              </code>
            </div>
          </li>

          <li id="attprof_ID">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"><span class="attribute">id</span></code>
                attribute?
              </p>
            </div>

            <div class="answer">
              <p>
                "The
                <code class="HTML"><span class="attribute">id</span></code>
                <a href="#synprof_GlobalAttributes">global attribute</a> defines
                a unique identifier (ID) which must be unique in the whole
                document. Its purpose is to identify the element when linking
                (using a fragment identifier), scripting, or styling (with
                CSS)." (MDN) Here's a list of rules to keep in mind when using
                the ID attribute:
              </p>

              <ol>
                <li>
                  The
                  <code class="HTML"><span class="attribute">id</span></code>
                  value must be unique within the document.
                </li>
                <li>
                  The
                  <code class="HTML"><span class="attribute">id</span></code>
                  value "must not contain whitespace (spaces, tabs etc.).
                  Browsers treat non-conforming IDs that contain whitespace as
                  if the whitespace is part of the ID."
                </li>
                <li>
                  "Using characters except ASCII letters and digits, '_', '-'
                  and '.' may cause compatibility problems, as they weren't
                  allowed in HTML 4."
                </li>
                <li>
                  "Though this restriction has been lifted in HTML 5, an
                  <code class="HTML"><span class="attribute">id</span></code>
                  should start with a letter for compatibility."
                </li>
              </ol>

              <p>
                Each of the questions in this document, for instance, has a
                unique
                <code class="HTML"><span class="attribute">id</span></code
                >. As you can see below, this helps immensely when looking at
                the page in the Inspect view of Google Chrome:
              </p>

              <img
                src="_images/eleprof_ID_ChromeInspect.png"
                alt="Chrome Inspect screenshot"
              />
            </div>
          </li>

          <li id="eleprof_HEADER">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;header&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;header&gt;</span></code
                >
                element represents "a group of introductory or navigational
                aids. It may contain some heading elements but also other
                elements like a logo, wrapped section's header, a search form,
                and so on." (MDN)..."The header element is not sectioning
                content; it doesn't introduce a new section." (W3C)
              </p>

              <p>
                Like many of the semantic elements it is technically just an
                empty block element. It represents introductory content for its
                <em> parent sectioning element</em> - so that means there
                theoretically could be more than one header on a page: one for
                the
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >, plus one for an
                <code class="HTML"
                  ><span class="element">&lt;article&gt;</span></code
                >
                within that
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >.
              </p>

              <p>
                If using a
                <code class="HTML"
                  ><span class="element">&lt;nav&gt;</span></code
                >
                element at the top of a page it should probably be within the
                <code class="HTML"
                  ><span class="element">&lt;header&gt;</span></code
                >.
              </p>
            </div>
          </li>

          <li id="eleprof_FOOTER">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;footer&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;footer&gt;</span></code
                >
                element typically contains information about the author,
                copyright, and boilerplate links. Like the
                <code class="HTML"
                  ><span class="element">&lt;header&gt;</span></code
                >
                element, it is relative to its immediate parent/ancestor and can
                appear more than once on a page
              </p>
            </div>
          </li>

          <li id="eleprof_MAIN">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;main&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;main&gt;</span></code
                >
                element "represents the main content of the
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >
                of a document or application. The main content area consists of
                content that is directly related to, or expands upon the central
                topic of a document...The main content area of a document
                includes content that is unique to that document and excludes
                content that is repeated across a set of documents such as site
                navigation links, copyright information, site logos and banners
                and search forms (unless the document or applications main
                function is that of a search form)." (MDN, W3C)
              </p>

              <p>
                "[T]he usage of the element is pretty simple: The
                <code class="HTML"
                  ><span class="element">&lt;main&gt;</span></code
                >
                element is used once per page and should be used wrapping your
                main content. That means, it will take its place between the
                body's
                <code class="HTML"
                  ><span class="element">&lt;header&gt;</span></code
                >
                and
                <code class="HTML"
                  ><span class="element">&lt;footer&gt;</span></code
                >." Some other things to note about the
                <code class="HTML"
                  ><span class="element">&lt;main&gt;</span></code
                >
                element:
              </p>

              <ul>
                <li>
                  The main element is not sectioning content and has no effect
                  on the document outline.
                </li>
                <li>
                  Authors must not include more than one main element in a
                  document.
                </li>
                <li>
                  Authors must not include the main element as a descendant of
                  an
                  <code class="HTML"
                    ><span class="element">&lt;article&gt;</span></code
                  >,
                  <code class="HTML"
                    ><span class="element">&lt;aside&gt;</span></code
                  >,
                  <code class="HTML"
                    ><span class="element">&lt;footer&gt;</span></code
                  >,
                  <code class="HTML"
                    ><span class="element">&lt;header&gt;</span></code
                  >
                  or
                  <code class="HTML"
                    ><span class="element">&lt;nav&gt;</span></code
                  >
                  element.
                </li>
              </ul>
            </div>
          </li>

          <li id="synprof_pagestructure">
            <div class="question">
              <p>
                Provide a skeleton of a webpage which shows the order and
                nesting of the most commonly-used heading, sectioning and flow
                elements. Notate which elements fall into which content models.
              </p>
            </div>

            <div class="answer">
              <code class="block HTML">
                &lt;!DOCTYPE HTML&gt;<br />
                <span class="element">&lt;html&gt;</span><br /><br />
                <span class="element">&lt;&nbsp;&nbsp;&lt;head&gt;</span><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;&lt;/title&gt;</span
                ><br />
                <span class="element">&lt;&nbsp;&nbsp;&lt;/head&gt;</span
                ><br /><br />
                <span class="element">&lt;&nbsp;&nbsp;&lt;body&gt;</span
                ><br /><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;header&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;nav&gt;&lt;/nav&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/header&gt;</span
                ><br /><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;main&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;&lt;/h1&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;section&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;&lt;/h2&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;/p&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;aside&gt;&lt;/aside&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;/p&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/section&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/main&gt;</span
                ><br /><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;footer&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;nav&gt;&lt;/nav&gt;</span
                ><br />
                <span class="element"
                  >&lt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/footer&gt;</span
                ><br /><br />
                <span class="element">&lt;&nbsp;&nbsp;&lt;/body&gt;</span
                ><br /><br />
                <span class="element">&lt;/html&gt;</span>
              </code>
            </div>
          </li>

          <li id="general_define_WAI-ARIA">
            <div class="question">
              <p>What does "WAI-ARIA" stand for, and what does it mean?</p>
            </div>

            <div class="answer">
              <p>
                WAI-ARIA stands for "Web Accessibility Initiative – Accessible
                Rich Internet Applications," and it "defines a way to make Web
                content and Web applications more accessible to people with
                disabilities." (W3C).
              </p>

              <p>
                "Accessible Rich Internet Applications (ARIA) defines ways to
                make Web content and Web applications (especially those
                developed with Ajax and JavaScript) more accessible to people
                with disabilities. For example, ARIA enables accessible
                navigation landmarks, JavaScript widgets, form hints and error
                messages, live content updates, and more." (MDN)
              </p>
            </div>
          </li>

          <li id="attprof_ROLE">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"><span class="attribute">role</span></code>
                attribute?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="HTML"><span class="attribute">role</span></code>
                attribute is used in accordance with
                <a href="#general_define_WAI-ARIA">WAI-ARIA</a> to "define what
                the general type of object is (such as an article, alert, or
                slider). Additional ARIA attributes provide other useful
                properties, such as a description for a form or the current
                value of a progressbar."
              </p>

              <p>
                As the W3C notes, "web developers may use the ARIA role and
                aria-* attributes on HTML elements...except where these conflict
                with the strong native semantics or are equal to the default
                implicit ARIA semantics of a given HTML element." This means
                that there is no need for an element like
                <code
                  ><span class="element">&lt;article&gt;</span>
                  <span class="attribute">role</span> =
                  <span class="value">"article"</span>&gt;</code
                >.
              </p>

              <p>
                The W3C maintains a
                <a
                  href="https://www.w3.org/TR/html-aria/#docconformance"
                  title="W3C table of ARIA best practices by element"
                  >comprehensive table</a
                >
                of HTML elements with a column for ARIA attributes which should
                not be used, and which may be used.
              </p>
            </div>
          </li>

          <li id="eleprof_A">
            <div class="question">
              <p>
                How does one create hyperlinks (both to external and internal
                pages)?
              </p>
            </div>

            <div class="answer">
              <p>
                Hyperlinks are created using the the
                <code class="HTML"><span class="element">&lt;a&gt;</span></code>
                element. "A" stands for "anchor", because at one point the
                element was used to create an anchor point—a destination for
                hyperlinks within the content of a page. This is now obsolete,
                as you can assign an
                <code class="HTML"
                  ><span class="attribute"
                    ><a href="#attprof_ID">id</a></span
                  ></code
                >
                attribute to any element on the page.
              </p>

              <p>
                The crucial attribute to include with the
                <code class="HTML"><span class="element">&lt;a&gt;</span></code>
                element is
                <code class="HTML"><span class="attribute">href</span></code
                >, which stands for Hypertext REFerence. This is what transforms
                the anchor into what we all know as a "link." Below are a few
                examples of hyperlinks:
              </p>

              <code class="block HTML">
                <span class="comment">1. Hyperlink to External Webpage</span
                ><br />
                <span class="element"
                  >&lt;a <span class="attribute">href</span> =
                  <span class="value"> "https://developer.mozilla.org"</span
                  >&gt;</span
                >Mozilla Developer Website<span class="element">&lt;/a&gt;</span
                ><br />
                <span class="comment"
                  >2. Hyperlink to Specific Area of the Same Page - use "#"
                  followed by id attribute value. The below will make the
                  current page scroll up to the element with the id
                  "topOfPage".</span
                ><br />
                <span class="element"
                  >&lt;a <span class="attribute">href</span> =
                  <span class="value"> "#topOfPage"</span>&gt;</span
                >Back to Beginning<span class="element">&lt;/a&gt;</span><br />
                <span class="comment"
                  >3. Hyperlink to Specific Area of an External Page - combine 1
                  and 2, with the full external link first, followed immediately
                  by the id attribute value.</span
                ><br />
                <span class="element"
                  >&lt;a <span class="attribute">href</span> =
                  <span class="value">
                    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Scripting"</span
                  >&gt;</span
                >HTML Element Reference Page - Scripting Section<span
                  class="element"
                  >&lt;/a&gt;</span
                >
              </code>

              <samp>
                <a href="https://developer.mozilla.org" target="cheese"
                  >Mozilla Developer Website</a
                ><br />
                <a href="#topOfPage">Back to Beginning</a>
              </samp>

              <p>
                The
                <code class="HTML"><span class="attribute">href</span></code>
                attribute is the bare-bones requirement for a functioning
                hyperlink, but there are other attributes which are important:
              </p>

              <ul>
                <li>
                  <code class="HTML"><span class="attribute">title</span></code
                  >: Text string. For
                  <a href="#general_define_WAI-ARIA" title="GOOF TROOP"
                    >accessibility reasons</a
                  >, you should always include this, so that screen readers can
                  describe the destination of the link.
                </li>
                <li>
                  <code class="HTML"><span class="attribute">target</span></code
                  >: This specifies where to display the link. There are a
                  handful of keywords that can be used with this attribute:
                </li>
                <ul>
                  <li>
                    <span class="value">_blank</span>: open the link in a new
                    window.
                  </li>
                  <li>
                    <span class="value">_parent</span>: "load the response into
                    the...<span class="toDo">parent browsing context</span> of
                    the current [frame]."
                  </li>
                  <li>
                    <span class="value">_top</span>: "Load the response into the
                    top-level browsing context (that is, the browsing context
                    that is an ancestor of the current one, and has no parent)."
                  </li>
                  <li>
                    <span class="value">_self</span>: "Load the response into
                    the same...browsing context as the current one. This value
                    is the default if the attribute is not specified."
                  </li>
                </ul>
                <li>
                  <code class="HTML"><span class="attribute">rel</span></code
                  >: "For anchors containing the
                  <code class="HTML"><span class="attribute">href</span></code>
                  attribute, this attribute specifies the RELationship of the
                  target object to the link object." The value is a
                  space-separated list of link types values. For instance,
                  <code
                    ><span class="attribute">rel</span> =
                    <span class="value">"next"</span></code
                  >
                  means that the the link is part of a series, and that the link
                  will take you to the next document in the series.
                </li>
                <li>
                  <p>
                    <code class="HTML"
                      ><span class="attribute">download</span></code
                    >: "This attribute, if present, indicates that the author
                    intends the hyperlink to be used for downloading a resource
                    so that when the user clicks on the link they will be
                    prompted to save it as a local file. If the attribute has a
                    value, the value will be used as the pre-filled file name in
                    the Save prompt that opens when the user clicks on the
                    link."
                  </p>
                  <p>
                    In the below example, the
                    <code class="HTML"
                      ><span class="attribute">download</span></code
                    >
                    attribute is used without a value to tell the browser to
                    bypass its built-in PDF reader and go straight to
                    downloading the file:
                  </p>
                  <code class="block HTML">
                    <span class="element"
                      >&lt;a <span class="attribute">href</span> =
                      <span class="value">
                        "_assets/AlbertsonsOwnership.pdf"</span
                      >
                      <span class="hatn hghlt">download</span>&gt;</span
                    >Albertson's Ownership Structure<span class="element"
                      >&lt;/a&gt;</span
                    >
                  </code>
                  <samp>
                    <a href="_assets/AlbertsonsOwnership.pdf" download=""
                      >Albertson's Ownership Structure</a
                    >
                  </samp>
                  <p>
                    In the below example, the
                    <code class="HTML"
                      ><span class="attribute">download</span></code
                    >
                    attribute is used with a value to supply a default value for
                    the file name:
                  </p>
                  <code class="block HTML">
                    <span class="element"
                      >&lt;a <span class="attribute">href</span> =
                      <span class="value">
                        "_assets/AlbertsonsOwnership.pdf"</span
                      >
                      <span class="hghlt"
                        ><span class="attribute">download</span> =
                        <span class="value">"The Tree of Life"</span></span
                      >&gt;</span
                    >Albertson's Ownership Structure<span class="element"
                      >&lt;/a&gt;</span
                    >
                  </code>
                  <samp>
                    <a
                      href="_assets/AlbertsonsOwnership.pdf"
                      download="The Tree of Life"
                      >Albertson's Ownership Structure</a
                    >
                  </samp>
                  <p>
                    Note that this attribute has no bearing on whether the "Save
                    As..." dialog box appears. Whether the user wants a
                    downloaded file to go automatically to a predetermined
                    folder, or to be prompted for a file location every time, is
                    a browser setting.
                  </p>
                </li>
              </ul>
            </div>
          </li>

          <li id="eleprof_LINK">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;link&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                Despite its name, the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;link&gt;</span></code
                >
                element is not to link to other pages on the web - that's the
                job of
                <a href="#eleprof_A"
                  >the
                  <code class="HTML"
                    ><span class="element">&lt;a&gt;</span></code
                  >
                  element</a
                >. Instead, this element requests external resources for the
                page, or, as MDN puts it, "specifies relationships between the
                current document and an external resource." It is commonly used
                in connecting the document to an external CSS stylesheet - here
                is how it looks in this very document:
              </p>

              <code class="block HTML">
                <span class="element"
                  >&lt;link <span class="attribute">href</span> =
                  <span class="value">"_css/JGWebReference.css"</span>
                  <span class="attribute">rel</span> =
                  <span class="value">"stylesheet"</span>
                  <span class="attribute">type</span> =
                  <span class="value">"text/css"</span>&gt;</span
                >
              </code>

              <p>
                Note that the attributes
                <code class="HTML"><span class="attribute">href</span></code>
                and <code class="HTML"><span class="attribute">rel</span></code
                >, also used in the
                <code class="HTML"><span class="element">&lt;a&gt;</span></code>
                element, are used here. The
                <code class="HTML"><span class="attribute">type</span></code>
                attribute "is used to define the type of the content linked to.
                The value of the attribute should be a
                <span class="toDo">MIME</span> type such as
                <span class="value">text/html</span>,
                <span class="value">text/css</span>, and so on."
              </p>
            </div>
          </li>

          <li id="synprof_LinkingUpandDownFolders">
            <div class="question">
              <p>
                Let's say I want to link to another HTML document called
                <code>htmlnesttest.html</code> from my main website
                <code>JGWebReference.htm</code> given the following folder
                structure:
              </p>
              <img
                src="_images/synprof_LinkingUpandDownFolders.jpg"
                alt="Screenshot of folder structure"
              />
              <p>How would I go about writing the hyperlink for:</p>
              <ol type="A">
                <li>
                  From <code>JGWebReference.htm</code> to
                  <code>htmlnesttest.html</code>
                </li>
                <li>
                  From <code>htmlnesttest.html</code> to
                  <code>JGWebReference.htm</code>
                </li>
                <li>
                  From <code>htmlnesttest.html</code> to
                  <code>JGWebReference.css</code>, which is found in the
                  <code>_css</code> folder.
                </li>
              </ol>
            </div>

            <div class="answer">
              <p>Here are the answers:</p>
              <ol type="A" class="listanswer">
                <li>
                  <p>
                    From <code>JGWebReference.htm</code> to
                    <code>htmlnesttest.html</code>:
                  </p>
                  <code class="block HTML"
                    ><span class="element"
                      >&lt;a <span class="attribute">href</span> =
                      <span class="value">
                        "+nesttest/+nesttest_child/+nesttest_grandchild/htmlnesttest.html"</span
                      >&gt;</span
                    >Grandchild Page<span class="element"
                      >&lt;/a&gt;</span
                    ></code
                  >
                  <samp
                    ><a
                      href="+nesttest/+nesttest_child/+nesttest_grandchild/htmlnesttest.html"
                      >Grandchild Page</a
                    ><br
                  /></samp>
                  <p></p>
                </li>
                <li>
                  <p>
                    From <code>htmlnesttest.html</code> to
                    <code> JGWebReference.htm</code>:
                  </p>
                  <code class="block HTML"
                    ><span class="element"
                      >&lt;a <span class="attribute">href</span> =
                      <span class="value"> "../../../JGWebReference.htm"</span
                      >&gt;</span
                    >Grandparent Page<span class="element">&lt;/a&gt;</span
                    ><br />
                    <span class="comment"
                      >&lt;!--Visit the Grandchild Page to see this link in
                      action! --&gt;</span
                    >
                  </code>
                  <p>
                    Each ".." signifies a parent directory
                    <em
                      >of the directory in which the file is currently
                      located</em
                    >. So the "../../../", from right to left, signfies:
                  </p>
                  <ol>
                    <li>
                      Go up from your current folder to the
                      <code>+nesttest_child</code> folder.
                    </li>
                    <li>
                      Go up from there to the <code>+nesttest</code> folder.
                    </li>
                    <li>
                      Go up from there to the <code>HCJ MasterRef</code> folder.
                    </li>
                    <li>
                      There you will find <code>JGWebReference.htm</code>.
                    </li>
                  </ol>
                </li>
                <li>
                  <p>
                    From <code>htmlnesttest.html</code> to
                    <code>JGWebReference.css</code>, which is found in the
                    <code>_css</code> folder:
                  </p>
                  <code class="block HTML">
                    &lt;<span class="element">&lt;link&gt;</span>
                    <span class="attribute">href</span> =
                    <span class="value"
                      >"../../../_css/JGWebReference.css"</span
                    >
                    <span class="attribute">rel</span> =
                    <span class="value">"stylesheet"</span>
                    <span class="attribute">type</span> =
                    <span class="value">"text/css"</span>&gt;
                  </code>
                  <p>
                    Even though the <code>_css</code> folder is not on the same
                    hierarchical level as the <code>HCJ MasterRef</code> folder,
                    the same "../../../" is necessary because you must travel
                    <em>through</em> <code>HCJ MasterRef</code> to get to CSS.
                    So the steps in this link are (difference in bold):
                  </p>
                  <ol>
                    <li>
                      Go up from your current folder to the
                      <code>+nesttest_child</code> folder.
                    </li>
                    <li>
                      Go up from there to the <code>+nesttest</code> folder.
                    </li>
                    <li>
                      Go up from there to the <code>HCJ MasterRef</code> folder.
                    </li>
                    <li>
                      <strong
                        >Go down from there to the
                        <code>_css</code> folder.</strong
                      >
                    </li>
                    <li>
                      There you will find <code>JGWebReference.css</code>.
                    </li>
                  </ol>
                  <p>
                    In sum, internal links are
                    <strong>document-relative</strong>. You must take into
                    account where the document is within the folder hierarchy,
                    and where the file to which it is linking is located within
                    that same hierarchy.
                  </p>
                </li>
              </ol>
            </div>
          </li>

          <li id="elereln_AandBLOCK">
            <div class="question">
              <p>
                In HTML5, you can wrap the
                <code class="HTML"><span class="element">&lt;a&gt;</span></code>
                tag around block-level elements such as
                <code class="HTML"
                  ><span class="element">&lt;h1&gt;</span></code
                >
                and
                <code class="HTML"><span class="element">&lt;p&gt;</span></code
                >. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True. See below for an example.</p>
              <samp>
                <a
                  href="https://en.wikipedia.org/wiki/Janet_Malcolm"
                  title="Janet Malcolm Wikipedia Page"
                >
                  <p class="plink">
                    "Every journalist who is not too stupid or full of himself
                    to notice what is going on knows that what he does is
                    morally indefensible. He is a kind of confidence man,
                    preying on people's vanity, ignorance, or loneliness,
                    gaining their trust and betraying them without remorse."
                  </p>
                </a>
              </samp>
            </div>
          </li>

          <li id="synprof_A">
            <div class="question">
              <p>
                When linking to an external page, is perfectly acceptable to
                omit the "http://www" portion of the
                <code class="HTML"><span class="attribute">href</span></code>
                value when specifying a link location. True or False?
              </p>
            </div>

            <div class="answer">
              <p>
                False. You need to enter the full URL of the website to which
                you are linking.
              </p>
            </div>
          </li>

          <li id="synprof_ID_CaseSensitivity">
            <div class="question">
              <p>
                The values of
                <code class="HTML"><span class="attribute">id</span></code> and
                <code class="HTML"><span class="attribute">class</span></code>
                attributes are case-sensitive. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                True, though we should mention that it is HTML that is sensitive
                to case, not CSS.
              </p>
              <p>
                "CSS is case insensitive in all matters under its control;
                however, some things, such as the document markup language, are
                beyond its control. HTML is case insensitive in most respects,
                except when it comes to certain attribute values, like the id
                and class attributes."
              </p>
            </div>
          </li>

          <li id="elereln_OLandUL">
            <div class="question">
              <p>
                What is the difference between an ordered list and an unordered
                list?
              </p>
            </div>

            <div class="answer">
              <p>
                An ordered list is numbered, or lettered, to signify that the
                order of items is significant:
              </p>
              <ol>
                <li></li>
                <li></li>
                <li></li>
              </ol>

              <ol type="a">
                <li></li>
                <li></li>
                <li></li>
              </ol>

              <p>
                ..and an unordered list is essentially a bulleted list, in which
                the order is insignificant:
              </p>
              <ul>
                <li></li>
                <li></li>
                <li></li>
              </ul>
            </div>
          </li>

          <li id="eleprof_OL">
            <div class="question">
              <p>How does one create an ordered list?</p>
            </div>

            <div class="answer">
              <p>
                Ordered lists are created using the
                <code class="HTML"
                  ><span class="element">&lt;ol&gt;</span></code
                >
                element as a parent/container element, with each list item
                wrapped in an
                <code class="HTML"
                  ><span class="element">&lt;li&gt;</span></code
                >
                element. The symbol used in the order (numbers, letters, Roman
                Numerals) is specified by the
                <code class="HTML"><span class="attribute">type</span></code>
                attribute. Here's the core syntax with no attributes., with the
                default value shown:
              </p>
              <code class="block HTML">
                <span class="element">&lt;h6&gt;</span>My Top 3 NBA Secondary
                Logos<span class="element">&lt;/h6&gt;</span><br />
                <span class="element">&lt;ol&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;li&gt;</span
                >&gt;Vancouver Grizzlies ('90s)&lt;<span class="element"
                  >&lt;/li&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;li&gt;</span>&gt;Utah
                Jazz&lt;<span class="element">&lt;/li&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;li&gt;</span>&gt;L.A.
                Clippers&lt;<span class="element">&lt;/li&gt;</span>&gt;<br />
                <span class="element">&lt;/ol&gt;</span>
              </code>
              <samp>
                <h5>My Top 3 Favorite NBA Secondary Logos During the 1990s</h5>
                <ol>
                  <li>Vancouver Grizzlies</li>
                  <li>Utah Jazz</li>
                  <li>L.A. Clippers</li>
                </ol>
              </samp>
              <p>
                Here are some examples of the different uses of the
                <code class="HTML"><span class="attribute">type</span></code>
                attribute on the same ordered list. MDN advises: "Unless the
                value of the list number matters (e.g. in legal or technical
                documents where items are to be referenced by their
                number/letter), the CSS
                <code class="CSS"
                  ><span class="property">list-style-type</span></code
                >
                property should be used instead."
              </p>
              <code class="block HTML">
                <span class="element"
                  >&lt;ol <span class="attribute">type</span> =
                  <span class="value">"A"</span>&gt;</span
                >
              </code>
              <code class="block CSS">
                <span class="selector">ol</span> { <br />
                <span class="declaration">
                  <span class="property">list-style-type:</span
                  ><span class="value">upper-alpha</span>;
                </span>
                }
              </code>
              <samp>
                <ol style="list-style-type: upper-alpha">
                  <li>Vancouver Grizzlies ('90s)</li>
                  <li>Utah Jazz</li>
                  <li>L.A. Clippers</li>
                </ol>
              </samp>
              <code class="block HTML">
                <span class="element"
                  >&lt;ol <span class="attribute">type</span> =
                  <span class="value">"a"</span>&gt;</span
                >
              </code>
              <code class="block CSS">
                <span class="selector">ol</span> { <br />
                <span class="declaration">
                  <span class="property">list-style-type:</span
                  ><span class="value">lower-alpha</span>;
                </span>
                }
              </code>
              <samp>
                <ol style="list-style-type: lower-alpha">
                  <li>Vancouver Grizzlies ('90s)</li>
                  <li>Utah Jazz</li>
                  <li>L.A. Clippers</li>
                </ol>
              </samp>
              <code class="block HTML">
                <span class="element"
                  >&lt;ol <span class="attribute">type</span> =
                  <span class="value">"i"</span>&gt;</span
                >
              </code>
              <code class="block CSS">
                <span class="selector">ol</span> { <br />
                <span class="declaration">
                  <span class="property">list-style-type:</span
                  ><span class="value">lower-roman</span>;
                </span>
                }
              </code>
              <samp>
                <ol style="list-style-type: lower-roman">
                  <li>Vancouver Grizzlies ('90s)</li>
                  <li>Utah Jazz</li>
                  <li>L.A. Clippers</li>
                </ol>
              </samp>
              <code class="block HTML">
                <span class="element"
                  >&lt;ol <span class="attribute">type</span> =
                  <span class="value">"I"</span>&gt;</span
                >
              </code>
              <code class="block CSS">
                <span class="selector">ol</span> { <br />
                <span class="declaration">
                  <span class="property">list-style-type:</span
                  ><span class="value">upper-roman</span>;
                </span>
                }
              </code>
              <samp>
                <ol style="list-style-type: upper-roman">
                  <li>Vancouver Grizzlies ('90s)</li>
                  <li>Utah Jazz</li>
                  <li>L.A. Clippers</li>
                </ol>
              </samp>
              <p>
                If for some reason the numeric order is not the default on your
                page (because of a CSS rule applied on a large scale), and you
                would want to use it, you would use
                <code class="HTML"
                  ><span class="element"
                    >&lt;ol <span class="attribute">type</span> =
                    <span class="value">"1"</span>&gt;</span
                  ></code
                >.
              </p>
            </div>
          </li>

          <li id="eleprof_UL">
            <div class="question">
              <p>How does one create an unordered list?</p>
            </div>

            <div class="answer">
              <p>
                The same exact way you would
                <a href="#eleprof_OL">create an ordered list</a>, but with a
                <code class="HTML"
                  ><span class="element">&lt;ul&gt;</span></code
                >
                parent tag instead. See below:
              </p>
              <code class="block HTML">
                <span class="element">&lt;h6&gt;</span>My Favorite Bad Foods, In
                No Particular Order<span class="element">&lt;/h6&gt;</span
                ><br />
                <span class="element">&lt;ul&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;li&gt;</span
                >&gt;Pizza&lt;<span class="element">&lt;/li&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;li&gt;</span>&gt;Fried
                Chicken&lt;<span class="element">&lt;/li&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;li&gt;</span>&gt;Ice
                Cream&lt;<span class="element">&lt;/li&gt;</span>&gt;<br />
                <span class="element">&lt;/ul&gt;</span>
              </code>
              <samp>
                <h6>My Favorite Bad Foods, In No Particular Order</h6>
                <ul>
                  <li>Pizza</li>
                  <li>Fried Chicken</li>
                  <li>Ice Cream</li>
                </ul>
              </samp>
              <p>
                In the case of
                <code class="HTML"><span class="element">&lt;ul&gt;</span></code
                >, the
                <code class="HTML"><span class="attribute">type</span></code>
                attribute specifies the shape and fill of the bullet symbol.
              </p>
              <ul>
                <li>
                  <span class="value">disc</span>: a filled circle (default).
                </li>
                <li><span class="value">circle</span>: a hollow circle.</li>
                <li><span class="value">square</span>: a filled square</li>
              </ul>
              <p>
                MDN is sternly against the use of this attribute in HTML: "Do
                not use this attribute, as it has been deprecated; use the CSS
                <code class="CSS"
                  ><span class="property">list-style-type</span></code
                >
                property instead." Therefore here is an example of the property
                being applied in CSS.
              </p>
              <code class="block CSS">
                <span class="selector"
                  >ul { <br />
                  &nbsp;&nbsp;<span class="property">list-style-type:</span>
                  <span class="value">circle</span>;<br />
                  }</span
                >
              </code>
              <samp>
                <ul id="ulcircleexample">
                  <li>Vancouver Grizzlies ('90s)</li>
                  <li>Utah Jazz</li>
                  <li>L.A. Clippers</li>
                </ul>
              </samp>
            </div>
          </li>

          <li id="attprof_list-style-position">
            <div class="question">
              <p>
                How do I change a list so that the bullets/numbers do not appear
                outside of the normal text margins?
              </p>
            </div>

            <div class="answer">
              <p>
                Create a CSS rule which sets the
                <code class="CSS property">list-style-position </code>property
                to <code class="CSS value">inside</code>. Note that if any block
                elements are nested in the
                <code class="HTML element">&lt;li&gt;</code>s, they will be
                pushed down below the number, which will fall on its own line.
              </p>
            </div>
          </li>

          <li id="eleprof_DL">
            <div class="question">
              <p>What is a definition list?</p>
            </div>

            <div class="answer">
              <p>
                A defintion list is a type of list which consists of two parts
                for each item - a term and a description. In HTML, the
                definition list element is
                <code class="HTML"><span class="element">&lt;dl&gt;</span></code
                >, and its components are
                <code class="HTML"
                  ><span class="element">&lt;dt&gt;</span></code
                >
                (definition term), and
                <code class="HTML"
                  ><span class="element">&lt;dd&gt;</span></code
                >
                (definition description). Here's an example of a two-item
                defintion list:
              </p>
              <code class="block HTML">
                <span class="element">&lt;dl&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span
                >&gt;Kickflip&lt;<span class="element">&lt;/dt&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span>&gt;A
                sick trick, difficult to master.&lt;<span class="element"
                  >&lt;/dd&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span
                >&gt;Heelflip&lt;<span class="element">&lt;/dt&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span
                >&gt;Equally sick, but not as sexy, for some reason.&lt;<span
                  class="element"
                  >&lt;/dd&gt;</span
                >&gt;<br />
                <span class="element">&lt;/dl&gt;</span>
              </code>
              <samp>
                <dl>
                  <dt>Kickflip</dt>
                  <dd>A sick trick, difficult to master.</dd>
                  <dt>Heelflip</dt>
                  <dd>Equally sick, but not as sexy, for some reason.</dd>
                </dl>
              </samp>
              <p>
                If are viewing in Chrome, note the browser's formatting is
                simply to indent the defintion description. Note also that you
                are not restricited to the A-B-A-B
                <code class="HTML"
                  ><span class="element">&lt;dt-dd-dt-dd&gt;</span></code
                >
                cadence. You could use one defintion for multiple terms:
              </p>
              <code class="block HTML">
                <span class="element">&lt;dl&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span>&gt;BS
                Nosebluntslide&lt;<span class="element">&lt;/dt&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span>&gt;FS
                Crooked&lt;<span class="element">&lt;/dt&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span>&gt;BS
                Smith&lt;<span class="element">&lt;/dt&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span>&gt;These
                are among the sickest ledge tricks; proceed with
                caution.&lt;<span class="element">&lt;/dd&gt;</span>&gt;<br />
                <span class="element">&lt;/dl&gt;</span>
              </code>
              <samp>
                <dl>
                  <dt>BS Nosebluntslide</dt>
                  <dt>FS Crooked</dt>
                  <dt>BS Smith</dt>
                  <dd>
                    These are among the sickest ledge tricks; proceed with
                    caution.
                  </dd>
                </dl>
              </samp>
              <p>Nor are you limited to one definition per term:</p>
              <code class="block HTML">
                <span class="element">&lt;dl&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span>&gt;Sick
                Tricks&lt;<span class="element">&lt;/dt&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span
                >&gt;Bluntslide&lt;<span class="element">&lt;/dd&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span
                >&gt;Lipslide&lt;<span class="element">&lt;/dd&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span
                >&gt;Smith&lt;<span class="element">&lt;/dd&gt;</span>&gt;<br />
                <span class="element">&lt;/dl&gt;</span>
              </code>
              <samp>
                <dl>
                  <dt>Sick Tricks</dt>
                  <dd>Bluntslide</dd>
                  <dd>Lipslide</dd>
                  <dd>Smith</dd>
                </dl>
              </samp>
              <p>
                As a a more real-world example, definition lists are also used
                to represent the dialog of characters in an interview / play:
              </p>
              <code class="block HTML">
                <span class="element">&lt;dl&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span
                >&gt;FRANCISCO&lt;<span class="element">&lt;/dt&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span>&gt;You
                come most carefully upon your hour.&lt;<span class="element"
                  >&lt;/dd&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dt&gt;</span
                >&gt;BERNARDO&lt;<span class="element">&lt;/dt&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;dd&gt;</span>&gt;'Tis
                now struck twelve; get thee to bed, Francisco.&lt;<span
                  class="element"
                  >&lt;/dd&gt;</span
                >&gt;<br />
                <span class="element">&lt;/dl&gt;</span>
              </code>
              <samp>
                <dl>
                  <dt>FRANCISCO</dt>
                  <dd>You come most carefully upon your hour.</dd>
                  <dt>BERNARDO</dt>
                  <dd>'Tis now struck twelve; get thee to bed, Francisco.</dd>
                </dl>
              </samp>
              <p>
                Finally, note that with
                <code class="HTML"><span class="element">&lt;dl&gt;</span></code
                >, as with
                <code class="HTML"
                  ><span class="element">&lt;ul&gt;</span></code
                >
                and
                <code class="HTML"><span class="element">&lt;ol&gt;</span></code
                >, can contain paragraphs, sections, articles, etc. This entire
                page, for instance, is an ordered list.
              </p>
            </div>
          </li>

          <li id="general_defineRootElement">
            <div class="question">
              <p>What is a "root element"?</p>
            </div>

            <div class="answer">
              <p>
                The root element is "the term given to the element which is the
                ancestor of all the other elements in the document." For HTML,
                this would be the
                <code class="HTML"
                  ><span class="element">&lt;html&gt;</span></code
                >
                element, of course, but there are other markup languages to be
                considered.
              </p>
            </div>
          </li>

          <li id="eleprof_TABLEandTRandTD">
            <div class="question">
              <p>How do you build a table in HTML?</p>
            </div>

            <div class="answer">
              <p>
                Tables are introduced with the aptly-named
                <code class="HTML"
                  ><span class="element">&lt;table&gt;</span></code
                >
                element, but there are necessary component parts within this
                element, namely, the table row,
                <code class="HTML"><span class="element">&lt;tr&gt;</span></code
                >, and the table data,
                <code class="HTML"><span class="element">&lt;td&gt;</span></code
                >, which is equivalent to a column-like division with the row.
                See below for an example of an extremely basic table.
              </p>
              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span>&gt;
                &nbsp;&nbsp;&lt;<span class="comment">!-- Begin Row 1.</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 1, Col 1&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 1, Col 2&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span>&gt;
                &nbsp;&nbsp;&lt;<span class="comment">!-- End Row 1.</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 2, Col 1&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 2, Col 2&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <tbody>
                    <tr>
                      <td>Row 1, Col 1</td>
                      <td>Row 1, Col 2</td>
                    </tr>
                    <tr>
                      <td>Row 2, Col 1</td>
                      <td>Row 2, Col 2.</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="general_TableUsage">
            <div class="question">
              <p>Tables should be used for page layout. True or False?</p>
            </div>

            <div class="answer">
              <p>
                False. Tables used to be used for page layout in the mid/late
                90's, before CSS had matured, and was a nightmare to maintain
                (per instructor James Williamson). Now CSS should be used to
                position elements on the page.
              </p>
            </div>
          </li>

          <li id="general_WhatTablesCanHold">
            <div class="question">
              <p>
                Table cells (<code class="HTML"
                  ><span class="element">&lt;td&gt;</span></code
                >) can hold paragraphs, headings,
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                elements, images, videos, and even other tables - true or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_htmlTableExpansion">
            <div class="question">
              <p>
                By default, tables will stretch to fit the content within their
                cells. True or False?
              </p>
            </div>

            <div class="answer">
              <p>
                True - note that this can affect adjacent columns and rows as
                well. In the below example, the obnoxiously long unbroken
                text-string causes the table to squish column A as much as it
                possibly can (until each unbroken character string - i.e. a word
                - is on its own line), which then increases the height of the
                rows.
              </p>
              <samp>
                <table>
                  <tbody>
                    <tr style="background-color: gainsboro">
                      <td>_</td>
                      <td>A</td>
                      <td>B</td>
                    </tr>
                    <tr>
                      <td style="background-color: gainsboro">1</td>
                      <td>Row 1, Col 1</td>
                      <td>Row 1, Col 2</td>
                    </tr>
                    <tr>
                      <td style="background-color: gainsboro">2</td>
                      <td>Row 2, Col 1</td>
                      <td>
                        stretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretchstretch.
                      </td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="elestyl_TABLE">
            <div class="question">
              <p>
                All attributes particular to the
                <code class="HTML"
                  ><span class="element">&lt;table&gt;</span></code
                >
                element have been deprecated, which means that any styling you
                wish do achieve with a table (border thickness, color, etc.)
                should be done with CSS. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="eleprof_CAPTION">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;caption&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                'The HTML
                <code class="HTML"
                  ><span class="element">&lt;caption&gt;</span></code
                >
                Element (or HTML Table Caption Element) represents the title of
                a table. Though it is always the first descendant of a
                <code class="HTML"
                  ><span class="element">&lt;table&gt;</span></code
                >, its styling, using CSS, may place it elsewhere, relative to
                the table."
              </p>

              <p>
                This element is used only with tables and must always follow the
                opening
                <code class="HTML"
                  ><span class="element">&lt;table&gt;</span></code
                >
                tag. It is good for self-documentation and/or assistive devices.
              </p>
              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">caption</span>&gt;A
                Meaningless Table&lt;<span class="hele hghlt">/caption</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 1, Col 1&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 1, Col 2&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 2, Col 1&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Row 2, Col 2&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <caption>
                    A Meaningless Table
                  </caption>
                  <tbody>
                    <tr>
                      <td>Row 1, Col 1</td>
                      <td>Row 1, Col 2</td>
                    </tr>
                    <tr>
                      <td>Row 2, Col 1</td>
                      <td>Row 2, Col 2.</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="eleprof_TH">
            <div class="question">
              <p>How do you denote table header cells in HTML?</p>
            </div>

            <div class="answer">
              <p>
                Table header cells are denoted with the
                <code class="HTML"
                  ><span class="element">&lt;th&gt;</span></code
                >
                element, which "defines a cell as header of a group of table
                cells." Their placement is similar to that of the
                <code class="HTML"
                  ><span class="element">&lt;td&gt;</span></code
                >
                element. By default the text within a
                <code class="HTML"
                  ><span class="element">&lt;th&gt;</span></code
                >
                is bold.
              </p>
              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;caption&gt;</span
                >&gt;A Table With Headers&lt;<span class="hele">/caption</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="hele hghlt">th</span
                >&gt;SKU&lt;<span class="hele hghlt">/th</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="hele hghlt">th</span
                >&gt;Description&lt;<span class="hele hghlt">/th</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;0040131331&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Little Puppy Princess - Limited Edition Crust
                Vinyl&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <caption>
                    A Table With Headers
                  </caption>
                  <tbody>
                    <tr>
                      <th>SKU</th>
                      <th>Description</th>
                    </tr>
                    <tr>
                      <td>0040131331</td>
                      <td>
                        Little Puppy Princess - Limited Edition Crust Vinyl
                      </td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="eleprof_THEAD">
            <div class="question">
              <p>How do you denote a table header region in HTML?</p>
            </div>

            <div class="answer">
              <p>
                "The
                <code class="HTML"
                  ><span class="element">&lt;thead&gt;</span></code
                >
                element groups a set of rows as the head of the columns they
                represent." Note that the result of this example looks exactly
                the same as the previous version, and that
                <a href="#eleprof_TH" title="TH element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;th&gt;</span></code
                  ></a
                >
                cells are still used within them.
              </p>
              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;caption&gt;</span
                >&gt;A Table With A Header Region&lt;<span class="element"
                  >&lt;/caption&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">thead</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th&gt;</span
                >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th&gt;</span
                >&gt;Description&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">/thead</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;0040131331&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Little Puppy Princess - Limited Edition Crust
                Vinyl&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <caption>
                    A Table With A Header Region
                  </caption>
                  <thead>
                    <tr>
                      <th>SKU</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>0040131331</td>
                      <td>
                        Little Puppy Princess - Limited Edition Crust Vinyl
                      </td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="elereln_THandTHEAD">
            <div class="question">
              <p>
                What is the purpose of using the
                <a href="#eleprof_THEAD" title="THEAD element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;thead&gt;</span></code
                  ></a
                >
                element when the
                <a href="#eleprof_TH" title="TH element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;th&gt;</span></code
                  ></a
                >
                element already denotes a cell as a header cell?
              </p>
            </div>

            <div class="answer">
              <p>
                "For longer, or more complex tables, grouping table content into
                distinct regions can be helpful...Using these elements gives
                greater structure to your tables, gives additional styling hooks
                for CSS, and can allow user agents to take advantage of them.
                Printers, for example, could use them to break long tables up
                over multiple pages, while displaying the header and footer
                information on each page. Displays could choose to provide
                separate scrolling for table body regions while fixing header
                content." (JW)
              </p>

              <p class="toDo">
                Note that last sentence - essentially, grouping all header cells
                under the
                <a href="#eleprof_THEAD" title="THEAD element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;thead&gt;</span></code
                  ></a
                >
                banner allows you to then apply a
                <code class="CSS"><span class="property">position</span></code
                >: <span class="value">fixed</span>; CSS rule to it in order to
                freeze it.
              </p>
            </div>
          </li>

          <li id="eleprof_TFOOT">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;tfoot&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                "The HTML Table Foot Element defines a set of rows summarizing
                the columns of the table." Just as
                <a href="#eleprof_THEAD" title="THEAD element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;thead&gt;</span></code
                  ></a
                >
                defines a header region,
                <code class="HTML"
                  ><span class="element">&lt;tfoot&gt;</span></code
                >
                defines a footer region. Note that
                <a href="#eleprof_TH" title="TH element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;td&gt;</span></code
                  ></a
                >
                cells are used within the footer and the browser applies no
                special formatting to them.
              </p>
              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;caption&gt;</span
                >&gt;A Table With A Header Region&lt;<span class="element"
                  >&lt;/caption&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;thead&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th&gt;</span
                >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th&gt;</span
                >&gt;Description&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/thead&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;0040131331&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Little Puppy Princess - Limited Edition Crust
                Vinyl&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">tfoot</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;No More SKUs&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;No More Items&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">/tfoot</span>&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <caption>
                    A Table With Header And Footer Regions
                  </caption>
                  <thead>
                    <tr>
                      <th>SKU</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>0040131331</td>
                      <td>
                        Little Puppy Princess - Limited Edition Crust Vinyl
                      </td>
                    </tr>
                  </tbody>
                  <tfoot>
                    <tr>
                      <td>No More SKUs</td>
                      <td>No More Items</td>
                    </tr>
                  </tfoot>
                </table>
              </samp>
            </div>
          </li>

          <li id="eleprof_TBODY">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;tbody&gt;</span></code
                >
                element?
              </p>
            </div>

            <div class="answer">
              <p>
                Like
                <a href="#eleprof_THEAD" title="THEAD element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;thead&gt;</span></code
                  ></a
                >
                and
                <a href="#eleprof_TFOOT" title="TFOOT element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;tfoot&gt;</span></code
                  ></a
                >,
                <code class="HTML"
                  ><span class="element">&lt;tbody &gt;</span></code
                >is a way to group table content - in this case, the "body" of
                the table, which are the actual data rows. If you are using this
                element, then no
                <code class="HTML"
                  ><span class="element">&lt;tr&gt;</span></code
                >
                elements can be direct children of the parent
                <a href="#eleprof_TABLE" title="Table element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;table&gt;</span></code
                  ></a
                >. In other words, once this element is introduced, no rows
                should be orphans; all should have the "parent" of a header,
                footer, or body.
              </p>

              <p>
                "Note that unlike the
                <a href="#eleprof_THEAD" title="THEAD element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;thead&gt;</span></code
                  ></a
                >,
                <a href="#eleprof_TFOOT" title="TFOOT element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;tfoot&gt;</span></code
                  ></a
                >
                and
                <a href="#eleprof_THEAD" title="CAPTION element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;caption&gt;</span></code
                  ></a
                >
                elements however, multiple
                <code class="HTML"
                  ><span class="element">&lt;tbody&gt;</span></code
                >
                elements are permitted (if consecutive), allowing the data-rows
                in long tables to be divided into different sections, each
                separately formatted as needed." (MDN)
              </p>

              <p>
                It is recommended that you use
                <code class="HTML"
                  ><span class="element">&lt;tbody&gt;</span></code
                >
                with your tables, one reason being that browsers - according to
                JW - will sometimes insert the tag into your code to make its
                own job easier, which may then cause unintended styling
                consequences if had written a CSS rule targeting
                <code class="HTML"
                  ><span class="element">&lt;tbody&gt;</span></code
                >, and you had thought it would only apply to specific tables.
              </p>

              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;caption&gt;</span
                >&gt;A Full House&lt;<span class="element"
                  >&lt;/caption&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;thead&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th&gt;</span
                >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th&gt;</span
                >&gt;Description&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/thead&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">tbody</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;0040131331&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;Little Puppy Princess - Limited Edition Crust
                Vinyl&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="hele hghlt">/tbody</span>&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tfoot&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;No More SKUs&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;No More Items&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tfoot&gt;</span
                >&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <caption>
                    A Full House
                  </caption>
                  <thead>
                    <tr>
                      <th>SKU</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>0040131331</td>
                      <td>
                        Little Puppy Princess - Limited Edition Crust Vinyl
                      </td>
                    </tr>
                  </tbody>
                  <tfoot>
                    <tr>
                      <td>No More SKUs</td>
                      <td>No More Items</td>
                    </tr>
                  </tfoot>
                </table>
              </samp>
            </div>
          </li>

          <li id="eleprof_COLGROUPandCOL">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML"
                  ><span class="element">&lt;colgroup&gt;</span></code
                >
                and
                <code class="HTML"
                  ><span class="element">&lt;col&gt;</span></code
                >
                elements?
              </p>
            </div>

            <div class="answer">
              <p class="note">
                Note: with the standardization of HTML5 and CSS3, this element
                should not be used for "styling hooks". (For column styling, you
                can apply <span class="toDo">nth child</span> selectors.) If you
                use this element at all, it should be for semantic purposes,
                i.e., to make the structure of the table clearer in your code.
              </p>

              <p>
                "The HTML Table Column Group Element (<code class="HTML"
                  ><span class="element">&lt;colgroup&gt;</span></code
                >) defines a group of columns within a table"...and these
                columns can be represented with a
                <code class="HTML"
                  ><span class="element">&lt;col&gt;</span></code
                >
                element, which "defines a column within a table and is used for
                defining common semantics on all common cells."
              </p>

              <p>
                Note that
                <code class="HTML"
                  ><span class="element">&lt;col&gt;</span></code
                >
                is a <a href="#synprof_voidelements">void/empty element</a> and
                should not have a closing tag.
              </p>

              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;colgroup&gt;</span></code
                >
                must be (1) a child of a
                <a href="#eleprof_TABLE" title="Table element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;table&gt;</span></code
                  ></a
                >
                element, (2) after any
                <a href="#eleprof_CAPTION" title="CAPTION element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;caption&gt;</span></code
                  ></a
                >
                elements and (3) before any
                <a href="#eleprof_THEAD" title="THEAD element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;thead&gt;</span></code
                  ></a
                >,
                <a href="#eleprof_TFOOT" title="TBODY element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;tbody&gt;</span></code
                  ></a
                >,
                <a href="#eleprof_TFOOT" title="TFOOT element profile"
                  ><code class="HTML"
                    ><span class="element">&lt;tfoot&gt;</span></code
                  ></a
                >, or
                <code class="HTML"
                  ><span class="element">&lt;tr&gt;</span></code
                >
                elements.
              </p>

              <p>
                There are two ways to use
                <code class="HTML"
                  ><span class="element">&lt;colgroup&gt;</span></code
                >:
              </p>

              <ol>
                <li>
                  <p>
                    With
                    <code class="HTML"
                      ><span class="element">&lt;col&gt;</span></code
                    >
                    children. In the example below, the fact that three
                    <code class="HTML"
                      ><span class="element">&lt;col&gt;</span></code
                    >
                    children exist mean that the table should have three
                    columns.
                  </p>
                  <code class="block HTML">
                    <span class="element">&lt;table&gt;</span><br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;caption&gt;</span
                    >&gt;A Full House&lt;<span class="element"
                      >&lt;/caption&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="hele hghlt">colgroup</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="hele hghlt"
                      >&lt;col</span
                    >
                    <span class="attribute">class</span> =
                    <span class="value">"attribute"</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="hele hghlt"
                      >&lt;col</span
                    >
                    <span class="attribute">class</span> =
                    <span class="value">"attribute"</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="hele hghlt"
                      >&lt;col</span
                    >
                    <span class="attribute">class</span> =
                    <span class="value">"metric"</span>&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="hele hghlt">/colgroup</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;thead&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;th&gt;</span
                    >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;th&gt;</span
                    >&gt;Description&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;th&gt;</span
                    >&gt;Inventory&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/thead&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tbody&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;td&gt;</span
                    >&gt;0040131331&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;td&gt;</span
                    >&gt;Little Puppy Princess - Limited Edition Crust
                    Vinyl&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;td&gt;</span
                    >&gt;132&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tbody&gt;</span
                    >&gt;<br />
                    <span class="element">&lt;/table&gt;</span>
                  </code>
                  <samp>
                    <table>
                      <caption>
                        A Full House
                      </caption>
                      <colgroup>
                        <col class="attribute" />
                        <col class="attribute" />
                        <col class="metric" />
                      </colgroup>
                      <thead>
                        <tr>
                          <th>SKU</th>
                          <th>Description</th>
                          <th>Inventory</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>0040131331</td>
                          <td>
                            Little Puppy Princess - Limited Edition Crust Vinyl
                          </td>
                          <td>132</td>
                        </tr>
                      </tbody>
                    </table>
                  </samp>
                </li>

                <li>
                  <p>
                    With no children, but using the
                    <code class="HTML"
                      ><span class="attribute">span</span></code
                    >
                    attribute. In the example below,
                    <code class="HTML"
                      ><span class="attribute">span</span></code
                    >
                    is given a value of <span class="value">3</span> to
                    communicate the same thing as the previous example - the
                    table has three columns.
                  </p>
                  <code class="block HTML">
                    <span class="element">&lt;table&gt;</span><br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;caption&gt;</span
                    >&gt;A Full House&lt;<span class="element"
                      >&lt;/caption&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="hghlt"
                      ><span class="element"
                        >&lt;colgroup <span class="attribute">span</span> =
                        <span class="value">"3"</span>&gt;</span
                      >&lt;<span class="element">&lt;/colgroup&gt;</span
                      >&gt;<br
                    /></span>
                    &nbsp;&nbsp;&lt;<span class="element">&lt;thead&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;th&gt;</span
                    >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;th&gt;</span
                    >&gt;Description&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;th&gt;</span
                    >&gt;Inventory&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/thead&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tbody&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;td&gt;</span
                    >&gt;0040131331&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;td&gt;</span
                    >&gt;Little Puppy Princess - Limited Edition Crust
                    Vinyl&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span
                      class="element"
                      >&lt;td&gt;</span
                    >&gt;132&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tbody&gt;</span
                    >&gt;<br />
                    <span class="element">&lt;/table&gt;</span>
                  </code>
                  <samp>
                    <table>
                      <caption>
                        A Full House
                      </caption>
                      <colgroup>
                        <col class="attribute" />
                        <col class="attribute" />
                        <col class="metric" />
                      </colgroup>
                      <thead>
                        <tr>
                          <th>SKU</th>
                          <th>Description</th>
                          <th>Inventory</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>0040131331</td>
                          <td>
                            Little Puppy Princess - Limited Edition Crust Vinyl
                          </td>
                          <td>132</td>
                        </tr>
                      </tbody>
                    </table>
                  </samp>
                </li>
              </ol>
            </div>
          </li>

          <li id="attprof_COLSPAN">
            <div class="question">
              <p>How do you create merged cells in an HTML table?</p>
            </div>

            <div class="answer">
              <p>
                Merged cells in HTML are technically just one cell that "spans"
                multiple columns or rows. This capability is activated with the
                use of the
                <code class="HTML"><span class="attribute">colspan</span></code>
                or
                <code class="HTML"><span class="attribute">rowspan</span></code>
                attributes applied to a cell (<code class="HTML"
                  ><span class="element">&lt;td&gt;</span></code
                >
                or
                <code class="HTML"><span class="element">&lt;th&gt;</span></code
                >).
              </p>
              <ol>
                <li>
                  <p>
                    Example of
                    <code class="HTML"
                      ><span class="attribute">colspan</span></code
                    >. In the below example, there are two levels of header
                    defined for this table. When the
                    <code class="HTML"
                      ><span class="attribute">colspan</span></code
                    >
                    is greater than one, the cell will start from the current
                    column and span to the right:
                  </p>
                  <code class="block HTML">
                    <span class="element">&lt;table&gt;</span><br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th <span class="hatn hghlt">colspan</span> =
                      <span class="value">"3"</span>&gt;</span
                    >&gt;Retail&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th <span class="hatn hghlt">colspan</span> =
                      <span class="value">"3"</span>&gt;</span
                    >&gt;Direct&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;On Order U&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;On Order R&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;Cancel Date&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;On Order U&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;On Order R&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;Cancel Date&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    <span class="element">&lt;/table&gt;</span>
                  </code>
                  <samp>
                    <table>
                      <tbody>
                        <tr>
                          <th colspan="3">Retail</th>
                          <th colspan="3">Direct</th>
                        </tr>
                        <tr>
                          <th>On Order U</th>
                          <th>On Order R</th>
                          <th>Cancel Date</th>
                          <th>On Order U</th>
                          <th>On Order R</th>
                          <th>Cancel Date</th>
                        </tr>
                      </tbody>
                    </table>
                  </samp>
                </li>
                <li>
                  <p>
                    Example of
                    <code class="HTML"
                      ><span class="attribute">rowspan</span></code
                    >. In the below example, we have modified the previous table
                    to show data rows, including the possibility of multiple
                    SKUs within one style. When the
                    <code class="HTML"
                      ><span class="attribute">rowspan</span></code
                    >
                    is greater than one, the cell will start from the current
                    row and span downwards.
                  </p>
                  <code class="block HTML">
                    <span class="element">&lt;table&gt;</span><br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th <span class="attribute">colspan</span> =
                      <span class="value">"2"</span>&gt;</span
                    >&gt;&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th <span class="attribute">colspan</span> =
                      <span class="value">"2"</span>&gt;</span
                    >&gt;Retail&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th <span class="attribute">colspan</span> =
                      <span class="value">"2"</span>&gt;</span
                    >&gt;Direct&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;Style&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;On Order U&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;Cancel Date&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;On Order U&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;th&gt;</span
                    >&gt;Cancel Date&lt;<span class="element">&lt;/th&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td <span class="hatn hghlt">rowspan</span> =
                      <span class="value">"3"</span>&gt;</span
                    >&gt;4130-021341-0001331&lt;<span class="element"
                      >&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;38573462&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;132&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;11/13/2020&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;200&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;11/6/2020&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment"
                      >&lt;!--Note no Style data cell here due to rowspan
                      above--&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;38573466&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;100&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;11/6/2020&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment"
                      >&lt;!--Note no Style data cell here due to rowspan
                      above--&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;38573475&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;96&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;11/13/2020&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;144&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                      >&lt;td&gt;</span
                    >&gt;11/6/2020&lt;<span class="element">&lt;/td&gt;</span
                    >&gt;<br />
                    &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                    >&gt;<br />
                    <span class="element">&lt;/table&gt;</span>
                  </code>
                  <samp>
                    <table>
                      <tbody>
                        <tr>
                          <th colspan="2"></th>
                          <th colspan="2">Retail</th>
                          <th colspan="2">Direct</th>
                        </tr>
                        <tr>
                          <th>Style</th>
                          <th>SKU</th>
                          <th>On Order U</th>
                          <th>Cancel Date</th>
                          <th>On Order U</th>
                          <th>Cancel Date</th>
                        </tr>
                        <tr>
                          <td rowspan="3">4130-021341-0001331</td>
                          <td>38573462</td>
                          <td>132</td>
                          <td>11/13/2020</td>
                          <td>200</td>
                          <td>11/6/2020</td>
                        </tr>
                        <tr>
                          <!--Note no need for Style row here due to rowspan above -->
                          <td>38573466</td>
                          <td></td>
                          <td></td>
                          <td>100</td>
                          <td>11/6/2020</td>
                        </tr>
                        <tr>
                          <!--Note no need for Style row here due to rowspan above -->
                          <td>38573475</td>
                          <td>96</td>
                          <td>11/13/2020</td>
                          <td>144</td>
                          <td>11/6/2020</td>
                        </tr>
                      </tbody>
                    </table>
                  </samp>
                </li>
              </ol>
            </div>
          </li>

          <li id="attprof_SCOPE">
            <div class="question">
              <p>Is it possible to give rows headers as well?</p>
            </div>

            <div class="answer">
              <p>
                Yes, you can use a
                <code class="HTML"
                  ><span class="element">&lt;th&gt;</span></code
                >
                cell under the same
                <code class="HTML"
                  ><span class="element">&lt;tr&gt;</span></code
                >
                parent as a
                <code class="HTML"
                  ><span class="element">&lt;td&gt;</span></code
                >
                cell. Still, it is useful for semantic purposes to define the
                scope of the headers with the
                <code class="HTML"><span class="attribute">scope</span></code>
                attribute. Note in the example below how we have made the
                "Style" data row a header, and how we have defined the
                <code class="HTML"><span class="attribute">scope</span></code>
                of the attribute with the values
                <span class="value">col</span> and
                <span class="value">row</span>.
              </p>
              <code class="block HTML">
                <span class="element">&lt;table&gt;</span><br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="attribute">colspan</span> =
                  <span class="value">"2"</span>
                  <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="attribute">colspan</span> =
                  <span class="value">"2"</span>
                  <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;Retail&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="attribute">colspan</span> =
                  <span class="value">"2"</span>
                  <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;Direct&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;Style&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;SKU&lt;<span class="element">&lt;/th&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;On Order U&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;Cancel Date&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;On Order U&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="hatn hghlt">scope</span> =
                  <span class="value">"col"</span>&gt;</span
                >&gt;Cancel Date&lt;<span class="element">&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;th <span class="attribute">rowspan</span> =
                  <span class="value">"3"</span>
                  <span class="hatn hghlt">scope</span> =
                  <span class="value">"row"</span>&gt;</span
                >&gt;4130-021341-0001331&lt;<span class="element"
                  >&lt;/th&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;38573462&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;132&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;11/13/2020&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;200&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;11/6/2020&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment"
                  >&lt;!--Note no Style data cell here due to rowspan
                  above--&gt;</span
                ><br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;38573466&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;100&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;11/6/2020&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;tr&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment"
                  >&lt;!--Note no Style data cell here due to rowspan
                  above--&gt;</span
                ><br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;38573475&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;96&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;11/13/2020&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;144&lt;<span class="element">&lt;/td&gt;</span>&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="element"
                  >&lt;td&gt;</span
                >&gt;11/6/2020&lt;<span class="element">&lt;/td&gt;</span
                >&gt;<br />
                &nbsp;&nbsp;&lt;<span class="element">&lt;/tr&gt;</span
                >&gt;<br />
                <span class="element">&lt;/table&gt;</span>
              </code>
              <samp>
                <table>
                  <tbody>
                    <tr>
                      <th colspan="2" scope="col"></th>
                      <th colspan="2" scope="col">Retail</th>
                      <th colspan="2" scope="col">Direct</th>
                    </tr>
                    <tr>
                      <th scope="col">Style</th>
                      <th scope="col">SKU</th>
                      <th scope="col">On Order U</th>
                      <th scope="col">Cancel Date</th>
                      <th scope="col">On Order U</th>
                      <th scope="col">Cancel Date</th>
                    </tr>
                    <tr>
                      <th rowspan="3" scope="row">4130-021341-0001331</th>
                      <td>38573462</td>
                      <td>132</td>
                      <td>11/13/2020</td>
                      <td>200</td>
                      <td>11/6/2020</td>
                    </tr>
                    <tr>
                      <!--Note no Style data cell here due to rowspan above-->
                      <td>38573466</td>
                      <td></td>
                      <td></td>
                      <td>100</td>
                      <td>11/6/2020</td>
                    </tr>
                    <tr>
                      <!--Note no Style data cell here due to rowspan above-->
                      <td>38573475</td>
                      <td>96</td>
                      <td>11/13/2020</td>
                      <td>144</td>
                      <td>11/6/2020</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="attprof_ARIA-DESCRIBEDBY">
            <div class="question">
              <p>What is a good way to summarize a table for screen readers?</p>
            </div>

            <div class="answer">
              <p>
                You can use the
                <code class="HTML"
                  ><span class="attribute">aria-describedby</span></code
                >
                attribute. This attribute takes a value which references the
                <code class="HTML"><span class="attribute">id</span></code>
                attribute of a text-containing element to use as a label. For
                instance, this table uses
                <code class="HTML"
                  ><span class="attribute">aria-describedby</span></code
                >
                to point to a paragraph for its metadata:
              </p>
              <code class="block HTML">
                <span class="element"
                  >&lt;p <span class="attribute">id</span> =
                  <span class="value">"tblsummary_OnOrder2020"</span>&gt;</span
                >This table gives a description of the units on order for the
                year 2020. <span class="element">&lt;/p&gt;</span><br /><br />
                <span class="element"
                  >&lt;table <span class="attribute">aria-describedby</span> =
                  <span class="value">"tblsummary_OnOrder2020"</span>&gt;</span
                ><br />
                &nbsp;&nbsp;<span class="comment"
                  >&lt;!--Table data here--&gt;</span
                ><br />
                <span class="element">&lt;/table&gt;</span><br />
              </code>
              <p>Then, you could use CSS to hide that paragraph:</p>
              <code class="block CSS">
                <span class="selector">[id^="tblsummary"]</span><br /><span
                  class="comment"
                  >/*Translation: "Apply this rule to all elements with an id
                  attribute starting with (^) the phrase 'tblsummary'".*/</span
                >
                <br />
                { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">display:</span
                ><span class="value">none</span>;<br />
                }
              </code>
            </div>
          </li>
          <li id="eleprof_q">
            <div class="question">
              <p>
                What's up with the
                <code class="HTML"><span class="element">&lt;q&gt;</span></code>
                element? Do we really need to wrap every quote in a
                <code class="HTML"><span class="element">&lt;q&gt;</span></code
                >?
              </p>
            </div>

            <div class="answer">
              <p>
                No - according to W3C, "the use of
                <code class="HTML"><span class="element">&lt;q&gt;</span></code>
                elements to mark up quotations is entirely optional; using
                explicit quotation punctuation without
                <code class="HTML"><span class="element">&lt;q&gt;</span></code>
                elements is just as correct."
              </p>

              <p>
                If you wanted to write a properly semantic and perfectly cited
                article, however, you could use
                <code class="HTML"><span class="element">&lt;q&gt;</span></code>
                in conjunction with its
                <code class="HTML"><span class="attribute">cite</span></code>
                attribute to list the source of the quote. Note that the value
                in
                <code class="HTML"><span class="attribute">cite</span></code> is
                not visible on the page, though you could write some CSS/JS to
                change that.
              </p>

              <samp>
                <p>"This is a sentence with double quotes manually added."</p>
                <p>
                  <q
                    >This is a sentence nested between &lt;q&gt; tags - the
                    double quotes are automatically added by the browser. Note
                    the more elegant curliness of these quotes.</q
                  >
                </p>
              </samp>
            </div>
          </li>

          <li id="eleprof_CODE">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="HTML element">&lt;code&gt;</code> element?
              </p>
            </div>

            <div class="answer">
              <p>
                As a responsible web developer you should aspire to use
                semantically-meaningful markup, therefore the
                <code class="HTML element">&lt;code&gt;</code> element allows
                you to signal that whatever is between the
                <code class="HTML element">&lt;code&gt;</code> tags is computer
                code.
              </p>

              <p>
                User agents by default display
                <code class="HTML element">&lt;code&gt;</code> text in the
                browser's default monospace font. This element is considered
                "phrasing content", i.e. inline content, but you can change its
                default inline behavior by changing its
                <span class="toDo"
                  ><code class="CSS property">display</code> property </span
                >to <code class="CSS value">block</code>.
              </p>
            </div>
          </li>
          <h3 id="cssSection">CSS</h3>
          <li id="general_define_CSS" class="QA CSS XML SVG">
            <div class="question">
              <p>What does CSS stand for?</p>
            </div>
            <div class="answer">
              <p>
                CSS stands for "Cascading Style Sheets." "Although most often
                used to set the visual style of web pages and user interfaces
                written in HTML and XHTML, the language can be applied to any
                XML document, including plain XML, SVG and XUL, and is
                applicable to rendering in speech, or on other media." In other
                words, CSS can control the presentation of
                <a href="#general_define_markuplang"
                  >markup-language documents</a
                >, which include HTML but also others.
              </p>
            </div>
          </li>

          <li id="general_define_CSS_cascading" class="QA CSS">
            <div class="question">
              <p>What does the "Cascading" in "Cascading Style Sheets" mean?</p>
            </div>
            <div class="answer">
              <p>
                "Cascade" is defined as "a small waterfall, typically one of
                several that fall in stages down a steep rocky slope."
              </p>

              <p>
                "The CSS specification describes a priority scheme to determine
                which style rules apply if more than one rule matches against a
                particular element. In this so-called <em>cascade</em>,
                priorities (or weights) are calculated and assigned to rules, so
                that the results are predictable."
              </p>

              <p>
                "At its most basic level [the word "cascade"] indicates that the
                order of CSS rules matter, but it's more complex than that. What
                selectors win out in the cascade depends on three factors (these
                are listed in order of weight — earlier ones will overrule later
                ones):
              </p>
              <ol>
                <li>Importance</li>
                <li>Specificity</li>
                <li>Source order"</li>
              </ol>

              <p>
                I would add another consideration to the very beginning of this
                list - inheritance. It is not considered part of "the cascade",
                but I think it should be included to tie this all together:
              </p>
              <ol start="0">
                <li>
                  <p>
                    The origin of the rule is considered. If a
                    <code class="HTML"
                      ><span class="element">&lt;p&gt;</span></code
                    >
                    element, for instance, is inheriting
                    <code class="CSS"
                      ><span class="property">color</span>:<span class="value"
                        >red</span
                      > </code
                    >from its parent
                    <code class="HTML element">&lt;body&gt;</code> element, yet
                    it also has a
                    <code class="CSS"
                      ><span class="property">color</span>:<span class="value"
                        >blue</span
                      ></code
                    >
                    applied to it directly, then it will be blue.
                  </p>
                  <p>
                    <em
                      >Directly-applied child properites always override
                      properties inherited from the parent.</em
                    >
                    Sure, you inherited blond hair from your parents, but you
                    decided to dye it black.
                    <a href="#synprof_CSSRulePriority_Inheritance"
                      >Click here to learn more about inheritance.</a
                    >
                  </p>
                </li>
                <li>
                  <p>
                    If conflicting rules are both non-inherited, they are then
                    evaluated for their level of importance; the most important
                    rule is chosen.
                    <a href="#synprof_CSSRulePriority_Importance"
                      >Click here to see how importance is determined.</a
                    >
                  </p>
                </li>
                <li>
                  <p>
                    If both/all of the conflicting rules are non-inherited and
                    of the same importance, then specificity decides which rule
                    gets applied.
                    <a href="#synprof_CSSRulePriority_Specificity"
                      >Click here to see how specificity is determined</a
                    >.
                  </p>
                </li>
                <li>
                  <p>
                    If both rules are non-inherited, equally important, and
                    equally specific, then the last rule applied wins.
                    <a href="#synprof_CSSRulePriority_LocationInter"
                      >Click here to see how this works when the rules are
                      applied in multiple files</a
                    >.
                  </p>
                </li>
              </ol>
            </div>
          </li>

          <li id="general_define_CSS_stylesheet">
            <div class="question">
              <p>
                What does the "Style Sheets" in "Cascading Style Sheets" mean?
              </p>
            </div>

            <div class="answer">
              <p>
                The style sheet / stylesheet is a file with the extension .css
                containing formatting rules. The
                <a href="#eleprof_LINK"
                  ><code class="HTML"
                    ><span class="element">&lt;link&gt;</span></code
                  >
                  element</a
                >
                is used to connect the two pages together in order for the rules
                to be applied to a given webpage.
              </p>
            </div>
          </li>

          <li id="general_CSS_browserStyling">
            <div class="question">
              <p>Which of the following is more accurate?</p>
              <ol type="A">
                <li>
                  When we write CSS rules, we are supplying style information to
                  the browser so that it can display more than just plain text.
                </li>
                <li>
                  When we write CSS rules, we are overwriting the browser's own
                  stylesheet so that we see our styles rather than the
                  browser's.
                </li>
              </ol>
            </div>

            <div class="answer">
              <p>
                (B) is more accurate. Every browser (which is technically called
                a "user agent") has its own stylesheet. You'll notice, for
                example, that if you create a hyperlink the text turns to
                underlined blue. This is a result of a rule already present in
                the user agent's stylesheet.
              </p>

              <p>
                A page without user styles is flatly not "plain text" in the
                technical sense -
                <code class="HTML"
                  ><span class="element">&lt;h1&gt;</span></code
                >
                elements, for instance, are still larger than
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                elements, which is ultimately a presentation rule.
              </p>
            </div>
          </li>

          <li id="synprof_CSSruleComponents">
            <div class="question">
              <p>What are the components of a basic CSS rule?</p>
            </div>

            <div class="answer">
              <img
                src="_images/synprof_CSSruleComponents.png"
                alt="An annoated screenshot of a CSS rule"
              />
              <p>
                The above illustration shows the rule currently applied to the
                <code class="HTML"
                  ><span class="element">&lt;html&gt;</span></code
                >
                element for this page. At the minimum, a rule must have:
              </p>
              <ul>
                <li>
                  <strong>A selector.</strong> A selector tells the browser
                  which element to <em>select</em> for styling. In this case, we
                  are telling the browser that this rule applies to the
                  <code class="CSS"><span class="selector">html</span></code>
                  element.
                </li>
                <li>
                  <strong>A property.</strong> Next, we must target a specific
                  <em>property</em> of that selector for styling. Many
                  properties are shared by many elements, such as
                  <code class="CSS"><span class="property">margin</span></code
                  >,
                  <code class="CSS"><span class="property">padding</span></code
                  >, and
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >. In other words, we must tell the browser what specifically
                  about the element we wish to change.
                </li>
                <li>
                  <strong>A value.</strong> Finally, we must give the chosen
                  property a value. Each property has their own range of valid
                  values, and will be discussed further.
                </li>
              </ul>
              <p>
                Taken together, a CSS rule's <code>property</code> and
                <code>value</code> are called a
                <code><strong>declaration</strong></code
                >.
              </p>
              <p>Note also these general syntax rules:</p>
              <ul>
                <li>
                  The declaration block must be contained within angle brackets,
                  though you do not need to enter a line break before or after a
                  bracket as in the example image above.
                </li>
                <li>
                  Each declaration property-value pair must be separated by a
                  colon.
                </li>
                <li>
                  Each declaration property-value pair prior to the final one in
                  a block must end with a semicolon. But it's good practice just
                  to put a semicolon after all of them.
                </li>
                <li>
                  "Each property has a set of valid values, defined by a formal
                  grammar, as well as a semantic meaning, implemented by the
                  browser engine." (MDN)
                </li>
              </ul>
            </div>
          </li>

          <li id="general_CSS_defineInitialValue">
            <div class="question">
              <p>Explain the "initial value" given to each CSS property.</p>
            </div>
            <div class="answer">
              <p>
                The term initial value "has different meaning for inherited and
                non-inherited properties."
              </p>
              <ul>
                <li>
                  <span class="hdr"
                    >Initial Values for Inherited Properties</span
                  >
                  <p>
                    "For inherited properties, the initial value is used, for
                    the root element only, when no value is specified for the
                    element." In other words, because this property inherits,
                    there is no point applying the initial value to anything but
                    the highest-level element in a document - i.e. the root
                    element - which for HTML would be
                    <code class="HTML"
                      ><span class="element">&lt;html&gt;</span></code
                    >.
                  </p>

                  <p>
                    For example, the initial value of the
                    <code class="CSS"
                      ><span class="property">font-size</span></code
                    >
                    property is <span class="value">medium</span>. This is an
                    absolute value that equals the user's default font size.
                    Because it is inherited (i.e. inheritable), it is applied
                    only to the root element, the
                    <code class="HTML"
                      ><span class="element">&lt;html&gt;</span></code
                    >
                    element.
                  </p>
                </li>
                <li>
                  <span class="hdr"
                    >Initial Values for Non-Inherited Properties</span
                  >
                  <p>
                    "For non-inherited properties the initial value is used, for
                    <em>any</em> element, when no value is specified for the
                    element." Because these properties do not inherit, then the
                    initial value of a property means that it is applied to each
                    element on the page.
                  </p>

                  <p>
                    For example, the initial value of the
                    <code class="CSS"
                      ><span class="property">border-top-style</span></code
                    >
                    property is <span class="value">none</span>. This is not
                    inherited by children elements. Therefore, if an element
                    does not have any
                    <code class="CSS"
                      ><span class="property">border-top-style</span></code
                    >
                    declaration explicitly applied to it, then it receives
                    <code class="CSS"
                      ><span class="property">border-top-style</span></code
                    >: <span class="value">none</span>.
                  </p>
                </li>
              </ul>
            </div>
          </li>

          <li id="synprof_TypeSelector">
            <div class="question">
              <p>What is a "type selector"?</p>
            </div>

            <div class="answer">
              <p>
                A type selector is one of the most basic types of selectors - it
                can target one element or multiple elements, but it does not
                contain any specific class, ID, or other identifying
                information. The following are examples of type selectors:
              </p>
              <ul>
                <li id="#synprof_CSS_elementselector">
                  <p>
                    A type selector targeting only the elements of type
                    <code class="HTML"
                      ><span class="element">&lt;p&gt;</span></code
                    >. You can call this an <strong>element selector</strong>:
                  </p>
                  <code class="block CSS">
                    <span class="selector">p</span> { <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-weight</span>:<span
                      class="value"
                      >bold</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-style</span>:<span class="value"
                      >italic</span
                    >; <br />
                    }<br />
                  </code>
                </li>
                <li id="#synprof_CSS_groupingselector">
                  <p>
                    A type selector targeting both the elements of type
                    <code class="HTML"
                      ><span class="element">&lt;p&gt;</span></code
                    >
                    and
                    <code class="HTML"
                      ><span class="element">&lt;h1&gt;</span></code
                    >
                    with the same rules. You can call this a
                    <strong>grouping selector</strong>.
                  </p>
                  <code class="block CSS">
                    <span class="selector">p, h1</span> { <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-weight</span>:<span
                      class="value"
                      >bold</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-style</span>:<span class="value"
                      >italic</span
                    >; <br />
                    }<br />
                  </code>
                </li>
                <li>
                  <p>
                    A type selector targeting elements of type
                    <code class="HTML"
                      ><span class="element">&lt;p&gt;</span></code
                    >
                    only when they are nested within an
                    <code class="HTML"
                      ><span class="element">&lt;div&gt;</span></code
                    >
                    element. You can call this a
                    <strong>descendant selector</strong>.
                  </p>
                  <code class="block CSS">
                    <span class="selector">div p</span> { <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-weight</span>:<span
                      class="value"
                      >bold</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-style</span>:<span class="value"
                      >italic</span
                    >; <br />
                    }<br />
                  </code>
                  <p>
                    Take note that this descendant selector would apply to both
                    of the highlighted elements below, because it targets any
                    descendant (child, grandchild, great grandchild) of the
                    parent element:
                  </p>
                  <code class="block HTML">
                    <span class="element">&lt;div&gt;</span><br />
                    &nbsp;&nbsp;<span class="hele hghlt">&lt;p&gt;</span
                    >child<span class="hele hghlt">&lt;/p&gt;</span><br />
                    &nbsp;&nbsp;<span class="element">&lt;section&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="hele hghlt"
                      >&lt;p&gt;</span
                    >grandchild<span class="hele hghlt">&lt;/p&gt;</span><br />
                    &nbsp;&nbsp;<span class="element">&lt;/section&gt;</span
                    ><br />
                    <span class="element">&lt;/div&gt;</span><br />
                  </code>
                  <p>
                    If you wanted to target only the first child p (and not the
                    grandchild p) in the example above, you would write a
                    <strong>child selector</strong>, which only targets the
                    direct children of an element.
                  </p>
                  <code class="block CSS">
                    <span class="selector">div &gt; p</span> { <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-weight</span>:<span
                      class="value"
                      >bold</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;
                    <span class="property">font-style</span>:<span class="value"
                      >italic</span
                    >; <br />
                    }<br />
                  </code>
                  <code class="block HTML">
                    <span class="element">&lt;div&gt;</span><br />
                    &nbsp;&nbsp;<span class="hele hghlt">&lt;p&gt;</span
                    >child<span class="hele hghlt">&lt;/p&gt;</span><br />
                    &nbsp;&nbsp;<span class="element">&lt;section&gt;</span
                    ><br />
                    &nbsp;&nbsp;&nbsp;&nbsp;<span class="hele">&lt;p&gt;</span
                    >grandchild<span class="element">&lt;/p&gt;</span><br />
                    &nbsp;&nbsp;<span class="element">&lt;/section&gt;</span
                    ><br />
                    <span class="element">&lt;/div&gt;</span><br />
                  </code>
                </li>
              </ul>
            </div>
          </li>

          <li id="synprof_CSSAdjacentSibling">
            <div class="question">
              <p>
                Let's say I would like to target, in CSS, only the an element of
                a specific type that immediately follows another element of a
                specific type - i.e. only p elements which immediately follow an
                image. How would I do that?
              </p>
            </div>

            <div class="answer">
              <p>
                In this case you would use what is called an
                <em>adjacent sibling selector</em>, which "will select only the
                specified element that immediately follows the former specified
                element." Here's how you would perform the above request:
              </p>

              <code class="block CSS">
                <span class="selector">img + p</span> { <br />

                &nbsp;&nbsp;&nbsp;
                <span class="property">font-style</span>:<span class="value"
                  >italic</span
                >; <br />
                }<br />
              </code>

              <p>The targeted element is highlighted:</p>

              <code class="block HTML">
                <span class="element">&lt;img&gt;</span><br />
                <span class="hele hghlt">&lt;p&gt;</span>paragraph1<span
                  class="hele hghlt"
                  >&lt;/p&gt;</span
                ><br />
                <span class="element">&lt;p&gt;</span>paragraph2<span
                  class="element"
                  >&lt;/p&gt;</span
                ><br />
                <span class="element">&lt;p&gt;</span>paragraph3<span
                  class="element"
                  >&lt;/p&gt;</span
                ><br />
              </code>

              <p>
                Remember, the former element must be a complete element, i.e.,
                which means it must be closed as well as opened.
                <code class="CSS"><span class="selector">div + p</span></code>
                would not work if the paragraph was nested inside the div.
              </p>

              <p>
                Also note that if you wanted to write group two sets of adjacent
                selectors, you would do this:
              </p>

              <code class="block CSS">
                <span class="selector">h1 + p, h2 + p</span> { <br />

                &nbsp;&nbsp;&nbsp;
                <span class="property">margin-top</span>:<span class="value"
                  >0.6em</span
                >; <br />
                }<br />
                <span class="comment"
                  >/*In other words, you CANNOT write "h1, h2 + p".*/</span
                >
              </code>
            </div>
          </li>

          <li id="synprof_commenting">
            <div class="question">
              <p>
                How do you write comments in all of the Big Three web languages?
              </p>
            </div>

            <div class="answer">
              <p>
                See the below code example. Note that HTML and CSS only have one
                commenting syntax, which JavaScript has two options, depending
                on whether you want your comment to span multiple lines or not.
              </p>
              <code class="block HTML comment">
                &lt;!-- This is an HTML comment. --&gt;<br />
                &lt;!--<br />This is <br />an HTML comment too.<br />--&gt;
              </code>
              <code class="block CSS comment">
                /* This is a CSS comment. */<br />
                /*<br />This is also <br />a CSS comment.<br />*/
              </code>
              <code class="block JS comment">
                // This is a one-line JavaScript comment.<br /><br />
                /*<br />This is a multi-line JavaScript comment, <br />which
                uses the same commenting syntax as CSS.<br />*/
              </code>
            </div>
          </li>

          <li id="general_commentingLocation">
            <div class="question">
              <p>
                Generally, should you write your comments before or after the
                code on which you are commenting?
              </p>
            </div>

            <div class="answer">
              <p>Before.</p>
            </div>
          </li>

          <li id="synprof_CSSRuleLocation">
            <div class="question">
              <p>Where are CSS rules supposed to be located?</p>
            </div>

            <div class="answer">
              <p>CSS rules can be written in three different places:</p>
              <ol>
                <li>
                  <p>
                    Within the HTML element itself, using the
                    <code class="HTML"
                      ><span class="attribute">style</span></code
                    >
                    attribute. This is called an <em>inline style</em>:
                  </p>
                  <code class="block HTML">
                    <span class="element"
                      >&lt;p <span class="attribute">style</span> =
                      <span class="value"
                        >"font-weight: bold; font-style: italic;"</span
                      >&gt;</span
                    >
                  </code>
                </li>
                <li id="eleprof_STYLE">
                  <p>
                    Within the HTML page, using the
                    <code class="HTML"
                      ><span class="element">&lt;style&gt;</span></code
                    >
                    element. This is almost always found inside of the
                    <code class="HTML"
                      ><span class="element">&lt;head&gt;</span></code
                    >
                    of the page. This is called an <em>embedded style</em>:
                  </p>
                  <code class="block HTML">
                    <span class="element">&lt;style&gt;</span><br />
                    &nbsp;&nbsp;<span class="selector">p</span> { <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <span class="property">font-weight</span>:<span
                      class="value"
                      >bold</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <span class="property">font-style</span>:<span class="value"
                      >italic</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
                    <span class="element">&lt;/style&gt;</span>
                  </code>
                </li>
                <li>
                  <p>
                    In a separate, external stylesheet -
                    <a href="#eleprof_LINK">click here</a> for more on the
                    <code class="HTML"
                      ><span class="element">&lt;link&gt;</span></code
                    >
                    element:
                  </p>
                  <code class="block HTML">
                    <span class="comment"
                      >&lt;!--This links to the external .css file and should be
                      located in the head of the HTML document: --&gt;
                    </span>
                    <br />
                    <br />
                    &lt;<span class="element">&lt;link&gt;</span>
                    <span class="attribute">href</span> =
                    <span class="value">"_css/JGWebReference.css"</span>
                    <span class="attribute">rel</span> =
                    <span class="value">"stylesheet"</span>
                    <span class="attribute">type</span> =
                    <span class="value">"text/css"</span>&gt;
                    <br />
                    <br />
                    <span class="comment"
                      >/*...and here is the rule in that separate .css file: */
                    </span>
                    <br />
                    <br />
                    &nbsp;&nbsp;<span class="selector">p</span> { <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <span class="property">font-weight</span>:<span
                      class="value"
                      >bold</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <span class="property">font-style</span>:<span class="value"
                      >italic</span
                    >; <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
                  </code>
                </li>
              </ol>
              <p>
                Option (3), styles in a separate file, is almost always the
                preferred method. Options (1) and (2) "have mainly the purpose
                of allowing for quick styling, for example for testing
                purposes."
              </p>

              <p>
                The reason for (1) and (2) being frowned upon is fairly obvious
                - if your website has 100 pages, do you really want to make the
                same styling edits 100+ times when you decide to change your
                color scheme? If we were to compare CSS rules to a database
                structure, the separate stylesheet is closer to a "normalized"
                form, which prevents duplication of data by having only one
                primary source of information at one location.
              </p>

              <p>
                There is one good reason to not use a separate stylesheet,
                however - emails. If you are sending an HTML email newsletter
                and want to style it using CSS, you must include the style
                information in the HTML file.
              </p>

              <p>
                The CSS file does not require any sort of header like the HTML
                file. It simply contains rules.
              </p>
            </div>
          </li>

          <li id="synprof_CSSRulePriority_LocationInter">
            <div class="question">
              <p>
                Let's say that a webpage element has three conflicting rules,
                written in
                <a href="#synprof_CSSRuleLocation"
                  >the aforementioned three possible locations</a
                >
                (inline, within style, separate stylesheet). Which one wins?
              </p>
            </div>

            <div class="answer">
              <p>
                The depends completely on when the three methods are called on
                the HTML page. In the event of a conflict in which both rules
                are both non-inherited,
                <a href="#synprof_CSSRulePriority_Importance"
                  >equally important</a
                >, and
                <a href="#synprof_CSSRulePriority_Specificity"
                  >equally specific</a
                >, <em>the last rule applied wins</em>.
              </p>

              <p>
                With this in mind you can see why the inline style would likely
                win, because the usual order of operations is this:
              </p>
              <ol>
                <li>
                  Within
                  <a href="#eleprof_HEAD"
                    >the
                    <code class="HTML"
                      ><span class="element">&lt;head&gt;</span></code
                    >
                    element</a
                  >,
                  <a href="#eleprof_LINK"
                    >use the
                    <code class="HTML"
                      ><span class="element">&lt;link&gt;</span></code
                    >
                    element</a
                  >
                  to establish the link to the external .css file.
                </li>
                <li>
                  Still within the
                  <code class="HTML"
                    ><span class="element">&lt;head&gt;</span></code
                  >
                  element,
                  <a href="#eleprof_STYLE"
                    >use the
                    <code class="HTML"
                      ><span class="element">&lt;style&gt;</span></code
                    >
                    element</a
                  >
                  to establish page-specific styles.
                </li>
                <li>
                  Now within the
                  <code class="HTML"
                    ><span class="element">&lt;body&gt;</span></code
                  >
                  element, apply inline styles to elements as desired.
                </li>
              </ol>
              <p>
                As with any document, an HTML document is "read" by the browser
                from top to bottom. The inline style would be the last rule
                applied, so it would "win" over the others.
              </p>

              <p>
                However, there is no rule which says that the
                <code class="HTML"
                  ><span class="element">&lt;link&gt;</span></code
                >
                element <em>must</em> be invoked in the
                <code class="HTML"
                  ><span class="element">&lt;head&gt;</span></code
                >
                of an HTML file. Technically it can be invoked later on within
                the document and therfore override equally-specific conflicting
                rules on the page. But again, the best practice is that inline
                and page-specific styling should be avoided and that the
                <code class="HTML"
                  ><span class="element">&lt;link&gt;</span></code
                >
                element be used within the
                <code class="HTML"
                  ><span class="element">&lt;head&gt;</span></code
                >
                to connect to a .css file with all the styling rules for the
                page and/or website.
              </p>
            </div>
          </li>

          <li id="synprof_CSSRulePriority_LocationIntra">
            <div class="question">
              <p>
                Let's say that a webpage element has three equally-specific
                conflicting CSS rules within the same external stylesheet. Which
                one wins?
              </p>
            </div>

            <div class="answer">
              <p>
                <a href="#synprof_CSSRulePriority_LocationInter"
                  >As mentioned before</a
                >, "in the event of a conflict in which the rules are both
                non-inherited, equally important, and equally specific, the last
                rule applied wins." Because a stylesheet is read by the browser
                from top to bottom, then the rule furthest down on the "page"
                would win.
              </p>
            </div>
          </li>

          <li id="synprof_CSSRulePriority_Inheritance">
            <div class="question">
              <p>How is the inheritance of a CSS rule determined?</p>
            </div>

            <div class="answer">
              <p>
                First, it's important to note that HTML elements do not have a
                say in whether they inherit CSS rules are not. You can't say
                that
                <code class="HTML"
                  ><span class="element">&lt;h1&gt;</span></code
                >
                elements do not inherit their parents' styling, but
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                elements do.
              </p>

              <p>
                Instead, inheritance is
                <a
                  href="https://www.w3.org/TR/CSS21/propidx.html"
                  title="W3C Full Property Table, CSS2.1 Spec"
                  >defined by the CSS properties themselves</a
                >. By default, properties either inherit or they don't, but this
                behavior can be overridden by the
                <span class="value">initial</span> or
                <span class="value">inherit</span> values, respectively.
                Generally, properties that effect the look of inline elements
                (font-family, color, font-size) are inherited, while properties
                regarding the appearance of block elements (borders, padding,
                margin) are not.
              </p>

              <p>
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance"
                  >Per Mozilla</a
                >, "when no value for an inherited property has been specified
                on an element, the element gets the computed value of that
                property on its parent element. Only the root element of the
                document gets the initial value given in the property's
                summary."
              </p>

              <p>
                In the below example, no value for the
                <code class="CSS"><span class="property">font-size</span></code>
                property, which is an inherited property, has been set on the
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                element. Its parent element, however, (the body element) is set
                to <span class="value">90%</span>. Therefore this
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                element's font-size would be a computed value of 90% of the the
                default font size of the
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                element. Assuming that is 16px, then the font-size for this
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                element would be 14.4px.
              </p>

              <code class="block HTML">
                <span class="element">&lt;body&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;h1&gt;</span>DJ
                Transcript<span class="element">&lt;/h1&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;p&gt;</span>Danny G's
                itching to get into it.<span class="element">&lt;/p&gt;</span
                ><br />
                &nbsp;&nbsp;[...]
              </code>

              <code class="block CSS">
                <span class="comment"
                  >/*Implicit/inherited rules commented out: <br /><br />
                  <h4>1. RULE BASED ON CSS SPECIFICATION</h4>
                  <br />
                  html {<br />
                  &nbsp;&nbsp;font-size:medium;<br />}
                  <p>
                    "Medium" is the
                    <a
                      href="#general_CSS_defineInitialValue"
                      title="Link to the section which defines initial value."
                      >initial value</a
                    >
                    of font-size in the CSS specification. Because it is an
                    inheritable property, this value is only applied to the root
                    element of the document, which is &lt;html&gt;.
                  </p>
                  <p>
                    Contrary to what you may think, "medium" is actually an
                    absolute value which equals whatever the user's font-size is
                    set to.
                    <strong
                      >In this case, &lt;html&gt;'s "medium" font-size value is
                      equal to 16px.</strong
                    >
                  </p>
                  <h4>2. EXPLICIT RULE</h4>
                  <br />*/<br /><br />
                </span>
                <span class="selector">body</span> {<br />
                &nbsp;&nbsp;<span class="property">font-size</span>:<span
                  class="value"
                  >90%</span
                >;<br />
                }<br /><br />
                <span class="comment" id="general_CSSpercentage"
                  >/*<br />When a percentage is used, it signifies the
                  percentage of that property's value
                  <em>for the parent element</em>. The parent, &lt;html&gt;, has
                  a font-size of 16px.
                  <strong
                    >The &lt;body&gt;, therefore, will have a font-size of 16px
                    * 0.9 = 14.4px.</strong
                  >
                  This means that any children of the &lt;body&gt; element
                  without their own rules applied will have a font size of
                  14.4px.<br /><br />
                  <h4>3. USER AGENT (BROWSER) RULE</h4>
                  <br />
                  h1 {<br />
                  &nbsp;&nbsp;font-size:2em;<br />}
                  <p>
                    You may wonder how the headings both retain their larger
                    stature yet react to percentages applied to the body. This
                    is because they are sized using relative units as well.
                    <strong
                      >Due to the above rule applied by the author to the
                      &lt;body&gt;, &lt;h1&gt; will end up with a size of 28.8
                      px.</strong
                    >
                    How?
                  </p>
                  <ol>
                    <li>&lt;html&gt; is medium, which is 16px.</li>
                    <li>
                      &lt;body&gt; is 90% of its parent element (&lt;html&gt;),
                      which computes to 14.4px.
                    </li>
                    <li>
                      &lt;h1&gt; is 2em, or 200% the size of its parent element
                      (&lt;body&gt;), which computes to 14.4px * 2 or 28.8px.
                      This fractional pixel will probably be rounded
                      <em>down</em> by the browser.
                    </li>
                  </ol>
                  <h4>4. UNTOUCHED ELEMENTS</h4>
                  <p>What about the paragraph (&lt;p&gt;)?</p>
                  <p>
                    It has no rule applied. The initial value for font-size only
                    applies to &lt;html&gt;, and let's assume &lt;p&gt; has no
                    font-size rule in the user agent stylesheet either.
                  </p>
                  <p>
                    Therefore, because font-size is inheritable, and no rules
                    have been written specifically for this element,
                    <strong
                      >this &lt;p&gt; element will inherit the computed value of
                      its parent, &lt;body&gt;, which is 14.4px.</strong
                    >
                  </p>
                  <p>
                    Even if the paragraph is deeply nested, it should have a
                    value of 14.4px assuming that none of the more immediate
                    parents have any value assigned. The computed value, which
                    is an absolute value, will be passed down from generation to
                    generation unless one of the children element bucks the
                    trend with their own rules.
                  </p>
                </span>
              </code>
            </div>
          </li>

          <li id="synprof_CSSRulePriority_Importance">
            <div class="question">
              <p>How is the importance of a CSS rule determined?</p>
            </div>

            <div class="answer">
              <p>
                The importance of a CSS rule depends on the presence of the
                following declarations, in this order.
              </p>
              <ol>
                <li>
                  <p>
                    User <span class="value">!important</span> declarations. //
                    How does a user do this? Through their browser settings. As
                    much as you, the author, may like the looks of 9 point font,
                    there are people out there who simply cannot read that.
                    Therefore their preferences translate into an
                    <span class="value">!important</span> declaration that
                    overrrides all other considerations.
                  </p>
                </li>
                <li>
                  <p>
                    Author <span class="value">!important</span> declarations.
                    //
                    <a href="#synprof_CSSimportant"
                      >Click here to see how !important declarations work.</a
                    >
                  </p>
                </li>
                <li>
                  <p>
                    Author's normal declarations. // This is the vast majority
                    of the CSS rules you as an author will write.
                  </p>
                </li>
                <li>
                  <p>
                    User's normal declarations. //
                    <span class="toDo"
                      >I am honestly not sure when these come into play. Perhaps
                      you can upload your own and it would only apply if the
                      author had not applied their own CSS.</span
                    >
                  </p>
                </li>
                <li>
                  <p>
                    User agent's
                    <span class="value">!important</span> declarations.
                  </p>
                </li>
                <li>
                  <p>User agent's normal declarations.</p>
                </li>
              </ol>
            </div>
          </li>

          <li id="synprof_CSSRulePriority_Specificity">
            <div class="question">
              <p>How is the specificity of a CSS rule determined?</p>
            </div>

            <div class="answer">
              <p>
                From W3C: "A selector's specificity is calculated as follows:"
              </p>
              <ul>
                <li>
                  count the number of <a href="#selprof_ID">ID selectors</a> in
                  the selector (= a)
                </li>
                <li>
                  count the number of
                  <a href="#selprof" title="Link to guide to class selectors"
                    >class selectors</a
                  >,
                  <span class="toDo"
                    >attribute selectors, and pseudo-classes</span
                  >
                  in the selector (= b)
                </li>
                <li>
                  count the number of
                  <a href="#synprof_TypeSelector">type selectors</a> and
                  <span class="toDo">pseudo-elements</span> in the selector(= c)
                </li>
                <li>ignore <span class="toDo">the universal selector</span></li>
              </ul>
              <p>
                Concatenating the three numbers a-b-c ... gives the specificity.
                Here are some examples:
              </p>

              <pre
                class="code syntax"
              ><code class="CSS">    *               /* a=0 b=0 c=0 -&gt; specificity =   0 */
    LI              /* a=0 b=0 c=1 -&gt; specificity =   1 */
    UL LI           /* a=0 b=0 c=2 -&gt; specificity =   2 */
    UL OL+LI        /* a=0 b=0 c=3 -&gt; specificity =   3 */
    H1 + *[REL=up]  /* a=0 b=1 c=1 -&gt; specificity =  11 */
    UL OL LI.red    /* a=0 b=1 c=3 -&gt; specificity =  13 */
    LI.red.level    /* a=0 b=2 c=1 -&gt; specificity =  21 */
    #x34y           /* a=1 b=0 c=0 -&gt; specificity = 100 */
    #s12:not(FOO)   /* a=1 b=0 c=1 -&gt; specificity = 101 */</code></pre>
            </div>
          </li>

          <li id="synprof_CSSRulePriority_DirectVsInheritance">
            <div class="question">
              <p>
                In CSS, a directly targeted element will always take precedence
                over rules which an element inherits from its ancestor. True or
                False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="selprof_ID">
            <div class="question">
              <p>
                How do you target an
                <a href="#attprof_ID"
                  >element
                  <code class="HTML"><span class="attribute">id</span></code></a
                >
                in a CSS rule?
              </p>
            </div>

            <div class="answer">
              <p>
                To target an element
                <code class="HTML"><span class="attribute">id</span></code> in
                CSS, you must introduce the id name with a hashtag/pound sign
                (#) followed immediately by the id name. In the below example,
                the CSS rule targets elements with the
                <code class="HTML"><span class="attribute">id</span></code> of
                <span class="value">puppies</span>.
              </p>
              <code class="block CSS">
                <span class="selector">#puppies</span> { <br />
                &nbsp;&nbsp;&nbsp;
                <span class="property">font-style</span>:<span class="value"
                  >italic</span
                >; <br />
                &nbsp;&nbsp;&nbsp; <span class="property">width</span>:<span
                  class="value"
                  >80%</span
                >; <br />
                &nbsp;&nbsp;&nbsp;}
              </code>
            </div>
          </li>

          <li id="selprof_CLASS">
            <div class="question">
              <p>
                How do you target an
                <a href="#attprof_CLASS"
                  >element
                  <code class="HTML"
                    ><span class="attribute">class</span></code
                  ></a
                >
                in a CSS rule?
              </p>
            </div>

            <div class="answer">
              <p>
                Note the example in the link to the profile of the class
                attribute:
              </p>
              <code class="block CSS">
                <span class="selector">.marketing</span> { <br />
                &nbsp;&nbsp;&nbsp;
                <span class="property">font-weight</span>:<span class="value"
                  >bold</span
                >; <br />
                &nbsp;&nbsp;&nbsp; <span class="property">font-size</span>:<span
                  class="value"
                  >1.2em</span
                >; <br />
                &nbsp;&nbsp;&nbsp;}
              </code>
              <p>
                To target a
                <code class="HTML"><span class="attribute">class</span></code>
                in CSS, you must introduce the class name with a period (.)
                followed immediately by the class name.
              </p>
            </div>
          </li>

          <li id="synprof_CSS_type+class">
            <div class="question">
              <p>
                How do you target a specific element with a specific
                <a href="#attprof_CLASS"
                  ><code class="HTML"
                    ><span class="attribute">class</span></code
                  ></a
                >
                in a CSS rule? For instance, how would I target only
                <a href="#eleprof_HEADINGS"
                  ><code class="HTML"
                    ><span class="element">&lt;h1&gt;</span></code
                  >
                  elements</a
                >
                with the class of <span class="value">marketing</span>, rather
                than all elements with the class of
                <span class="value">marketing</span>?
              </p>
            </div>

            <div class="answer">
              <p>
                To target a class only within a specific element, simply combine
                the type selector with the class selector with no white space in
                between.
              </p>
              <code class="block CSS">
                <span class="selector">h1.marketing</span> { <br />
                &nbsp;&nbsp;&nbsp;
                <span class="property">font-weight</span>:<span class="value"
                  >bold</span
                >; <br />
                &nbsp;&nbsp;&nbsp; <span class="property">font-size</span>:<span
                  class="value"
                  >1.2em</span
                >; <br />
                &nbsp;&nbsp;&nbsp;}
              </code>
            </div>
          </li>

          <li id="synprof_CSS_type+ID">
            <div class="question">
              <p>
                How do you target a specific element with a specific
                <a href="#attprof_CLASS"
                  ><code class="HTML"
                    ><span class="attribute">id</span></code
                  ></a
                >
                in a CSS rule? For instance, how would I target only
                <a href="#eleprof_DIV"
                  ><code class="HTML"
                    ><span class="element">&lt;div&gt;</span></code
                  >
                  elements</a
                >
                with the
                <code class="HTML"><span class="attribute">id</span></code> of
                <span class="value">puppies</span>?
              </p>
            </div>

            <div class="answer">
              <p>
                The syntax is the exact same as a
                <a href="synprof_CSS_type+class">combined type/class selector</a
                >: you concatenate the type selector with the id selector with
                no white space in between.
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/* This targets any div element with attribute id = "puppies"
                  */</span
                ><br />
                <span class="selector">div#puppies</span> { <br />
                &nbsp;&nbsp;&nbsp; <span class="property">max-width</span>:<span
                  class="value"
                  >500px</span
                >; <br />
                &nbsp;&nbsp;&nbsp; <span class="property">width</span>:<span
                  class="value"
                  >80%</span
                >; <br />
                &nbsp;&nbsp;&nbsp;}
              </code>
              <p>
                Beware that one space can make a world of difference here - with
                the space between
                <code class="CSS"><span class="selector">div</span></code> and
                <code class="CSS"><span class="selector">#puppies</span></code
                >, the selector is now targeting <em>any element</em> with the
                <code class="HTML"><span class="attribute">id</span></code> of
                <span class="value">puppies</span> provided that it falls within
                a
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                (at any level of nesting).
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/* This targets any element with attribute id = "puppies"
                  within a div. */</span
                ><br />
                <span class="selector">div #puppies</span> { <br />
                &nbsp;&nbsp;&nbsp; <span class="property">max-width</span>:<span
                  class="value"
                  >500px</span
                >; <br />
                &nbsp;&nbsp;&nbsp; <span class="property">width</span>:<span
                  class="value"
                  >80%</span
                >; <br />
                &nbsp;&nbsp;&nbsp;}
              </code>
            </div>
          </li>

          <li id="howprof_CenterPageContent">
            <div class="question">
              <p>
                How do you create a page like this one, with the content
                centered on the page in a container with a different color than
                the background?
              </p>
            </div>

            <div class="answer">
              <p>
                What you see here is a white
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >
                element on top of a black
                <code class="HTML"
                  ><span class="element">&lt;html&gt;</span></code
                >
                element. Here is the CSS code:
              </p>
              <code class="block CSS">
                <span class="selector">html</span><br />
                { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">background:</span
                ><span class="value">black</span>;<br />
                } <br />
                <br />
                <span class="selector">body</span><br />
                { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">background:</span
                ><span class="value">white</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">width:</span
                ><span class="value">80%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">max-width:</span
                ><span class="value">900px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin:</span
                ><span class="value">0 auto</span>;<br />
                } <br />
              </code>
              <p>There are a few key CSS concepts at play here:</p>
              <ol>
                <li>
                  <em
                    ><a href="#general_define_CSS_cascading"
                      >Child rules always overwrite parent rules</a
                    >.</em
                  >
                  The
                  <code class="CSS"
                    ><span class="property">background</span></code
                  >
                  on
                  <code class="CSS"><span class="selector">html</span></code> is
                  set to <span class="value">black</span>, but its child
                  <code class="CSS"><span class="selector">body</span></code> is
                  set to <span class="value">white</span>, so that's why this
                  text is on a white background.
                </li>
                <li>
                  Resizing the window of this page shows that the
                  <span class="value">80%</span>
                  <code class="CSS"><span class="property">width</span></code>
                  of the
                  <code class="CSS"><span class="selector">body</span></code> is
                  relative to to width of the viewport, which is the same is the
                  <code class="CSS"><span class="property">width</span></code>
                  of the
                  <code class="CSS"><span class="selector">html</span></code>
                  element. In other words,
                  <em
                    ><a href="#general_CSSpercentage"
                      >percentages are always relative to the parent element</a
                    ></em
                  >.
                </li>
                <li class="toDo">
                  The margin is written in shorhand notation,
                </li>
              </ol>
            </div>
          </li>

          <li id="general_HowBrowsersReadCSSRules">
            <div class="question">
              <p>How does a browser read a CSS rule?</p>
            </div>

            <div class="answer">
              <p>
                Like humans, browsers start at the top of a stylesheet, and at
                the top of a rule, but unlike English-speaking humans, browsers
                read selectors from right to left. So for instance, consider the
                following code:
              </p>
              <code class="block CSS">
                <span class="selector">div p a</span> { <br />
                &nbsp;&nbsp;&nbsp;
                <span class="property">font-weight</span>:<span class="value"
                  >bold</span
                >; <br />
                &nbsp;&nbsp;&nbsp;
                <span class="property">font-style</span>:<span class="value"
                  >italic</span
                >; <br />
                }<br />
              </code>
              <p>
                If the browser started with
                <code class="CSS"><span class="selector">div</span></code
                >, it would get a lot of dead-end leads. Entire pages are built
                out of
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                elements. But, if it starts with
                <code class="CSS"><span class="selector">a</span></code
                >, then looks backward, this is a more efficient choice.
                <a
                  href="https://developer.mozilla.org/en-US/docs/CSS/Writing_Efficient_CSS?redirect=no"
                  >Per Mozilla</a
                >:
              </p>
              <blockquote>
                <p>
                  The style system matches rules starting with the key selector
                  [i.e. the right-most selector], then moving to the left,
                  looking for any ancestors in the rule’s selector. As long as
                  the selector’s subtree continues to check out, the style
                  system continues moving to the left until it either matches
                  the rule, or abandons it because of a mismatch.
                </p>

                <p>
                  ...The categories exist in order to filter out irrelevant
                  rules (so the style system doesn’t waste time trying to match
                  them)...The fewer rules required to check for a given element,
                  the faster style resolution will be.
                </p>
                <p>
                  This is the key to dramatically increasing performance. The
                  fewer rules required to check for a given element, the faster
                  style resolution will be.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="CSSlist_InheritedProperties">
            <div class="question">
              <p>Which CSS properties are inherited/inheritable?</p>
            </div>

            <div class="answer">
              <p>
                Below is a list of inherited CSS properties, taken from a Stack
                Overflow post:
              </p>
              <ul>
                <li class="CSS property">border-collapse</li>
                <li class="CSS property">border-spacing</li>
                <li class="CSS property">caption-side</li>
                <li class="CSS property">color</li>
                <li class="CSS property">cursor</li>
                <li class="CSS property">direction</li>
                <li class="CSS property">empty-cells</li>
                <li class="CSS property">font-family</li>
                <li class="CSS property">font-size</li>
                <li class="CSS property">font-style</li>
                <li class="CSS property">font-variant</li>
                <li class="CSS property">font-weight</li>
                <li class="CSS property">font-size-adjust</li>
                <li class="CSS property">font-stretch</li>
                <li class="CSS property">font</li>
                <li class="CSS property">letter-spacing</li>
                <li class="CSS property">line-height</li>
                <li class="CSS property">list-style-image</li>
                <li class="CSS property">list-style-position</li>
                <li class="CSS property">list-style-type</li>
                <li class="CSS property">list-style</li>
                <li class="CSS property">orphans</li>
                <li class="CSS property">quotes</li>
                <li class="CSS property">tab-size</li>
                <li class="CSS property">text-align</li>
                <li class="CSS property">text-align-last</li>
                <li class="CSS property">text-decoration-color</li>
                <li class="CSS property">text-indent</li>
                <li class="CSS property">text-justify</li>
                <li class="CSS property">text-shadow</li>
                <li class="CSS property">text-transform</li>
                <li class="CSS property">visibility</li>
                <li class="CSS property">white-space</li>
                <li class="CSS property">widows</li>
                <li class="CSS property">word-break</li>
                <li class="CSS property">word-spacing</li>
                <li class="CSS property">word-wrap</li>
              </ul>
            </div>
          </li>

          <li id="define_WebBrowserEngine">
            <div class="question">
              <p>What is a web browser engine?</p>
            </div>

            <div class="answer">
              <p>
                "A web browser engine (sometimes called layout engine or
                rendering engine) is a program that renders marked up content
                (such as HTML, XML, image files, etc.) and formatting
                information (such as CSS, XSL, etc.)."
              </p>
              <p>
                All the heavy hitters have their own web browser engines. Blink
                and Webkit are similar (Blink is a
                <span class="toDo">fork of Webkit</span>, and Firefox's Gecko is
                the most open-source of them all. See below for a table.
              </p>
              <table>
                <thead>
                  <tr>
                    <th>Application</th>
                    <th>Engine</th>
                    <th>Programming Language</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Apple Safari</td>
                    <th>Webkit</th>
                    <td>C++</td>
                  </tr>
                  <tr>
                    <td>Google Chrome</td>
                    <th>Blink</th>
                    <td>C++</td>
                  </tr>
                  <tr>
                    <td>Mozilla Firefox</td>
                    <th>Gecko</th>
                    <td>C++</td>
                  </tr>
                  <tr>
                    <td>MS Edge</td>
                    <th>EdgeHTML</th>
                    <td>C++</td>
                  </tr>
                  <tr>
                    <td>MS Internet Explorer</td>
                    <th>Trident</th>
                    <td>C++</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="general_CSSHistory">
            <div class="question">
              <p>Please provide a brief and shoddy history of CSS.</p>
            </div>

            <div class="answer">
              <p>
                CSS 1.0 was released in 1996; version 2.0 followed in 1998. At
                that time, browsers were more competitive and had proprietary
                features.
              </p>
              <p>
                CSS 2.1 was released in 2004, later pulled back to working draft
                status and <span class="toDo">then re-released in 2001</span>;
                it was the last monolithic standard before CSS became a
                collection of specifications, which still includes pieces of the
                2.1 spec.
              </p>
              <p>
                With CSS3, the specifications are "modularized" - selectors are
                in their own spec, while backgrounds/borders are in another.
              </p>
            </div>
          </li>

          <li id="general_CSSSpecsLegend">
            <div class="question">
              <p>
                Where can I find the current W3C specifications, and how do I
                read them?
              </p>
            </div>

            <div class="answer">
              <p>
                The W3C's current specs can be found on their
                <a
                  href="https://www.w3.org/Style/CSS/current-work.en.html"
                  title="W3C - CSS current work &amp; how to participate"
                  >Current Work page</a
                >. And here's the Explanation of Colors and Status Codes,
                gathered from the above link as well as the
                <a href="https://www.w3.org/TR/css-2010/"
                  >W3C Working Group Note 12 May 2011</a
                >:
              </p>
              <blockquote>
                <p>
                  W3C indicates the maturity of specifications by a status code.
                  The CSS working group uses the following, from least to most
                  stable:
                </p>
                <table>
                  <thead>
                    <tr>
                      <th>Abbreviation</th>
                      <th>Full Name</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <th class="w3specWD">WD / FPWD</th>
                      <td><b>Working Draft / First Public Working Draft</b></td>
                      <td>
                        <p>
                          Published during the process of drafting the
                          specification, the purpose of a public Working Draft
                          is to create a snapshot of the specification's current
                          state and to solicit input from the W3C and the
                          public. The document is known to be unstable, and is
                          often incomplete.
                        </p>
                        <p>
                          A Working Draft is a document that W3C has published
                          for review by the community, including W3C Members,
                          the public, and other technical organizations. Some,
                          but not all, Working Drafts are meant to advance to
                          Recommendation;
                          <a
                            href="https://www.w3.org/2005/10/Process-20051014/tr#DocumentStatus"
                            title="W3C document status section"
                            >see the document status section</a
                          >
                          of a Working Draft for the group's expectations.
                        </p>
                      </td>
                    </tr>
                    <tr class="w3specLC">
                      <th class="w3specLC">LC</th>
                      <td><b>Last Call</b></td>
                      <td>
                        By publishing a Last Call Working Draft, a working group
                        is expressing that they consider the spec to be complete
                        and all issues to be resolved. Publishing a Last Call
                        Working Draft announces that this specification will
                        move toward Candidate Recommendation unless significant
                        issues are brought up. The Last Call period is a last
                        chance for others to submit issues before the transition
                        to CR.
                      </td>
                    </tr>
                    <tr>
                      <th class="w3specCR">CR</th>
                      <td><b>Candidate Recommendation</b></td>
                      <td>
                        <p>
                          By publishing a Candidate Recommendation, a working
                          group is expressing that have resolved all known
                          issues and they believe the spec is ready for
                          implementation.
                        </p>
                        <p>
                          A Candidate Recommendation is a document that W3C
                          believes has been widely reviewed and satisfies the
                          Working Group's technical requirements. W3C publishes
                          a Candidate Recommendation to gather implementation
                          experience.
                        </p>
                      </td>
                    </tr>
                    <tr>
                      <th class="w3specPR">PR</th>
                      <td><b>Proposed Recommendation</b></td>
                      <td>
                        <p>
                          To exit CR and enter this stage, the spec needs a
                          comprehensive test suite and implementation reports
                          proving that every feature in the spec is
                          interoperably implemented in at least two shipping
                          implementations. Entering the Proposed Recommendation
                          stage signals to the W3C that these requirements have
                          been met. Once the W3C officially approves the
                          specification, it becomes a Recommendation.
                        </p>
                        <p>
                          A Proposed Recommendation is a mature technical report
                          that, after wide review for technical soundness and
                          implementability, W3C has sent to the W3C Advisory
                          Committee for final endorsement.
                        </p>
                      </td>
                    </tr>
                    <tr>
                      <th class="w3specREC">REC</th>
                      <td><b>Recommendation</b></td>
                      <td>
                        A W3C Recommendation is a specification or set of
                        guidelines that, after extensive consensus-building, has
                        received the endorsement of W3C Members and the
                        Director. W3C recommends the wide deployment of its
                        Recommendations. Note: W3C Recommendations are similar
                        to the standards published by other organizations.
                      </td>
                    </tr>
                  </tbody>
                </table>
                <p>
                  A REC is what is normally referred to as a “standard.” W3C
                  encourages everyday use starting from CR.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="general_CSSLocateCurrentSpec">
            <div class="question">
              <p>
                There are a lot of different specs on the W3C's site, and each
                one has a history of different drafts. How can I know that I am
                looking at the correct one?
              </p>
            </div>

            <div class="answer">
              <p>
                Each W3C specification has a header section with a "Latest
                Version" link, see below:
              </p>
              <img
                src="_images/general_CSSLocateCurrentSpec.png"
                alt="Screenshot of W3C specificiation header"
              />
            </div>
          </li>

          <li id="general_W3CNonNormative">
            <div class="question">
              <p>
                I keep seeing the sentence "This section is non-normative." in
                the W3C specs. What does this mean?
              </p>
            </div>

            <div class="answer">
              <p>
                <a
                  href="http://www.sitepoint.com/forums/showthread.php?618221-In-the-W3C-what-is-non-normative"
                  title="Description of non-normative"
                  >From a message board</a
                >: "A normative section is a formal part of the recommendation.
                It contains rules that everyone must follow...A non-normative,
                or informative, section contains additional information, advice
                and suchlike that isn't a formal part of the standard. That
                doesn't mean the information is less important, but it's not
                binding in the same way as the normative sections."
              </p>
            </div>
          </li>

          <li id="synprof_BNF_font-family">
            <div class="question">
              <p>
                Please translate the following Backus-Naur form CSS property
                specification into plain English:
              </p>
              <code class="block CSS">
                <span class="cgen">
                  &nbsp;&nbsp;&nbsp;font-family: [ &lt;family-name&gt; |
                  &lt;generic-family&gt; ] #</span
                >
              </code>
            </div>

            <div class="answer">
              <p>See the below image for a breakdown:</p>
              <img
                src="_images/synprof_CSSspecComponents.png"
                alt="Dissection of BNF specification of CSS font-family rule"
              />
              <p>
                In BNF, items surrounded by angle brackets (&lt;&gt;) are
                placeholders for the values that can be supplied.
              </p>
              <p>
                Translation: "For the
                <code class="CSS"
                  ><span class="property">font-family</span></code
                >
                property, a valid value is either a font name or a generic font
                family. You can specify as many values as you like, as long as
                you separate them with a comma."
              </p>
            </div>
          </li>

          <li id="synprof_BNF_border">
            <div class="question">
              <p>
                Please translate the following Backus-Naur form CSS property
                specification into plain English:
              </p>
              <code class="block CSS">
                <span class="cgen">
                  border: [ &lt;border-width&gt; || &lt;border-style&gt; ||
                  &lt;border-color&gt;] | inherit</span
                >
              </code>
            </div>

            <div class="answer">
              <p>See the below image for a breakdown:</p>
              <img
                src="_images/synprof_CSSspecComponents2.png"
                alt="Dissection of BNF specification of CSS font-family rule"
              />
              <p>
                "Separating two or more components by a double bar, ||, means
                that all entities are options: at least one of them must be
                present, and they may appear in any order. "
              </p>
              <p>Code example:</p>
              <code class="block CSS">
                <span class="selector">table.example1</span>
                {
                <span class="property">border:</span
                ><span class="value">1px solid black</span>;} <br />
                <span class="selector">table.example2</span>
                {
                <span class="property">border:</span
                ><span class="value">inherit</span>;}
              </code>
            </div>
          </li>

          <li id="selprof_font-family">
            <div class="question">
              <p>How do I use CSS to choose a font?</p>
            </div>

            <div class="answer">
              <p>
                Recall that the
                <code class="CSS"
                  ><span class="property">font-family</span></code
                >
                definition is used as an example to illustrate Backus-Naur form
                <a href="#synprof_BNF_font-family">in another question</a>. It
                is reproduced below:
              </p>
              <code class="block CSS">
                &nbsp;&nbsp;&nbsp;font-family: [ &lt;family-name&gt; |
                &lt;generic-family&gt; ] #
              </code>
              <p>Here's an example of how this works:</p>
              <code class="block CSS">
                <span class="selector">body</span>
                { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value"
                  >Helvetica, Arial, "Bank Gothic", sans-serif</span
                >;<br />
                }
              </code>
              <p>
                In essence, we are establishing the font we want (Helvetica),
                with a list of backups in the order of priority. This is
                commonly known as a "font stack". Font stacks are necessary
                because fonts are sourced from the client/user's machine and, if
                you cannot
                <a href="#selprof_@font-face"
                  >supply your own copy of the font</a
                >, you are at the mercy of what the user has. Therefore you need
                to supply a list of backup options.
              </p>

              <p>
                Translation: "give the
                <code class="CSS"><span class="selector">body</span></code>
                element a <span class="value">Helvetica</span> font (one of the
                available values within
                <span class="cgen">&lt;family-name&gt;</span>). If that's not
                available, i.e., option two (#), use
                <span class="value">Arial</span> (<span class="cgen"
                  >&lt;family-name&gt;</span
                >). If that's not available, i.e., option three (#), use
                <span class="value">"Bank Gothic"</span> (<span class="cgen"
                  >&lt;family-name&gt;</span
                >). If that's not available, i.e., option four (#), use the
                browser's <span class="value">sans-serif</span> font (one of the
                available values within
                <span class="cgen">&lt;generic-family&gt;</span>)."
              </p>

              <p>
                Note that <span class="value">"Bank Gothic"</span> is in between
                quotes because there is a space in the font name. Always wrap
                font names in quotes if they contain spaces.
              </p>

              <p>
                Also note that
                <code class="CSS"
                  ><span class="property">font-family</span></code
                >
                is an
                <a href="synprof_CSSRulePriority_Inheritance"
                  >inherited property</a
                >, so that rule applied above will trickle down to all children
                elements unless those children have their own explicit CSS rules
                specified.
              </p>

              <p>
                Here are the available values within
                <span class="cgen">&lt;generic-family&gt;</span>:
              </p>
              <ul>
                <li>
                  <span class="value">serif</span> (<span
                    style="font-family: serif"
                    >Example, Chrome chose Times New Roman</span
                  >)
                </li>
                <li>
                  <span class="value">sans-serif</span> (<span
                    style="font-family: sans-serif"
                    >Example, Chrome chose Arial</span
                  >)
                </li>
                <li>
                  <span class="value">cursive</span> (<span
                    style="font-family: cursive"
                    >Example, Chrome chose Comic Sans MS</span
                  >)
                </li>
                <li>
                  <span class="value">fantasy</span> (<span
                    style="font-family: fantasy"
                    >Example, Chrome chose Impact</span
                  >)
                </li>
                <li>
                  <span class="value">monospace</span> (<span
                    style="font-family: monospace"
                    >Example, Chrome chose Consolas</span
                  >)
                </li>
              </ul>
            </div>
          </li>

          <li id="selprof_@font-face">
            <div class="question">
              <p>
                How do I use CSS to have the page display a font that the user
                does not have on their own computer?
              </p>
            </div>

            <div class="answer">
              <p>
                This is possible using the
                <span class="atrule">@font-face</span> CSS
                <span class="toDo">at-rule</span>. The formal syntax is a bit
                long, and can be found elsewhere, but here's an example of how
                this would work with the Bell MT font.
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*First, we declare the @font-face rules at the top of our
                  stylesheet. That way, the font names you will invent here will
                  be availabe for use by subsequent rules.*/</span
                >
                <br />
                <br />
                <span class="atrule">@font-face</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value">Bellbaby</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">src:</span
                ><span class="value">url("../_assets/BELL.TTF")</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-weight:</span
                ><span class="value">normal</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-style:</span
                ><span class="value">normal</span>;<br />
                } <br /><br />
                <span class="atrule">@font-face</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value">Bellbaby</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">src:</span
                ><span class="value">url("../_assets/BELLI.TTF")</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-weight:</span
                ><span class="value">normal</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-style:</span
                ><span class="value">italic</span>;<br />
                } <br /><br />
                <span class="atrule">@font-face</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value">Bellbaby</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">src:</span
                ><span class="value">url("../_assets/BELLB.TTF")</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-weight:</span
                ><span class="value">bold</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-style:</span
                ><span class="value">normal</span>;<br />
                } <br /><br />
                <span class="comment"
                  >/*So, what have we done here?<br /><br />1.<u>font-family</u>:
                  We create a custom font name to represent the font we're going
                  to import. We name it anything we want. <br /><br />
                  2.<u>src</u>: We then specify where,
                  <strong>in relation to the CSS file</strong>, that this font
                  can be found in our file structure. Becase the _assets folder
                  is on the same level as the _css folder, we first have to go
                  up one level to the parent (../) and then back down into
                  _assets.<br />
                  <br />
                  3.<u>font-weight, font-style</u>: We then specify the
                  conditions under which this custom font is used. This is why
                  there are three rules. They all are bucketed under the same
                  font name, but different files will be used depending on what
                  the font-weight and font-style values are set to. </span
                ><br /><br />
                <span class="selector">.webfontexample</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value">Bellbaby</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-weight:</span
                ><span class="value">normal</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-style:</span
                ><span class="value">normal</span>;<br /><br />
                <span class="selector">.webfontexampleitalic</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value">Bellbaby</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-weight:</span
                ><span class="value">normal</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-style:</span
                ><span class="value">italic</span>;<br />
                } <br /><br />
                <span class="selector">.webfontexamplebold</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-family:</span
                ><span class="value">Bellbaby</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >font-weight:</span
                ><span class="value">bold</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-style:</span
                ><span class="value">normal</span>;<br />
                } <br /><br />
                */
              </code>
              <code class="block HTML">
                <span class="element"
                  >&lt;h1 <span class="attribute">class</span> =
                  <span class="value">"webfontexample"</span>&gt;</span
                >Bell MT<span class="element">&lt;/h1&gt;</span><br />
                <span class="element"
                  >&lt;h1 <span class="attribute">class</span> =
                  <span class="value">"webfontexampleitalic"</span>&gt;</span
                >Bell MT Italic<span class="element">&lt;/h1&gt;</span><br />
                <span class="element"
                  >&lt;h1 <span class="attribute">class</span> =
                  <span class="value">"webfontexamplebold"</span>&gt;</span
                >Bell MT Bold<span class="element">&lt;/h1&gt;</span>
              </code>
              <samp>
                <h1 class="webfontexample">Bell MT</h1>
                <h1 class="webfontexampleitalic">Bell MT Italic</h1>
                <h1 class="webfontexamplebold">Bell MT Bold</h1>
              </samp>
              <p>
                A couple notes on this. First, in the case of setting multiple
                <span class="atrule">@font-face</span> rules for different
                weights and styles of the same font name, James Williamson
                recommends establishing them in this order:
              </p>
              <ol>
                <li>Normal</li>
                <li>Italic</li>
                <li>Bold</li>
                <li>Bold Italic</li>
              </ol>
              <p>
                The only justification he offers is that if you don't do the
                above, in some browsers, "a little bug shows up". This is from
                an older course and perhaps no longer valid, but still worth
                considering.
              </p>
              <p>
                Another thing to consider is that although the example used
                above is with .TTF files, the ideal file format for the web is
                .WOFF (Web Open Font Format). MDN offers a good explanation of
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/Guide/WOFF"
                  title="Mozilla explanation of WOFF"
                  >why you should use WOFF</a
                >
                over other file formats. Here's a cool font converted to WOFF:
              </p>
              <samp>
                <h1 class="webfontexamplePIRATES">pittsburgh pirates</h1>
              </samp>
              <p>
                Yet another thing to consider is that you can specify multiple
                <code class="CSS"><span class="property">src:</span></code
                ><span class="value">url()</span> property-value pairs, in the
                order of preferred use, much like you would with
                <code class="CSS"
                  ><span class="property">font-family</span></code
                >. You can also use the
                <span class="value">local()</span> keyword to first test if the
                font indeed exists on the user's system. Here's a verbatim
                example from MDN:
              </p>

              <blockquote>
                In this example, the user's local copy of "Helvetica Neue Bold"
                is used; if the user does not have that font installed (two
                different names are tried), then the downloadable font named
                "MgOpenModernaBold.ttf" is used instead:<br />
                <br />
                <code class="block CSS">
                  <span class="atrule">@font-face</span> { <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                    >font-family:</span
                  ><span class="value">MyHelvetica</span>;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">src:</span
                  ><span class="value">local("Helvetica Neue Bold"),</span
                  ><br />
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span
                    class="value"
                    >local("HelveticaNeue-Bold"),</span
                  ><br />
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span
                    class="value"
                    >url(MgOpenModernaBold.ttf)</span
                  >;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                    >font-weight:</span
                  ><span class="value">bold</span>;<br />
                  }
                </code>
              </blockquote>
            </div>
          </li>

          <li id="attprof_font-size">
            <div class="question">
              <p>How do I use CSS to specify the size of a font?</p>
            </div>

            <div class="answer">
              <p>
                Font size is dictated using the aptly named
                <code class="CSS"><span class="property">font-size</span></code>
                property. Here is formal syntax, which looks deceptively simple
                at first:
              </p>
              <code class="block CSS">
                <span class="cgen"
                  >font-size: [ &lt;absolute-size&gt; | &lt;relative-size&gt; |
                  &lt;length-percentage&gt; ]
                </span>
              </code>
              <p>...but in actually quite deep, when you dig into it:</p>
              <img
                src="_images/synprof_CSSfont-size.png"
                alt="Infographic breakdown of the font-size property"
              />
              <p>
                Let's look into what is perhaps the most common way to size a
                font, using the relative unit <code class="CSS">em</code>.
              </p>
              <p>
                "Em" is short for "em square" - in the olden days of metal type,
                "an em was originally equal to the size of the metal block used
                to cut a single letter of type for a specific font. It was
                roughly equivalent to the width of a capital letter 'M'." In
                computing, the em square is the invisible square used to control
                a single character. It does not necessarily contain the font, as
                it is possible for a character to poke out of its square.
              </p>
              <img
                src="_images/EMSquare.GIF"
                alt="Infographic breakdown of the em square"
              />
              <p>
                How big is an em? Generally, an em equals the currently
                specified point size.
                <strong
                  >In CSS, an em is a multiplier for the the point/pixel size of
                  the parent element.</strong
                >
                Let's look at an example below.
              </p>
              <code class="block CSS">
                <span class="selector">p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-size:</span
                ><span class="value">0.9em</span>;<br />
                }
              </code>
              <p>
                Translation: the paragraph element's
                <code class="CSS"><span class="property">font-size</span></code>
                will be 90% of the
                <code class="CSS"><span class="property">font-size</span></code>
                of its parent element. What if its parents have no
                <code class="CSS"><span class="property">font-size</span></code>
                declared? Then,
                <a
                  href="#synprof_CSSRulePriority_Inheritance"
                  title="Internal link to explanation of CSS inheritance"
                  >using the rules of inheritance</a
                >,
                <code class="CSS"><span class="property">font-size</span></code>
                would be the root element default (16 px), and the font would
                then be 14.4 px. The following rule would have the same exact
                effect:
              </p>
              <code class="block CSS">
                <span class="selector">p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-size:</span
                ><span class="value">90%</span>;<br />
                }
              </code>
              <p>
                Due to the fact that
                <code class="CSS"><span class="property">font-size</span></code>
                is an inherited property, using ems can have unexpected results
                if you lose track of all the rules applied to all the elements
                between the root element (html) and your target. There is a way
                to purposefully make a
                <code class="CSS"><span class="property">font-size</span></code>
                relative to the root, using the root em (rem).
              </p>
              <code class="block CSS">
                <span class="selector">.stable</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-size:</span
                ><span class="value">0.9rem</span>;<br />
                }
              </code>
              <p>
                In the above example, the
                <code class="CSS"><span class="selector">stable</span></code>
                class will have a font size of 90% of whatever the html
                element's
                <code class="CSS"><span class="property">font-size</span></code>
                is.
              </p>
              <p>
                What about the
                <code class="CSS">&lt;absolute-size&gt;</code> and
                <code class="CSS">&lt;relative-size&gt;</code> options?
              </p>
              <p>
                The <code class="CSS">&lt;absolute-size&gt;</code> portion of
                the BNF equation refers to the seven keywords, six of which all
                depend on medium for their value. Medium is equal to the user's
                default font size. Scaling between the keywords is usually done
                by a scale of 1.2, but as you can see from the example from
                testing on this page, it isn't exact:
              </p>
              <ol>
                <li>
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >:<span class="value">xx-small</span>;
                  <span class="comment">/* 9 px */ </span>
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >:<span class="value">x-small</span>;
                  <span class="comment">/* 10 px */ </span>
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >:<span class="value">small</span>;
                  <span class="comment">/* 13 px */ </span>
                </li>
                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">font-size</span></code
                    >:<span class="value">medium</span>;
                    <span class="comment">/*User default = 16px */ </span></b
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >:<span class="value">large</span>;
                  <span class="comment">/* 18 px */ </span>
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >:<span class="value">x-large</span>;
                  <span class="comment">/* 24 px */ </span>
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">font-size</span></code
                  >:<span class="value">xx-large</span>;
                  <span class="comment">/* 32 px */ </span>
                </li>
              </ol>
              <samp>
                <ul>
                  <li class="test1">xx-small</li>
                  <li class="test2">x-small</li>
                  <li class="test3">small</li>
                  <li class="test4">medium</li>
                  <li class="test5">large</li>
                  <li class="test6">x-large</li>
                  <li class="test7">xx-large</li>
                </ul>
              </samp>
              <p>
                Therefore if you use the
                <code class="CSS">&lt;relative-size&gt;</code> values
                <span class="value">larger</span> or
                <span class="value">smaller</span>, then it shifts the size by
                one unit on the seven unit scale of absolute sizes above. In
                other words:
              </p>
              <code class="block CSS">
                <span class="selector">p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-size:</span
                ><span class="value">x-large</span>;<br />
                } <br /><br />
                <span class="selector">p li</span> {
                <span class="declaration">
                  <span class="property">font-size</span>:<span class="value"
                    >smaller</span
                  >;<br />
                  <span class="comment"
                    >/*^One notch smaller than x-large is large, so this
                    selector's font-size should be roughly equivalent to setting
                    the value "large".</span
                  >
                </span>
                }
              </code>
            </div>
          </li>

          <li id="attprof_font-weight">
            <div class="question">
              <p>How do I use CSS to make a font bold?</p>
            </div>

            <div class="answer">
              <p>
                Whether or not a font is bold is controlled by the
                <code class="CSS"
                  ><span class="property">font-weight</span></code
                >
                property, which is inherited. Below is the formal syntax:
              </p>
              <code class="block CSS">
                <span class="cgen"
                  >font-weight: [normal | bold | bolder | lighter | 100 | 200 |
                  300 | 400 | 500 | 600 | 700 | 800 | 900 ]
                </span>
              </code>
              <p>
                Normal is equal to <span class="value">400</span> and bold is
                equal to <span class="value">700</span>. As with font-size, the
                relative size keywords <span class="value">bolder</span> and
                <span class="value">lighter</span> allow you to set an element's
                <code class="CSS"
                  ><span class="property">font-weight</span></code
                >
                based on that of the parent element, but it does not increment
                by 100, as you may think.
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight"
                  title="MDN page on font-weight"
                  >This table is from MDN</a
                >:
              </p>
              <p>
                "When <span class="value">lighter</span> or
                <span class="value">bolder</span> is given, the following chart
                is used to calculate the absolute weight of the element:"
              </p>
              <table>
                <thead>
                  <tr>
                    <th>Inherited value</th>
                    <th><span class="value">bolder</span></th>
                    <th><span class="value">lighter</span></th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th>100</th>
                    <td>400</td>
                    <td>100</td>
                  </tr>
                  <tr>
                    <th>200</th>
                    <td>400</td>
                    <td>100</td>
                  </tr>
                  <tr>
                    <th>300</th>
                    <td>400</td>
                    <td>100</td>
                  </tr>
                  <tr>
                    <th>400</th>
                    <td>700</td>
                    <td>100</td>
                  </tr>
                  <tr>
                    <th>500</th>
                    <td>700</td>
                    <td>100</td>
                  </tr>
                  <tr>
                    <th>600</th>
                    <td>900</td>
                    <td>400</td>
                  </tr>
                  <tr>
                    <th>700</th>
                    <td>900</td>
                    <td>400</td>
                  </tr>
                  <tr>
                    <th>800</th>
                    <td>900</td>
                    <td>700</td>
                  </tr>
                  <tr>
                    <th>900</th>
                    <td>900</td>
                    <td>700</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="attprof_font-style">
            <div class="question">
              <p>How do I use CSS to make a font italic?</p>
            </div>

            <div class="answer">
              <p>
                Italicizing a font can be done with the
                <code class="CSS"
                  ><span class="property">font-style</span></code
                >
                property, which is inherited. Here is the formal syntax:
              </p>
              <code class="block CSS">
                <span class="cgen"
                  >font-style: [normal | italic | oblique]
                </span>
              </code>
              <p>
                The difference between <span class="value">italic</span> and
                <span class="value">oblique</span>, per MDN: "Italic forms are
                generally cursive in nature, usually using less horizontal space
                than their unstyled counterparts, while oblique faces are
                usually just sloped versions of the regular face."
              </p>
              <p>
                If <span class="value">italic</span> is specified but only
                <span class="value">oblique</span> is available, then
                <span class="value">oblique</span> is used, and vice versa.
                <span class="toDo"
                  >Click here to see what happens if bold or italic versions of
                  a font are not available (font-synthesis attprof).</span
                >
              </p>
            </div>
          </li>

          <li id="attprof_font-variant">
            <div class="question">
              <p>
                How do I use CSS to make give a word/sentence small caps, i.e.
                <span style="font-variant: small-caps">Like This</span>?
              </p>
            </div>

            <div class="answer">
              <p>
                Small capital letters are achieved using the
                <code class="CSS"
                  ><span class="property">font-variant</span></code
                >
                property with a value of <span class="value">small-caps</span>.
                Note that "The
                <code class="CSS"
                  ><span class="property">font-variant</span></code
                >
                property acts as a shorthand for the longhand properties:
                <code class="CSS"
                  ><span class="property">font-variant-caps</span></code
                >,
                <code class="CSS"
                  ><span class="property">font-variant-numeric</span></code
                >,
                <code class="CSS"
                  ><span class="property">font-variant-alternates</span></code
                >,
                <code class="CSS"
                  ><span class="property">font-variant-ligatures</span></code
                >, and
                <code class="CSS"
                  ><span class="property">font-variant-east-asian</span></code
                >."
              </p>
            </div>
          </li>

          <li id="attprof_text-transform">
            <div class="question">
              <p>
                How do I use CSS to make a word all uppercase, similar to
                Microsoft Excel's UPPER() function?
              </p>
            </div>

            <div class="answer">
              <p>
                You can convert a string to all uppercase letters using the
                <code class="CSS"
                  ><span class="property">text-transform</span></code
                >
                property with a value of <span class="value">uppercase</span>.
                As you may have guessed, you can also supply a value of
                <span class="value">lowercase</span>. You can also supply a
                value of <span class="value">capitalize</span> to capitalize the
                first letter of each word in a string.
              </p>
            </div>
          </li>

          <li id="attprof_text-align">
            <div class="question">
              <p>
                How do I use CSS to align text (i.e. left, right, center,
                justify)?
              </p>
            </div>

            <div class="answer">
              <p>
                Text alignment is controlled with the
                <code class="CSS"
                  ><span class="property">text-align</span></code
                >
                property. Remember this is not applied to the inline text
                elements such as <code class="HTML element">&lt;span&gt;</code>,
                but block elements such as
                <code class="HTML element">&lt;p&gt;</code>. Let's take a look
                at the below examples:
              </p>
              <code class="block CSS">
                <span class="selector">div p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">text-align:</span
                ><span class="value">left</span>;<br />
                }
              </code>
              <samp>
                <div
                  style="
                    border: 1px solid black;
                    padding: 2em;
                    text-align: left;
                  "
                >
                  This &lt;p&gt; element is within a &lt;div&gt; with lots of
                  padding. This paragraph is left-aligned, which is the default
                  for an English-language document. I guess I should keep on
                  going just to show you what's up.
                </div>
              </samp>
              <code class="block CSS">
                <span class="selector">div p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">text-align:</span
                ><span class="value">center</span>;<br />
                }
              </code>
              <samp>
                <div
                  style="
                    border: 1px solid black;
                    padding: 2em;
                    text-align: center;
                  "
                >
                  This &lt;p&gt; element is within a &lt;div&gt; with lots of
                  padding. This paragraph is center-aligned, which is cool. I
                  guess I should keep on going just to show you what's up.
                </div>
              </samp>
              <code class="block CSS">
                <span class="selector">div p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">text-align:</span
                ><span class="value">right</span>;<br />
                }
              </code>
              <samp>
                <div
                  style="
                    border: 1px solid black;
                    padding: 2em;
                    text-align: right;
                  "
                >
                  This &lt;p&gt; element is within a &lt;div&gt; with lots of
                  padding. This paragraph is right-aligned, which is edgy. I
                  guess I should keep on going just to show you what's up.
                </div>
              </samp>
              <code class="block CSS">
                <span class="selector">div p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">text-align:</span
                ><span class="value">justify</span>;<br />
                }
              </code>
              <samp>
                <div
                  style="
                    border: 1px solid black;
                    padding: 2em;
                    text-align: justify;
                  "
                >
                  "We must develop and maintain the capacity to forgive. He who
                  is devoid of the power to forgive is devoid of the power to
                  love. There is some good in the worst of us and some evil in
                  the best of us. When we discover this, we are less prone to
                  hate our enemies." Also, "Human progress is neither automatic
                  nor inevitable... Every step toward the goal of justice
                  requires sacrifice, suffering, and struggle; the tireless
                  exertions and passionate concern of dedicated individuals." -
                  MLK Jr. This paragraph is justified.
                </div>
              </samp>
            </div>
          </li>

          <li id="attprof_text-indent">
            <div class="question">
              <p>
                How do I use CSS to automatically indent the first line of every
                paragraph?
              </p>
            </div>

            <div class="answer">
              <p>
                You can automatically indent the first line of every paragraph
                by using the
                <code class="CSS"
                  ><span class="property">text-indent</span></code
                >
                property with a positive numeric value. Example:
              </p>
              <code class="block CSS">
                <span class="selector">p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >text-indent:</span
                ><span class="value">2em</span>;<br />
                }
              </code>
              <samp>
                <p style="text-indent: 2em">
                  HTTP is a protocol which allows the fetching of resources,
                  such as HTML documents. It is the foundation of any data
                  exchange on the Web and a client-server protocol, which means
                  requests are initiated by the recipient, usually the Web
                  browser. A complete document is reconstructed from the
                  different sub-documents fetched, for instance text, layout
                  description, images, videos, scripts, and more.
                </p>
                <p style="text-indent: 2em">
                  Clients and servers communicate by exchanging individual
                  messages (as opposed to a stream of data). The messages sent
                  by the client, usually a Web browser, are called requests and
                  the messages sent by the server as an answer are called
                  responses.
                </p>
              </samp>
              <p>
                You can also use this feature with a negative value (<span
                  class="value"
                  >-0.5em</span
                >
                seems to do the trick) to create hanging punctuation. (Just a
                reminder, "hanging punctuation refers to the practice of
                extending certain punctuation marks into the margin of a flush
                edge of text, to give the appearance of a more uniform vertical
                alignment.") Note that this disregards the parent element's
                padding.
              </p>
              <code class="block CSS">
                <span class="selector">p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >text-indent:</span
                ><span class="value">-0.5em</span>;<br />
                }
              </code>
              <samp>
                <p style="text-indent: -0.5em">
                  "HTTP is a protocol which allows the fetching of resources,
                  such as HTML documents. It is the foundation of any data
                  exchange on the Web and a client-server protocol, which means
                  requests are initiated by the recipient, usually the Web
                  browser. A complete document is reconstructed from the
                  different sub-documents fetched, for instance text, layout
                  description, images, videos, scripts, and more."
                </p>
                <p style="text-indent: -0.5em">
                  "Clients and servers communicate by exchanging individual
                  messages (as opposed to a stream of data). The messages sent
                  by the client, usually a Web browser, are called requests and
                  the messages sent by the server as an answer are called
                  responses."
                </p>
              </samp>
            </div>
          </li>

          <li id="attprof_letter-spacing">
            <div class="question">
              <p>
                How do I use CSS to control tracking, the space between the
                letters in a string?
              </p>
            </div>

            <div class="answer">
              <p>
                Controlling font tracking is done through the
                <code class="CSS"
                  ><span class="property">letter-spacing</span></code
                >
                property. See below for examples:
              </p>
              <code class="block CSS">
                <span class="selector">h2</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >letter-spacing:</span
                ><span class="value">2em</span>;<br />
                }
              </code>
              <samp>
                <h2 style="letter-spacing: 2em">OMG</h2>
              </samp>
              <code class="block CSS">
                <span class="selector">h2</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >letter-spacing:</span
                ><span class="value">-0.2em</span>;<br />
                }
              </code>
              <samp>
                <h2 style="letter-spacing: -0.2em">OMG</h2>
              </samp>
            </div>
          </li>

          <li id="attprof_word-spacing">
            <div class="question">
              <p>
                How do I use CSS to control the amount of space between words?
              </p>
            </div>

            <div class="answer">
              <p>
                Controlling the amount of space between words is done using the
                <code class="CSS"
                  ><span class="property">word-spacing</span></code
                >
                property. See below for an example:
              </p>
              <code class="block CSS">
                <span class="selector">p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >word-spacing:</span
                ><span class="value">1.2em</span>;<br />
                }
              </code>
              <samp>
                <p style="word-spacing: 1.2em">
                  I'm gonna try to be artistic and cool and mysterious....
                </p>
              </samp>
            </div>
          </li>

          <li id="attprof_line-height">
            <div class="question">
              <p>
                How do I use CSS to control leading, i.e. the distance between
                the baselines of successive lines of type, i.e., line height?
              </p>
            </div>

            <div class="answer">
              <p>
                Leading, i.e. the distance between the baselines of successive
                lines of type, is controlled using the
                <code class="CSS"
                  ><span class="property">line-height</span></code
                >
                property. Here's the formal syntax:
              </p>
              <code class="block CSS">
                <span class="cgen"
                  >line-height: [normal | &lt;number&gt; | &lt;length&gt; |
                  &lt;percentage&gt; ]
                </span>
              </code>
              <p>
                We've seen &lt;length&gt; and &lt;percentage&gt; before, but
                what is &lt;number&gt;? According to MDN, "the used value is [a]
                unitless number multiplied by the element's font size."
              </p>
              <p>
                According to James Williamson, this is the only CSS property
                that allows you to use a multiplier as a value.
              </p>
              <p>
                There is a huge difference between using a unitless number
                multiplier and using an em for the
                <code class="CSS"
                  ><span class="property">line-height</span></code
                >
                property. Let's look at the two options side by side. Note that
                top and bottom padding has been set to zero in the sample boxes,
                and all headings stripped of their margins, so to better see the
                effect of line-height differences.
              </p>
              <table class="sidebyside">
                <thead>
                  <tr>
                    <th>EM - fixed computation passed to children</th>
                    <th>MULTIPLIER - dynamic, applied at child level</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      <code class="block CSS">
                        <span class="selector">samp</span> { <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                          >font-size:</span
                        ><span class="value">14px</span>;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                          >line-height:</span
                        ><span class="value">1.6em</span>;<br />
                        }
                      </code>

                      <p>
                        14px * 1.6 = 22.4px. All elements will inherit a
                        <code class="CSS"
                          ><span class="property">line-height</span></code
                        >
                        of 22.4px.
                      </p>
                      <samp class="lineheightexEM">
                        <h2>Heading 2 (LH 22.4 px)</h2>
                        <h3>Heading 3 (LH 22.4 px)</h3>
                        <h4>Heading 4 (LH 22.4 px)</h4>
                      </samp>
                    </td>
                    <td>
                      <code class="block CSS">
                        <span class="selector">samp</span> { <br />
                        &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                          >font-size:</span
                        ><span class="value">14px</span>;<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                          >line-height:</span
                        ><span class="value">1.6</span>;<br />
                        }
                      </code>
                      <p>
                        All elements will have a
                        <code class="CSS"
                          ><span class="property">line-height</span></code
                        >
                        equal to 1.6 times their font size.
                      </p>
                      <samp class="lineheightexMULTIPLIER">
                        <h2>Heading 2 (LH 33.6 px)</h2>
                        <h3>Heading 3 (LH 26.2 px)</h3>
                        <h4>Heading 4 (LH 22.4 px)</h4>
                      </samp>
                    </td>
                  </tr>
                </tbody>
              </table>
              <p>
                In the event of a conflict where successive lines have different
                <code class="CSS"
                  ><span class="property">line-height</span></code
                >
                values, the larger value is used.
              </p>
            </div>
          </li>

          <li id="synprof_BoxModel">
            <div class="question">
              <p>What is the meaning of "box model" in relation to HTML/CSS?</p>
            </div>

            <div class="answer">
              <p>
                Understanding the box model is crucial to understanding how to
                lay out a web page. In short, the box model is a description of
                how a web page is actually formed - every element, from the
                smallest
                <code class="HTML"
                  ><span class="element">&lt;span&gt;</span></code
                >
                to the largest
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >, is in a rectangular box. And each of those rectangular boxes
                have:
              </p>
              <ul>
                <li>content</li>
                <li>padding</li>
                <li>border</li>
                <li>margin</li>
              </ul>
              <p>
                The above attributes - each of which will be discussed in detail
                - radiate outward from the content in that order. They always
                exist on an element, even if they are set to 0. See below for
                Mozilla's illustration of the box model:
              </p>
              <img
                src="_images/synprof_BoxModel_MDN.png"
                alt="Mozilla illustration of box model"
                style="width: 75%"
              />
              <p>
                As you will note, the width and height properties apply only to
                the content of an element, and do not affect padding, border, or
                margin.
                <span class="toDo"
                  >Box-sizing property can be used with border-box in order to
                  take border and padding into account.</span
                >
              </p>
              <p>
                Luckily, browsers like Chrome have excellent visualization tools
                to allow you to see the box model at work. If you right click on
                any web page in Chrome and click Inspect (Ctrl+Shift+I), you can
                see the source code and the box model for each element. Below is
                an image of how this page appeared on December 28, 2016. The
                focus of the box model here is the
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >
                element. Note how the colors in the legend on the bottom right
                hand side of the screen have been applied as overlays to the
                actual element:
              </p>
              <img
                src="_images/synprof_BoxModel_ChromePage.png"
                alt="Example of box model - body element of this page"
              />
              <img
                src="_images/synprof_BoxModel_ChromeLegend.png"
                alt="Example of Chrome box model legend"
              />
              <p>
                Let's take a look at the above example. Here are the current CSS
                rules governing the
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >
                element on this page:
              </p>
              <code class="block CSS">
                <span class="selector">body</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">width:</span
                ><span class="value">80%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">max-width:</span
                ><span class="value">900px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding:</span
                ><span class="value">1% 2.5% 50%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin:</span
                ><span class="value">0 auto</span>;<br />
                }
              </code>
              <p>
                The above makes use of shorthand notation, which we will discuss
                later. In the meantime, let's address each of the box properties
                in turn:
              </p>
              <ul>
                <li>
                  content
                  <ul>
                    <li>height dynamic, width = 900px</li>
                  </ul>
                </li>
                <li>
                  padding
                  <ul>
                    <li>1% top, 2.5% left/right, 50% bottom</li>
                    <li>
                      Percentages are relative to the <em>width</em> of the
                      containing block, even for vertical dimension percentages.
                      "The containing block" is the most immediate block-level
                      parent element. In this case, that element is
                      <code class="HTML"
                        ><span class="element">&lt;html&gt;</span></code
                      >, and therefore the width is the width of the viewport.
                    </li>
                    <li>
                      CONTAINING BLOCK:
                      <code class="HTML"
                        ><span class="element">&lt;html&gt;</span></code
                      >
                      = 1416px.
                    </li>
                    <li>TOP: 1416px * .01 = 14.16px</li>
                    <li>LEFT/RIGHT: 1416px * .025 (L/R) = 35.40px</li>
                    <li>BOTTOM: 1416px * .50 (bottom) = 708.00px</li>
                  </ul>
                </li>
                <li>
                  border
                  <ul>
                    <li>None.</li>
                  </ul>
                </li>
                <li>
                  margin
                  <ul>
                    <li>
                      <span class="value">0 auto</span> means horizontally
                      centered within its containing block, with leftover space
                      evenly distributed between both sides as margin.
                    </li>
                    <li>900px (content) + (35.4px * 2) (padding) = 970.8px</li>
                    <li>
                      1416px - 970.8px = 445.2 (total leftover horizontal
                      margin)
                    </li>
                    <li>445.2 divided by 2 is 222.6 (margin for each side)</li>
                  </ul>
                </li>
              </ul>
              <p>
                The W3C has a
                <a
                  href="https://drafts.csswg.org/css-box-3/"
                  title="CSS basic box model Editor's Draft"
                  >robust editor's draft of the CSS box model</a
                >. In there is a good illustration of how this works:
              </p>
              <img
                src="_images/synprof_BoxModel_CSSWG.png"
                alt="CSSWG illustration of box model"
              />
            </div>
          </li>

          <li id="attprof_width">
            <div class="question">
              <p>
                Explain the
                <code class="CSS"><span class="property">width</span></code>
                property.
              </p>
            </div>

            <div class="answer">
              <p>
                MDN says it best: "The
                <code class="CSS"><span class="property">width</span></code> CSS
                property specifies the width of the content area of an element.
                The content area is <em>inside</em> the padding, border, and
                margin of the element...The
                <code class="CSS"><span class="property">min-width</span></code>
                and
                <code class="CSS"><span class="property">max-width</span></code>
                properties override
                <code class="CSS"><span class="property">width</span></code
                >."
              </p>

              <p>
                Therefore the
                <code class="CSS"><span class="property">width</span></code>
                property can be thought of as "content width". The true element
                width on the page, which includes padding and borders, can be
                considered the "total element width".
              </p>

              <p>
                This should go without saying, but the
                <code class="CSS"><span class="property">width</span></code>
                property is not inherited.
              </p>

              <p>
                The
                <code class="CSS"><span class="property">width</span></code>
                property applies to "all elements but non-replaced inline
                elements, table rows, and row groups."
              </p>
            </div>
          </li>

          <li id="general_100%WidthOverflowing">
            <div class="question">
              <p>
                A 100% width property, when combined with padding and borders,
                can create elements that are larger than their parent. True or
                false?
              </p>
            </div>

            <div class="answer">
              <p>
                True, because again,
                <a href="#attprof_width"
                  >the
                  <code class="CSS"><span class="property">width</span></code>
                  property</a
                >
                refers to only the <em>content</em> of the "box". In the example
                below, the parent
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                (red) has 10px padding, and contains a child
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                (blue) with a width of 100% plus 10px padding.
              </p>
              <div style="background: red; padding: 10px">
                <div
                  style="
                    background: blue;
                    color: white;
                    width: 100%;
                    padding: 10px;
                  "
                ></div>
              </div>
            </div>
          </li>

          <li id="synprof_BlockVSInline">
            <div class="question">
              <p>
                I have heard of "block elements" as opposed to "inline
                elements". What's the difference?
              </p>
            </div>

            <div class="answer">
              <p>
                "The distinction of block-level vs. inline elements is used in
                HTML specifications up to 4.01. In HTML5, this binary
                distinction is replaced with a more complex set of content
                categories. The 'block-level' category roughly corresponds to
                the category of flow content in HTML5, while 'inline'
                corresponds to phrasing content, but there are additional
                categories."
              </p>
              <p>
                Despite the official phase-out of these terms, they are still
                incredibly useful ways to understand the box model. Without any
                margins, block-level elements like
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                and
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                will automatically fill their container - like a box very snugly
                fit within another box. Here's an example below:
              </p>
              <samp>
                <div>
                  <div>
                    <div style="border: 1px solid black">
                      In how many boxes am I?
                    </div>
                  </div>
                </div>
              </samp>
              <p>
                The sentence above is actually in three "boxes" (i.e.
                block-level elements), but because none have any margins or
                padding, then the innermost one is able to expand to the exact
                width of the outermost one:
              </p>
              <code class="block HTML">
                <span class="element">&lt;div&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;div&gt;</span><br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="element"
                  >&lt;div <span class="attribute">style</span> =
                  <span class="value">"border: 1px solid black;"</span
                  >&gt;</span
                ><br />
                &nbsp;&nbsp;&nbsp;&nbsp;In how many boxes am I?<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="element">&lt;/div&gt;</span
                ><br />
                &nbsp;&nbsp;<span class="element">&lt;/div&gt;</span><br />
                <span class="element">&lt;/div&gt;</span><br />
              </code>
              <p>
                This displays the default behavior of block-level elements -
                unless you explicitly assign them
                <code class="CSS"><span class="property">width</span></code
                >, <code class="CSS"><span class="property">padding</span></code
                >, and/or
                <code class="CSS"><span class="property">margin</span></code
                >, they will expand to fill their "containing block", which is
                their parent element.
              </p>
              <p>
                Also importantly, when one block element ends and another
                begins, there is a line break, which is why paragraphs look like
                blocks stacked on top of each other.
              </p>
              <p>
                Inline elements, on the other hand, only take up the space they
                need, usually denoted by the length of the character string.
                They are "inline" because when they begin or end, they do not
                require or cause a line break.
              </p>
              <p>
                <span class="hghlt"
                  >This sentence, for instance, is within a
                  <code class="HTML"
                    ><span class="element">&lt;span&gt;</span></code
                  >
                  tag with the class of "hghlt" for highlighted text, and the
                  word "span" is itself within a nested
                  <code class="HTML"
                    ><span class="element">&lt;span&gt;</span></code
                  >
                  tag "element" which stands for "HTML element", which is
                  colored blue and has a Courier font.</span
                >
              </p>
              <code class="block HTML">
                <span class="element"
                  >&lt;span <span class="attribute">class</span> =
                  <span class="value">"hghlt"</span>&gt;</span
                >
                This sentence, for instance, is within a
                <span class="element"
                  >&lt;span <span class="attribute">class</span> =
                  <span class="value">"element"</span>&gt;</span
                >span<span class="element">&lt;/span&gt;</span> tag with the
                class of "hghlt" for highlighted text, and the word "span" is
                itself within a nested
                <span class="element"
                  >&lt;span <span class="attribute">class</span> =
                  <span class="value">"element"</span>&gt;</span
                >span<span class="element">&lt;/span&gt;</span> tag "element"
                which stands for "HTML element", which is colored blue and has a
                Courier font.<span class="element">&lt;/span&gt;</span>
              </code>
              <p>
                This demonstrates that inline elements can contain other inline
                elements - but they cannot contain block elements. Block
                elements, on the other hand, can contain other blocks or inline
                elements.
              </p>
            </div>
          </li>

          <li id="attprof_overflow">
            <div class="question">
              <p>
                Since element
                <code class="CSS"><span class="property">width</span></code> is
                not inherited and can be set by the page author, what happens if
                a child element's
                <code class="CSS"><span class="property">width</span></code>
                exceeds that of its parent?
              </p>
            </div>

            <div class="answer">
              <p>
                Content overflow is governed by the aptly-named
                <code class="CSS"><span class="property">overflow</span></code>
                property. The initial value of
                <code class="CSS"><span class="property">overflow</span></code>
                is <span class="value">visible</span>. That means that by
                default, overflowing content will be visible (i.e., it actually
                overflows) and is not clipped within the bounds of its
                containing box. This is only relevant when the containing
                element has a fixed width set.
              </p>
              <p>
                On this particular webpage, boxes are ultimately constrained by
                the
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >'s
                <code class="CSS"><span class="property">max-width</span></code>
                of <span class="value">900px</span>. In the below example, the
                image of the landscape, which is 2100 pixels wide, is clipped
                within the
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >.
              </p>
              <code class="block CSS">
                <span class="selector">div.landscape</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">overflow:</span
                ><span class="value">hidden</span>;<br />
                }
              </code>
              <code class="block HTML">
                <span class="element"
                  >&lt;div <span class="attribute">class</span> =
                  <span class="value">"landscape"</span>&gt;</span
                ><br />
                &nbsp;&nbsp;<span class="element"
                  >&lt;img <span class="attribute">src</span> =
                  <span class="value">"_images/SicilianLandscape.jpg"</span
                  >&gt;</span
                ><br />
                <span class="element">&lt;/div&gt;</span>
              </code>
              <div style="overflow: hidden">
                <img
                  src="_images/attprof_overflow_landscape.jpg"
                  style="max-width: none"
                />
              </div>
              <p>
                Note that the vertical aspect of the image is not clipped
                because there are no CSS rules applied to this page that
                restrict height. The full image is below, shrunk to fit within
                the page.
              </p>
              <img src="_images/attprof_overflow_landscape.jpg" />
              <p>Below are other possible values for this property:</p>
              <code class="block CSS">
                <span class="selector">div.landscape</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">overflow:</span
                ><span class="value">scroll</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment"
                  >/*This clips the content, but adds scrollbars to the
                  containing box so that the entirety of the clipped content can
                  be viewed.*/</span
                ><br /><br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">overflow:</span
                ><span class="value">auto</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="comment"
                  >/*This lets the browser decide how to handle overflowing
                  content. By default, Chrome adds scrollbars when
                  necessary.*/</span
                ><br />
                }
              </code>
            </div>
          </li>

          <li id="synprof_shorthand">
            <div class="question">
              <p>
                What are "shorthand" CSS properties and how do they relate to
                the box model?
              </p>
            </div>

            <div class="answer">
              <p>
                Mozilla does such a good job of explaining this that the below
                is mostly just
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties"
                  alt="MDN explanation of shorthand CSS"
                  >copied from their page</a
                >.
              </p>
              <p>
                "Shorthand properties are CSS properties that let you set the
                values of several other CSS properties simultaneously."
              </p>
              <p>
                In the Mozilla example below, the CSS property
                <code class="CSS"
                  ><span class="property">border-width</span></code
                >
                is used. This is a shorthand property because it in fact refers
                to four elemental properties:
              </p>
              <ul>
                <li>
                  <code class="CSS"
                    ><span class="property">border-top-width</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-right-width</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-bottom-width</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-left-width</span></code
                  >
                </li>
              </ul>
              <p>
                "Shorthand's handling properties related to edges of a box, like
                border-style, margin or padding, always use a consistent
                1-to-4-value syntax representing those edges:"
              </p>
              <p>Note the clockwise nature of this system.</p>
              <table>
                <tbody>
                  <tr>
                    <td style="width: 79px">
                      <img src="_images/synprof_shorthand_edge1.png" />
                    </td>
                    <td>
                      <em>The 1-value syntax</em>:
                      <code class="CSS"
                        ><span class="property">border-width</span></code
                      >: <span class="value">1em</span> — The unique value
                      represents all edges
                    </td>
                  </tr>
                  <tr>
                    <td><img src="_images/synprof_shorthand_edge2.png" /></td>
                    <td>
                      <em>The 2-value syntax</em>:
                      <code class="CSS"
                        ><span class="property">border-width</span></code
                      >: <span class="value">1em 2em</span> — The first value
                      represents the vertical, that is top and bottom, edges,
                      the second the horizontal ones, that is the left and right
                      ones.
                    </td>
                  </tr>
                  <tr>
                    <td><img src="_images/synprof_shorthand_edge3.png" /></td>
                    <td>
                      <em>The 3-value syntax</em>:
                      <code class="CSS"
                        ><span class="property">border-width</span></code
                      >: <span class="value">1em 2em 3em</span> — The first
                      value represents the top edge, the second, the horizontal,
                      that is left and right, ones, and the third value the
                      bottom edge
                    </td>
                  </tr>
                  <tr>
                    <td><img src="_images/synprof_shorthand_edge4.png" /></td>
                    <td>
                      <p>
                        <em>The 4-value syntax</em>:
                        <code class="CSS"
                          ><span class="property">border-width</span></code
                        >: <span class="value">1em 2em 3em 4em</span> — The four
                        values represent the top, right, bottom and left edges
                        respectively, always in that order, that is clock-wise
                        starting at the top (The initial letter of
                        Top-Right-Bottom-Left matches the order of the consonant
                        of the word <em>trouble</em>: TRBL)
                      </p>
                    </td>
                  </tr>
                </tbody>
              </table>
              <p>
                "Similarly, shorthands handling properties related to corners of
                a box, like border-radius, always use a consistent 1-to-4-value
                syntax representing those corners:"
              </p>
              <table>
                <tbody>
                  <tr>
                    <td style="width: 69px">
                      <img src="_images/synprof_shorthand_corner1.png" />
                    </td>
                    <td>
                      <em>The 1-value syntax</em>:
                      <code class="CSS"
                        ><span class="property">border-radius</span></code
                      >: <span class="value">1em</span> — The unique value
                      represents all corners
                    </td>
                  </tr>
                  <tr>
                    <td><img src="_images/synprof_shorthand_corner2.png" /></td>
                    <td>
                      <em>The 2-value syntax</em>:
                      <code class="CSS"
                        ><span class="property">border-radius</span></code
                      >: <span class="value">1em 2em</span> — The first value
                      represents the top left and bottom right corner, the
                      second the top right and bottom left ones.
                    </td>
                  </tr>
                  <tr>
                    <td><img src="_images/synprof_shorthand_corner3.png" /></td>
                    <td>
                      <em>The 3-value syntax</em>:
                      <code class="CSS"
                        ><span class="property">border-radius</span></code
                      >: <span class="value">1em 2em 3em</span> — The first
                      value represents the top left corner, the second the top
                      right and bottom left ones, and the third value the bottom
                      right corner
                    </td>
                  </tr>
                  <tr>
                    <td><img src="_images/synprof_shorthand_corner4.png" /></td>
                    <td>
                      <p>
                        <em>The 4-value syntax</em>:
                        <code class="CSS"
                          ><span class="property">border-radius</span></code
                        >: <span class="value">1em 2em 3em 4em</span> — The four
                        values represent the top left, top right, bottom right
                        and bottom left corners respectively, always in that
                        order, that is clock-wise starting at the top left.
                      </p>
                    </td>
                  </tr>
                </tbody>
              </table>
              <p>
                Also note that shorthand properties can refer to other shorthand
                properties. The border property, for instance, is a real
                time-saver:
              </p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">border:</span
                ><span class="value">1px solid black</span>;<br />
                }
              </code>
              <p>...is shorthand for:</p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-width:</span
                ><span class="value">1px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-style:</span
                ><span class="value">solid</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-color:</span
                ><span class="value">black</span>;
                <br />
                }
              </code>
              <p>...which in turn is shorthand for:</p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-top-width:</span
                ><span class="value">1px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-right-width:</span
                ><span class="value">1px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-bottom-width:</span
                ><span class="value">1px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-left-width:</span
                ><span class="value">1px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-top-style:</span
                ><span class="value">solid</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-right-style:</span
                ><span class="value">solid</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-bottom-style:</span
                ><span class="value">solid</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-left-style:</span
                ><span class="value">solid</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-top-color:</span
                ><span class="value">black</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-right-color:</span
                ><span class="value">black</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-bottom-color:</span
                ><span class="value">black</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-left-color:</span
                ><span class="value">black</span>;
                <br />
                }
              </code>
              <p>This is a list of shorthand properties, according to MDN:</p>
              <ul>
                <li>
                  <code class="CSS"
                    ><span class="property">background</span></code
                  >
                </li>
                <li>
                  <code class="CSS"><span class="property">font</span></code>
                </li>
                <li>
                  <code class="CSS"><span class="property">margin</span></code>
                </li>
                <li>
                  <code class="CSS"><span class="property">border</span></code>
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-top</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-right</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-bottom</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-left</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-width</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-color</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-style</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">transition</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">animation</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">transform</span></code
                  >
                </li>
                <li>
                  <code class="CSS"><span class="property">padding</span></code>
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">list-style</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-radius</span></code
                  >
                </li>
              </ul>
            </div>
          </li>

          <li id="attprof_padding">
            <div class="question">
              <p>What is padding?</p>
            </div>

            <div class="answer">
              <p>
                As illustrated in the
                <a href="synprof_boxmodel">description of the box model</a>,
                padding is the space inside elements that hold contents of an
                element away from its edge.
              </p>
              <p>
                Padding can be set individually on all four sides of an element:
              </p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding-top</span
                >:<span class="value">2%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >padding-bottom</span
                >:<span class="value">2%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >padding-right</span
                >:<span class="value">1%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >padding-left</span
                >:<span class="value">1%</span>;<br />
                }
              </code>
              <p>
                ...or it can be set using
                <a href="#synprof_shorthand">shorthand notation</a>:
              </p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding</span
                >:<span class="value">2% 1%</span>;<br />
                }
              </code>
              <p>
                Remember, percentages refer to
                <em>the width of the containing block</em>, not the element
                itself. So the example above is actually NOT saying: "leave 2%
                of this div on the top/bottom for blank space, and 1% on the
                right/left." It is instead saying: "set the top/bottom padding
                to 2% of the width of the parent element, and set the right/left
                padding to 1% of the width of the parent element."
              </p>
              <p>
                Also, note that setting only
                <code class="CSS"
                  ><span class="property">padding-left</span></code
                >
                to a positive value, for instance, does not mean that
                <code class="CSS"
                  ><span class="property">padding-right</span></code
                >
                does not exist or have a value for that element. Remember that
                user agents (i.e. browsers) have their own stylesheets.
              </p>
            </div>
          </li>

          <li id="general_PaddingDefinesWidth">
            <div class="question">
              <p>
                If the
                <code class="CSS"><span class="property">width</span></code>
                property of a block-level element is not set, the element will
                expand to fill the parent, thereby allowing its padding and
                border to define the content width.
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="css_usingEmsToSizeNonFonts">
            <div class="question">
              <p>
                How does using <span class="value">em</span> work when applying
                the unit to properties other than
                <code class="CSS"><span class="property">font-size</span></code
                >?
              </p>
            </div>

            <div class="answer">
              <p>
                If <span class="value">em</span> is used on properties such as
                <code class="CSS"><span class="property">margin</span></code> or
                <code class="CSS"><span class="property">padding</span></code
                >, then the value is based on the calculated font-size of that
                specific element, and not the parent element. Take, for
                instance, the below example:
              </p>
              <code class="block CSS">
                <span class="selector">h1, p</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding:</span
                ><span class="value">1em</span>;<br />
                } <br />
              </code>
              <samp>
                <h1 style="padding: 1em; background: pink">
                  This is the h1 with 1em padding
                </h1>
                <p style="padding: 1em; background: azure">
                  This is the paragraph with 1em padding.
                </p>
              </samp>
              <p>
                You can see that padding of <span class="value">1em</span> is
                based on the
                <code class="CSS"><span class="property">font-size</span></code>
                of the element to which it is applied.
              </p>
            </div>
          </li>

          <li id="attprof_margin">
            <div class="question">
              <p>What is margin?</p>
            </div>

            <div class="answer">
              <p>
                As illustrated in the
                <a href="synprof_boxmodel">description of the box model</a>,
                margin is the space required by an element beyond its borders.
                If an HTML element were human, margin would be equivalent to its
                "personal space". The space itself is void and non-human, but
                still a rule that the human has imposed.
              </p>
              <p>
                Margin can be set individually on all four sides of an element:
              </p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-top</span
                >:<span class="value">2%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-bottom</span
                >:<span class="value">2%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-right</span
                >:<span class="value">1%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-left</span
                >:<span class="value">1%</span>;<br />
                }
              </code>
              <p>
                ...or it can be set using
                <a href="#synprof_shorthand">shorthand notation</a>:
              </p>
              <code class="block CSS">
                <span class="selector">div.example</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin</span
                >:<span class="value">2% 1%</span>;<br />
                }
              </code>
              <p>
                Remember, percentages refer to
                <em>the width of the containing block</em>, not the element
                itself. So the example above is actually NOT saying: "make the
                top/bottom margin 2% the width of the div, and make the
                right/left margin 1% of the width of the div."
              </p>
              <p>
                It is instead saying: "set the top/bottom margin to 2% of the
                width of the parent element, and set the right/left margin to 1%
                of the width of the parent element."
              </p>
              <p>
                Also, note that setting only
                <code class="CSS"
                  ><span class="property">margin-left</span></code
                >
                to a positive value, for instance, does not mean that
                <code class="CSS"
                  ><span class="property">margin-right</span></code
                >
                does not exist or have a value for that element. Remember that
                user agents (i.e. browsers) have their own stylesheets, and most
                elements have default margins
              </p>
            </div>
          </li>

          <li id="general_MarginInteraction">
            <div class="question">
              <p>What happens when two elements with margins are adjacent?</p>
            </div>

            <div class="answer">
              <p>
                This depends on which side the elements are adjacent. The
                general rule is that vertical margins collapse and horizontal
                margins combine.
              </p>
              <p>
                Let's use an illustrated example. The below two items are divs
                with no padding and no border. They only have their content
                (orange), and their margins (blue). Let's say that their top and
                left margin are 5px, and their bottom and right margins are
                10px. In other words:
              </p>
              <code class="block CSS">
                <span class="selector">div.left, div.right</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-top</span
                >:<span class="value">5px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-left</span
                >:<span class="value">5px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-bottom</span
                >:<span class="value">10px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-right</span
                >:<span class="value">10px</span>;<br />
                }
              </code>
              <img src="_images/general_MarginInteraction_1ObjectsApart.png" />
              <p>
                <span class="toDo">If we were floating these divs</span>, then
                they could appear side by side. Here's how they would look:
              </p>
              <img
                src="_images/general_MarginInteraction_2HorizontalCombines.png"
              />
              <p>
                If side by side, these two objects would keep their respective
                margins, and the distance between the content of both would be
                15 px: (10 px
                <code class="CSS"
                  ><span class="property">margin-right</span></code
                >
                on left
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >) + (5 px
                <code class="CSS"
                  ><span class="property">margin-left</span></code
                >
                on right
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >). The elements' horizontal margins are, in effect,
                <em>combining</em> to create an even larger margin between the
                two.
              </p>
              <p>
                If, however, they were stacked on top of each other (which is
                what a
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                would do in the normal document flow, since they are block
                elements), here's how they would interact:
              </p>
              <img
                src="_images/general_MarginInteraction_3VerticalCollapses.png"
              />
              <p>
                Because vertical margins <em>collapse</em>, then the smaller
                margin of the lower
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                is essentially absorbed by the larger margin of the upper
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >. In the event that adjacent vertical margins have different
                values, then the margin with the larger value is used.
              </p>
              <p>
                This vertical-margins-collapse rule is what allows paragraphs to
                have their cake and eat it too: every browser gives the
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                element both upper and lower margins, to give it space in case
                it is the first or last paragraph of text, but adjoining
                paragraphs' margins collapse into each other so there aren't two
                full lines between each paragraph.
              </p>
            </div>
          </li>

          <li id="general_NestedMargins">
            <div class="question">
              <p>
                How do margins of nested objects interact? For instance, how
                would the margin of a child element be affected by its parent?
              </p>
            </div>

            <div class="answer">
              <p>
                This depends on whether the parent has padding/border or not. If
                the parent has no padding or border, then nested margins all
                collapse to the largest margin. In the below example, the child
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                and its parent
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                each have bottom margins of <span class="value">1em</span>, but
                that does not add up to <span class="value">2em</span>, as you
                can clearly see. And the bottom
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >
                has a top margin of <span class="value">1em</span> as well. So
                in a sense, here you see three margins of
                <span class="value">1em</span> all collapsing into each other:
              </p>

              <code class="block CSS">
                <span class="selector">div.top</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-bottom</span
                >:<span class="value">1em</span>;<br />
                } <br /><br />
                <span class="comment"
                  >/* This rule is from the user agent:<br />p { <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;margin-top:1em;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;margin-bottom:1em;<br />
                  } <br />*/</span
                >
                <br />
                <br />
                <span class="selector">div.bottom</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-top</span
                >:<span class="value">1em</span>;<br />
                }
              </code>
              <samp class="clean">
                <div style="margin-bottom: 1em">
                  <p style="margin-bottom: 1em">
                    This is the top div. It is only 1em away from the line of
                    text in the bottom div.
                  </p>
                </div>
                <div style="margin-top: 1em">
                  <p>This is the bottom div.</p>
                </div>
              </samp>

              <p>
                But if the container element has border or padding, then the
                margins cannot collapse, so then you have a larger total margin.
                Watch what happens when we add a border to the top
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >:
              </p>

              <code class="block CSS">
                <span class="selector">div.top</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-bottom</span
                >:<span class="value">1em</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">border</span
                >:<span class="value">1px solid black</span>;<br />
                } <br /><br />
                <span class="comment"
                  >/* This rule is from the user agent:<br />p { <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;margin-top:1em;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;margin-bottom:1em;<br />
                  } <br />*/</span
                >
                <br />
                <br />
                <span class="selector">div.bottom</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-top</span
                >:<span class="value">1em</span>;<br />
                }
              </code>
              <samp class="clean">
                <div style="margin-bottom: 1em; border: 1px solid black">
                  <p>
                    This is the top div. This paragraph has 1em of its own
                    inside, plus the div has 1em outside.
                  </p>
                </div>
                <div style="margin-top: 1em">
                  <p>
                    This is the bottom div. Its top margin of 1em collapses into
                    the top div's bottom margin of 1em.
                  </p>
                </div>
              </samp>
              <p>
                The same will occur if we add
                <code class="CSS"><span class="property">padding</span></code
                >, rather than
                <code class="CSS"><span class="property">margin</span></code
                >, to the top
                <code class="HTML"
                  ><span class="element">&lt;div&gt;</span></code
                >. The whole point of padding is to give the content some
                breathing room within its element, so it does not collapse.
              </p>

              <code class="block CSS">
                <span class="selector">div.top</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >margin-bottom</span
                >:<span class="value">1em</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >padding-bottom</span
                >:<span class="value">1em</span>;<br />
                } <br /><br />
                <span class="comment"
                  >/* This rule is from the user agent:<br />p { <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;margin-top:1em;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;margin-bottom:1em;<br />
                  } <br />*/</span
                >
                <br />
                <br />
                <span class="selector">div.bottom</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">margin-top</span
                >:<span class="value">1em</span>;<br />
                }
              </code>
              <samp class="clean">
                <div style="margin-bottom: 1em; padding-bottom: 1em">
                  <p style="margin-bottom: 1em">
                    This is the top div, with 2em of space inside below: 1em
                    from the paragraph's margin, and 1em from the padding.
                  </p>
                </div>
                <div style="margin-top: 1em">
                  <p>
                    This is the bottom div. It's top margin of 1em collapses
                    into the top div's bottom margin of 1em.
                  </p>
                </div>
              </samp>
              <p>Therefore, when it comes to margin, padding, and border:</p>
              <ul>
                <li>
                  Margin can be shared because it exists outside of the
                  elements. The margin adopted between elements is the greatest
                  margin requested; i.e., of the neediest element. Think of an
                  ADA-compliant university with wheelchair ramps and elevators.
                  Most students do not need these features, but it is a shared
                  space designed with the neediest in mind. // Or, using the
                  "personal space" example again, if I require 1 ft of personal
                  space, and so do you, then that does not mean that there needs
                  to be 2 ft between us.
                </li>
                <li>
                  Padding and border, however, pertains to each element and is
                  non-negotiable. Perhaps you could think of padding like
                  clothing - each person is entitled to wear their own clothes,
                  their "padding" against the outside world. Even if I am
                  cuddling someone fully clothed, our clothes will not meld into
                  one fabric. And some people may want more layers than others.
                  // And border, well, that can be seen as the color of the
                  clothes you pick.
                </li>
              </ul>
            </div>
          </li>

          <li id="general_HTMLmargin">
            <div class="question">
              <p>
                The
                <code class="HTML"
                  ><span class="element">&lt;html&gt;</span></code
                >
                element can be given a
                <code class="CSS"><span class="property">margin</span></code
                >. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                True. This will offer a buffer between whatever is on the page
                and the edge of the viewport window, though there's really not
                much of a point to doing this when you can give the
                <code class="HTML"
                  ><span class="element">&lt;body&gt;</span></code
                >
                element a
                <code class="CSS"><span class="property">margin</span></code>
                instead. Also, if you apply a
                <code class="CSS"><span class="property">margin</span></code>
                and
                <code class="CSS"
                  ><span class="property">background</span></code
                >
                color to the
                <code class="HTML"
                  ><span class="element">&lt;html&gt;</span></code
                >
                element, that color will still take up the entirety of the
                viewport despite the margin.
              </p>
            </div>
          </li>

          <li id="general_marginauto">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="CSS value">auto</code> value when giving an element
                <code class="CSS"><span class="property">margin</span></code
                >?
              </p>
            </div>

            <div class="answer">
              <p>
                <span class="value">Auto</span> is often used in tandem with
                percentages in order to preserve the fluid layout of a page. For
                instance, this page is on a
                <code class="CSS"><span class="selector">body</span></code>
                element sized to 80% of the viewport (up until a max-width of
                900px), and it stays centered by having both its margin-left and
                margin-right set to auto.
              </p>

              <p>
                What you are essentially telling the browser when you supply a
                value of <span class="value">auto</span> is: "give this property
                the leftovers. I have already defined my rule, you figure out
                the rest."
              </p>
            </div>
          </li>

          <li id="general_paddingautonotpossible">
            <div class="question">
              <p>
                The <span class="value">auto</span> value can be assigned to the
                <code class="CSS"><span class="property">padding</span></code>
                property. True or false?
              </p>
            </div>

            <div class="answer">
              <p>False.</p>
            </div>
          </li>

          <li id="attprof_border">
            <div class="question">
              <p>Describe the border attributes.</p>
            </div>

            <div class="answer">
              <p>
                A border is, as it sounds, something that delineates an
                element's outer boundary. My
                <a href="#synprof_shorthand"
                  >definition of box model shorthand notation</a
                >
                demonstrates that border is actually shorthand for three core
                properties (which are themselves shorthand, as the link
                illustrates):
              </p>
              <ul>
                <li>
                  <code class="CSS"
                    ><span class="property">border-width</span></code
                  >
                  (initial value: <span class="value">medium</span>)
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-style</span></code
                  >
                  (initial value: <span class="value">none</span>)
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-color</span></code
                  >
                  (initial value: <span class="value">currentcolor</span>)
                </li>
              </ul>
              <p>
                Note that every single element can have a border, even the
                inline elements. For example, I have placed inline styling of
                <code class="CSS"
                  ><span class="property">border-style</span></code
                >: <span class="value">solid</span> on the following
                <code class="CSS"
                  ><span class="selector" style="border-style: solid"
                    >selector</span
                  ></code
                >,
                <code class="CSS"
                  ><span class="property" style="border-style: solid"
                    >property</span
                  ></code
                >, and
                <span class="value" style="border-style: solid">value</span>
                span elements. Note how all I did was change the
                <code class="CSS"
                  ><span class="property">border-style</span></code
                >
                to <span class="value">solid</span> and the dormant values came
                alive - the thickness is <span class="value">medium</span> and
                the color is the color of the font itself -
                <span class="value" id="synprof_currentcolor"
                  >currentcolor</span
                >
                is a keyword that "represents the calculated value of the
                element's color property."
              </p>

              <p>
                Note also that I can apply the border individually to different
                sides using the longhand notation; detailed in the link above.
              </p>

              <p>
                Below is an illustration (courtesy of the Lynda CSS Fundamentals
                course) which illustrates the different values available to the
                <code class="CSS"
                  ><span class="property">border-style</span></code
                >
                property.
              </p>

              <img
                src="_images/attprof_border_borderstyles.png"
                alt="Illustration of different types of border styles"
              />

              <p>
                The two values not shown above are
                <span class="value">none</span> and
                <span class="value">hidden</span>. What's the difference? When
                <span class="toDo">borders collapse</span>, such as in a table,
                <span class="value">none</span> will always be overridden by an
                adjacent border, while <span class="value">hidden</span> will
                always override an adjacent border. See below for an example.
              </p>

              <samp class="clean">
                <table style="border-style: none; border-collapse: collapse">
                  <tbody>
                    <tr>
                      <td style="border-style: none; border-collapse: collapse">
                        border-style: none;
                      </td>
                      <td style="border-collapse: collapse">
                        border: 1px solid black;
                      </td>
                    </tr>
                  </tbody>
                </table>
                <br />
                <table style="border-style: none; border-collapse: collapse">
                  <tbody>
                    <tr>
                      <td
                        style="border-style: hidden; border-collapse: collapse"
                      >
                        border-style: hidden;
                      </td>
                      <td style="border-collapse: collapse">
                        border: 1px solid black;
                      </td>
                    </tr>
                  </tbody>
                </table>
              </samp>

              <p>
                Note also in the above example that the top row of styles are
                flat, 2D renderings, while the bottom row aims to create a 3D
                effect. These more complex styles often require width values
                greater than 1, and, according to JW, sometimes do not "play
                well" with
                <code class="CSS"
                  ><span class="property">border-color</span></code
                >.
              </p>

              <p>
                Also note that <span class="value">groove</span> and
                <span class="value">ridge</span> are just inverses of each
                other, as are <span class="value">inset</span> and
                <span class="value">outset</span>.
              </p>
            </div>
          </li>

          <li id="general_DiffBetweenBorderAndOutline">
            <div class="question">
              <p>
                What is the difference between the
                <code class="CSS"><span class="property">border</span></code>
                and
                <code class="CSS"><span class="property">outline</span></code>
                properties?
              </p>
            </div>

            <div class="answer">
              <p>
                The main difference, according to MDN, is that "<code
                  class="CSS"
                  ><span class="property">outline</span></code
                >s do not take up space, they are drawn above the content...An
                <code class="CSS"><span class="property">outline</span></code>
                is a line that is drawn around elements, outside the border
                edge, to make the element stand out." Also,
                <code class="CSS"><span class="property">outline</span></code>
                is indeed a shorthand for the following:
              </p>
              <ul>
                <li>
                  <code class="CSS"
                    ><span class="property">outline-width</span></code
                  >
                  (initial value: <span class="value">invert</span> - "To ensure
                  the outline is visible, performs a color inversion of the
                  background." Not supported by all browser, in which case the
                  value used is <span class="value">currentcolor</span>.)
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">outline-style</span></code
                  >
                  (initial value: <span class="value">none</span>)
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">outline-color</span></code
                  >
                  (initial value: <span class="value">medium</span>)
                </li>
              </ul>
              <p>
                But the shorthand ends there - you cannot break those down into
                longhand which affects only certain sides. With an
                <code class="CSS"><span class="property">outline</span></code
                >, all sides are affected.
              </p>

              <p>
                For example, I have placed inline styling of
                <code class="CSS"><span class="property">outline</span></code
                >: <span class="value">1px solid red</span> on the following
                <code class="CSS"
                  ><span
                    class="selector"
                    style="border-style: solid; outline: 1px solid red"
                    >selector</span
                  ></code
                >,
                <code class="CSS"
                  ><span
                    class="property"
                    style="border-style: solid; outline: 1px solid red"
                    >property</span
                  ></code
                >, and
                <span
                  class="value"
                  style="border-style: solid; outline: 1px solid red"
                  >value</span
                >
                span elements, which have still have their borders from the
                <a href="#attprof_border"
                  >profile of the
                  <code class="CSS"><span class="property">border</span></code>
                  attribute</a
                >.
              </p>
              <p></p>
            </div>
          </li>

          <li id="attprof_border-image">
            <div class="question">
              <p>Is it possible to use an image as a border?</p>
            </div>

            <div class="answer">
              <p>
                Yes, this is possible, using the
                <code class="CSS"
                  ><span class="property">border-image</span></code
                >
                shorthand property. Within
                <code class="CSS"
                  ><span class="property">border-image</span></code
                >
                are the following longhand properties:
              </p>
              <ul>
                <li>
                  <code class="CSS"
                    ><span class="property">border-image-source</span></code
                  >
                  (initial value: <span class="value">none</span>) - the file
                  path of the image which will be used
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-image-slice</span></code
                  >
                  (initial value: <span class="value">100%</span>) - how the
                  image is divided into 9 regions, quite complex.
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-image-width</span></code
                  >: (initial value: <span class="value">1</span>) - "defines
                  the width of the border image by defining inward offsets from
                  the border edges. If the border-image-width is greater than
                  the border-width, then the border image extends beyond the
                  padding (and/or content) edge."
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-image-outset</span></code
                  >
                  (initial value: <span class="value">0s</span>) - "describes by
                  what amount the border image area extends beyond the border
                  box."
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-image-repeat</span></code
                  >
                  (intial value: <span class="value">stretch</span>) - "defines
                  how the middle part of a border image is handled so that it
                  can match the size of the border."
                </li>
              </ul>
              <p class="toDo">
                Let's say, then, I want to use the forward slash (/) as a
                repeating border. I don't know how. This is more complex than
                you think. Think not of a small image repeating around the edge
                but a large image being used as the the frame for something
                slightly smaller.
              </p>
            </div>
          </li>

          <li id="attprof_border-radius">
            <div class="question">
              <p>How do I give an element with a border rounded corners?</p>
            </div>

            <div class="answer">
              <p>
                Rounded corners can be acheived with the
                <code class="CSS"
                  ><span class="property">border-radius</span></code
                >
                property, which is shorthand for:
              </p>
              <ul>
                <li>
                  <code class="CSS"
                    ><span class="property">border-top-left-radius</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property">border-top-right-radius</span></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property"
                      >border-bottom-right-radius</span
                    ></code
                  >
                </li>
                <li>
                  <code class="CSS"
                    ><span class="property"
                      >border-bottom-left-radius</span
                    ></code
                  >
                </li>
              </ul>
              <p>
                See the
                <a href="#synprof_shorthand"
                  >question on box-model shorthand notation</a
                >
                for a further explanation of the below code example:
              </p>
              <code class="block CSS">
                <span class="selector">div.sample</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-radius:</span
                ><span class="value">5px 10px 15px 20px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding:</span
                ><span class="value">1em</span>;<br />
                }
              </code>
              <samp
                class="clean"
                style="
                  border-radius: 5px 10px 15px 20px;
                  border: 3px solid black;
                  padding: 1em;
                "
                >I'm inside a box with corners rounded by the arc of a circle.
                Caw.</samp
              >
              <p>
                There are actually two ways to round your box corners, as
                demonstrated by the below MDN illustration:
              </p>
              <img src="_images/attprof_border-radius_radiustypes.png" />
              <p>
                The first example in this list was using the circular rounding.
                Here's an example of elliptical rounding:
              </p>
              <code class="block CSS">
                <span class="selector">div.sample2</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-radius:</span
                ><span class="value">20px/10px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding:</span
                ><span class="value">1em</span>;<br />
                }
              </code>
              <samp
                class="clean"
                style="
                  border-radius: 20px/10px;
                  border: 3px solid black;
                  padding: 1em;
                "
                >I'm inside a box with corners rounded by the arc of an ellipse.
                Caw.</samp
              >
              <p>
                In the example above, the forward slash signifies that you are
                giving two separate radii to the one rounding circle. The first
                value is the horizontal radius (20px), and the second is the
                vertical radius (10px). Hence the flatter looking corners of the
                above box. If you wanted to set separate radii for multiple
                corners, you would due the TL/TR/BR/BL shorthand notation for
                the horizontal radii first, then the slash, then the same for
                the vertical radii. here's a good example from MDN:
              </p>
              <code class="block CSS">
                <span class="selector">div.sample2</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >border-radius:</span
                ><span class="value">50px 20px 30px / 40px 50px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding:</span
                ><span class="value">1em</span>;<br />
                } <br /><br />
                <span class="comment"
                  >/* is equivalent to: */<br /><br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                    >border-top-left-radius: </span
                  ><span class="value">50px 40px</span>;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                    >border-top-right-radius: </span
                  ><span class="value">20px 50px</span>;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                    >border-bottom-right-radius: </span
                  ><span class="value">30px 40px</span>;<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                    >border-bottom-left-radius:</span
                  ><span class="value"> 20px 50px</span>;<br />

                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">padding:</span
                  ><span class="value">1em</span>;<br />
                  } <br /><br />
                </span>
              </code>
              <samp
                class="clean"
                style="
                  border-radius: 50px 20px 30px / 40px 50px;
                  border: 3px solid black;
                  padding: 1em;
                "
                >I'm inside a box with corners rounded by the arc of various
                ellipses. Caw.</samp
              >
            </div>
          </li>

          <li id="general_backgroundsAndpadding">
            <div class="question">
              <p>
                A background-color and/or background-image extends all the way
                to an element's edge, including padding. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_backgroundsAndColor">
            <div class="question">
              <p>
                If you assign both a background-color and background-image to an
                element, the color is underneath the image. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_multiplebackgrounds">
            <div class="question">
              <p>
                An element cannot have multiple background images. True or
                false?
              </p>
            </div>

            <div class="answer">
              <p>False.</p>
            </div>
          </li>

          <li id="general_ImageAsHeader">
            <div class="question">
              <p>
                What do you do if you want to use images rather than heading
                tags as headers? Won't you lose the ability to search the
                heading text or have it accessible to screen readers?
              </p>
            </div>

            <div class="answer">
              <p>
                The key to doing this is to give the actual text a massive
                text-indent in either direction in order to push the actual text
                off the page. The below Los Angeles Dodgers image is actually a
                h1 element:
              </p>
              <samp class="clean">
                <h1
                  style="
                    text-indent: -9999px;
                    font-size: 75px;
                    background-image: url('_images/general_ImageAsHeader_LADodgers.gif');
                    background-size: 50%;
                    border: 1px solid navy;
                  "
                >
                  LA Dodgers
                </h1>
              </samp>
              <code class="block CSS">
                <span class="selector">h1</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >text-indent:</span
                ><span class="value">-9999px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">font-size:</span
                ><span class="value">75px</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >background-image:</span
                ><span class="value"
                  >url('_images/general_ImageAsHeader_LADodgers.gif')</span
                >;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >background-size:</span
                ><span class="value">50%</span>;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property">border:</span
                ><span class="value">1px solid navy</span>;<br />
                }
              </code>
              <p>
                If you search for "LA Dodgers" on this page, you will get two
                matches - one for this sentence, and one for the hidden text in
                the h1 above.
              </p>
            </div>
          </li>

          <li id="attprof_background">
            <div class="question">
              <p>How do I give an element a background image and/or color?</p>
            </div>

            <div class="answer">
              <p>
                Background images, colors, and their properties can be
                controlled using the background shorthand property. This
                property consists of the following longhand properties. Other
                possible values are shown in sub-bulleted lists below each
                property:
              </p>

              <ul class="cgen">
                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-image</span></code
                    >
                    (initial value: <span class="value">none</span>)</b
                  >

                  <code class="block CSS"
                    ><span class="cgen">
                      &lt;bg-image&gt;#<br /><br />
                      where <br />
                      &lt;bg-image&gt; = none | &lt;image&gt;#<br /><br />
                      (much more complicated syntax follows for &lt;image&gt;
                      but the below example should suffice)<br /><br />
                      <span class="property">background-image</span>:
                      <span class="value"
                        >url("http://www.example.com/example.png");</span
                      >
                    </span></code
                  >
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-position: right;
                    "
                  ></div>
                </li>

                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-position</span></code
                    >
                    (initial value: <span class="value">0% 0%</span>, equivalent
                    to <span class="value">left top</span> or
                    <span class="value">top left</span>)</b
                  >

                  <code class="block CSS"
                    ><span class="cgen">
                      &lt;position&gt;#<br /><br />
                      where <br /><br />
                      &lt;position&gt; = <br /><br />
                      [ <br /><br />
                      <b>1. Single value...</b><br /><br />
                      [ left | center | right | top | bottom |
                      &lt;length-percentage&gt; ] <br /><br />
                      <p>
                        <b
                          >...either a keyword or a length-percentage,
                          percentages "refer to the size of the background
                          positioning area minus size of background image; size
                          refers to the width for horizontal offsets and to the
                          height for vertical offsets"</b
                        >: Why background positioning minus background image?
                        Because the positioning is always based on the reference
                        point of the top-left corner of the image. If there were
                        no subtraction of the background image size then
                        background-position of 99% would mean that the vast
                        majority of the image would fall outside the element.
                      </p>

                      <p>
                        Perhaps the best way to grasp using
                        <span class="property">background-position</span> with
                        percentages is using the below Lynda infographic:
                      </p>

                      <img
                        src="_images/attprof_background-position_LyndaInfographic.png"
                      /><br /><br />

                      <span class="comment" style="color: red"
                        >/* For the sake of better understanding, all of the
                        below examples have the background-repeat property set
                        to no-repeat and background-size set to 15%. */</span
                      ><br /><br />

                      <span class="property">background-position</span>:
                      <span class="value">right</span>;<br />
                      <span class="property">background-position</span>:
                      <span class="value">100%</span>;<br />
                      <span class="comment"
                        >/* Both of the above rules have the same effect, shown
                        below. Note how passing only one keyword value, a
                        horizontal one, adds an implied vertical positioning of
                        center: */</span
                      >
                    </span></code
                  >
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: right;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <span class="property">background-position</span>:
                      <span class="value">bottom</span>;<br />
                      <span class="comment"
                        >/* Note how passing only one keyword value, a vertical
                        one, adds an implied horizontal positioning of center:
                        */</span
                      >
                    </span></code
                  >
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: bottom;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <span class="property">background-position</span>:
                      <span class="value">15%</span>;<br />
                      <span class="comment"
                        >/* Note how passing only one percentage value is
                        interpreted as referring to the horizontal dimension, so
                        the implied vertical position of center is added.
                        */</span
                      >
                    </span></code
                  >
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: 15%;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <span class="property">background-position</span>:
                      <span class="value">100%</span>;<br />
                      <span class="comment"
                        >/* Translation: the left edge of the image should be
                        positioned at 100% of the value of (container width -
                        background image width). May as well just use the
                        keyword "right": */</span
                      >
                    </span></code
                  >

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: 100%;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <span class="property">background-position</span>:
                      <span class="value">50px 50px</span>;<br />
                      <span class="comment"
                        >/* Translation: Starting with the top left corner of
                        the div, go 50 pixels across, and 50 pixels down (like
                        Adobe Illustrator, positive X is to the right and
                        positive Y is down): */</span
                      >
                    </span></code
                  >

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: 50px 50px;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <b>| (OR) 2. Two values...</b><br /><br />
                      | <br />
                      [ left | center | right | &lt;length-percentage&gt; ] [
                      top | center | bottom | &lt;length-percentage&gt; ]
                      <br /><br />
                      <b
                        >...a horizontal value followed by a space and then a
                        vertical value.</b
                      ><br /><br />

                      <span class="property">background-position</span>:
                      <span class="value">2em bottom</span>;<br />
                      <span class="comment"
                        >/* Translation: have the left edge of this picture
                        start 2em from the left edge of the div, and have the
                        bottom edge of the picture align with the bottom of the
                        div: */</span
                      >
                    </span></code
                  >

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: 2em bottom;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <b>| (OR) 3. Complementary value pair...</b><br /><br />

                      [ <br />
                      &nbsp;&nbsp;center | <br />
                      &nbsp;&nbsp;[ left | right ] &lt;length-percentage&gt;?
                      <br />
                      ] <br /><br />
                      &amp;&amp; <br /><br />
                      [ <br />
                      &nbsp;center | <br />
                      &nbsp;[ top | bottom ] &lt;length-percentage&gt;? <br />
                      ]<br /><br />

                      <b
                        >..."&amp;&amp;" means both values must be present but
                        they can be in any order. Also the values are
                        interdependent so that the first value determines what
                        would be valid in the second value. Both of the below
                        are equally valid.</b
                      ><br /><br />

                      <span class="property">background-position</span>:
                      <span class="value">top right</span>;<br />
                      <span class="property">background-position</span>:
                      <span class="value">right top</span>;<br /> </span
                  ></code>

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: top right;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <b
                        >3.Value Pair, continued..."?" at the end of [ left |
                        right ] &lt;length-percentage&gt;? means that the
                        &lt;length-percentage&gt; value is optional. This is
                        used as an offset from the preceding edge.</b
                      ><br /><br />

                      <span class="property">background-position</span>:
                      <span class="value">right 2em bottom 2em</span
                      >;<br /><br />
                      <span class="comment"
                        >/* Translation: set the background image to 2em from
                        the right edge, and 2em from the bottom edge. */</span
                      ><br /><br /> </span
                  ></code>

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: no-repeat;
                      background-position: right 2em bottom 2em;
                    "
                  ></div>

                  <code class="block CSS"
                    ><span class="cgen">
                      <b>4.Global Values</b>, including
                      <span class="value">inherit</span>,
                      <span class="value">initial</span>, and
                      <span class="toDo">unset</span>.
                    </span></code
                  >
                </li>

                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-size</span></code
                    >
                    (initial value: <span class="value">auto auto</span>)</b
                  >. Auto is "A keyword that scales the background image in the
                  corresponding direction such that its intrinsic proportion is
                  maintained." Having both set to auto essentially means to keep
                  the image at its native size, or whatever size it has been
                  given by perhaps another CSS selector.

                  <code class="block CSS">
                    &lt;bg-size&gt;#<br /><br />
                    where<br /><br />
                    &lt;bg-size&gt; = [ &lt;length-percentage&gt; | auto ]{1,2}
                    | cover | contain<br /><br />

                    <p>
                      "The curly braces multiplier ({ }), enclosing two integers
                      separated by a comma, A and B, indicates that the entity
                      must appear at least A times and at most B times."
                    </p>
                    <p>
                      If only one value is supplied then that pertains to the
                      width of the image; the height remains
                      <span class="value">auto</span>. If two values are
                      supplied then then second pertains to height.
                    </p>

                    <span class="property">background-size</span>:
                    <span class="value">10%</span>;<br />
                    <span class="comment"
                      >/* Note how passing only one keyword value, a horizontal
                      one, adds an implied vertical re-sizing of auto in order
                      to preserve the aspect ratio. Note how with no
                      background-position set it is at its default top-left
                      alignment:*/</span
                    >
                  </code>

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                    "
                  ></div>

                  <code class="block CSS">
                    <span class="property">background-size</span>:
                    <span class="value">cover</span>;<br />
                    <span class="comment"
                      >/* Cover "scales the image as large as possible and
                      maintains image aspect ratio...The image "covers" the
                      entire width or height of the container. When the image
                      and container have different dimensions, the image is
                      clipped either left/right or top/bottom". In this example,
                      the container is wider than it is tall so the image will
                      expand to fill the width. Note how with no
                      background-position set it is at its default top
                      alignment:*/</span
                    >
                  </code>

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: cover;
                    "
                  ></div>

                  <code class="block CSS">
                    <span class="property">background-size</span>:
                    <span class="value">contain</span>;<br />
                    <span class="comment"
                      >/* Contain is the opposite of cover - it too maintains
                      the image's aspect ratio, but resizes it so that it is
                      contained within the element. The "image is letterboxed
                      within the container. When the image and container have
                      different dimensions, the empty areas (either top/bottom
                      of left/right) are filled with the
                      background-color.":*/</span
                    >
                  </code>

                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: contain;
                      margin-bottom: 1em;
                    "
                  ></div>
                </li>

                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-repeat</span></code
                    >
                    (initial value: <span class="value">repeat</span></b
                  >): "defines how background images are repeated. A background
                  image can be repeated along the horizontal axis, the vertical
                  axis, both axes, or not repeated at all."

                  <code class="block CSS">
                    &lt;repeat-style&gt;#<br /><br />
                    where<br /><br />
                    &lt;repeat-style&gt; = repeat-x | repeat-y | [ repeat |
                    space | round | no-repeat ]{1,2}

                    <p>
                      As with many other properties, you can supply one value or
                      two. repeat-x and repeat-y are pretty obvious, as are
                      repeat and no-repeat, so let's go into the other two.
                    </p>

                    <span class="property">background-repeat</span>:
                    <span class="value">space</span>;<br />
                    <span class="comment"
                      >/* Space: "The image is repeated as much as possible
                      without clipping. The first and last images are pinned to
                      either side of the element, and whitespace is distributed
                      evenly between the images. The background-position
                      property is ignored unless only one image can be displayed
                      without clipping. The only case where clipping happens
                      using space is when there isn't enough room to display one
                      image.":*/</span
                    >
                  </code>
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: space;
                      margin-bottom: 1em;
                    "
                  ></div>

                  <code class="block CSS">
                    <span class="property">background-repeat</span>:
                    <span class="value">round</span>;<br />
                    <span class="comment"
                      >/* Round: "The round value causes the background image to
                      be scaled up and/or down until it can repeat throughout
                      the width and height of the element without being cut
                      off....As the allowed space increases in size, the
                      repeated images will stretch (leaving no gaps) until there
                      is room for another one to be added. When the next image
                      is added, all of the current ones compress to allow
                      room.":*/</span
                    >
                  </code>
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      background-repeat: round;
                      margin-bottom: 1em;
                    "
                  ></div>
                </li>

                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-origin</span></code
                    >
                    (initial value: <span class="value">padding-box</span>)</b
                  >: "determines the background positioning area, that is the
                  position of the origin of an image specified using the
                  background-image CSS property."
                  <code class="block CSS">
                    &lt;box&gt;#<br /><br />
                    where<br /><br />
                    &lt;box&gt; = border-box | padding-box | content-box

                    <p>
                      In the below examples, the container will have a 10px
                      black border and 10px of padding.
                    </p>

                    <span class="property">background-origin</span>:
                    <span class="value">padding-box</span>;<br />
                    <span class="comment"
                      >/* Padding-box: Background origin aligns with
                      padding-start:*/</span
                    >
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 10px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      margin-bottom: 1em;
                    "
                  ></div>

                  <code class="block CSS">
                    <p>
                      ...but to be sure, it doesn't mean the background doesn't
                      exist beneath that border (see below for the same example
                      but with a different border)...it only sets the reference
                      point so that background-position adds the border width to
                      the specified position. If you want to clip the image so
                      that it's not drawn beneath the border, see the
                      background-clip property.
                    </p>
                  </code>

                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 10px dashed red;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      margin-bottom: 1em;
                    "
                  ></div>

                  <code class="block CSS">
                    <span class="property">background-origin</span>:
                    <span class="value">border-box</span>;<br />
                    <span class="comment"
                      >/* Border-box: "The background extends to the outside
                      edge of the border (but underneath the border in
                      z-ordering).":*/</span
                    >
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 10px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      margin-bottom: 1em;
                      background-origin: border-box;
                    "
                  ></div>

                  <code class="block CSS">
                    <span class="property">background-origin</span>:
                    <span class="value">content-box</span>;<br />
                    <span class="comment"
                      >/* Content-box: Note how the top left corner of the first
                      image takes the 10px of padding into account and aligns
                      itself with where the content would be.*/</span
                    >
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 10px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      margin-bottom: 1em;
                      background-origin: content-box;
                      color: red;
                      font-family: Consolas;
                    "
                  >
                    CONTENT
                  </div>
                </li>

                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-clip</span></code
                    >
                    (initial value: <span class="value">border-box</span>)</b
                  >
                  <code class="block CSS">
                    &lt;box&gt;#<br /><br />
                    where<br /><br />
                    &lt;box&gt; = border-box | padding-box | content-box

                    <p>
                      In the below examples, the container will have a 10px red
                      dashed border and 10px of padding.
                    </p>

                    <span class="comment"
                      >/* Note how the formal definition is the exact same as
                      that of background-origin, except the default is that the
                      background is applied to the whole element. You have
                      already seen the default/initial value, border-box, in the
                      single red dashed example above, so we will cover the
                      other two below:*/</span
                    ><br /><br />
                    <span class="property">background-clip</span>:
                    <span class="value">padding-box</span>;<br /><br />
                    <span class="comment"
                      >/* Note that no value for background-origin has been set,
                      so it is at its initial value of padding-box, which is why
                      this lines up nicely:*/</span
                    ><br /><br />
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 10px dashed red;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      margin-bottom: 1em;
                      background-clip: padding-box;
                    "
                  ></div>
                  <code class="block CSS">
                    <span class="property">background-clip</span>:
                    <span class="value">content-box</span>;<br /><br />
                    <span class="comment"
                      >/* With content box the background is strictly limited to
                      the content of the element - that 10px of padding is not
                      included, but things look out of whack because the
                      background-origin property is still at its default/initial
                      value of padding-box..*/</span
                    ><br /><br />
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 10px dashed red;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: 15%;
                      margin-bottom: 1em;
                      background-clip: content-box;
                    "
                  ></div>
                </li>
                <li>
                  <b
                    ><code class="CSS"
                      ><span class="property">background-attachment</span></code
                    >
                    (initial value: <span class="value">scroll</span>)</b
                  >
                  <code class="block CSS">
                    &lt;attachment&gt;#<br /><br />
                    where<br /><br />
                    &lt;attachment&gt; = scroll | fixed | local<br /><br />

                    <span class="comment"
                      >/* You have already seen the default/initial value,
                      scroll, in which "the background is fixed with regard to
                      the element itself and does not scroll with its contents.
                      (It is effectively attached to the element's border.)".
                      Therefore we will cover the other two below:*/</span
                    ><br /><br />
                    <span class="property">background-attachment</span>:
                    <span class="value">fixed</span>;<br /><br />
                    <span class="comment"
                      >/* Fixed: "This keyword means that the background is
                      fixed with regard to the viewport. Even if an element has
                      a scrolling mechanism, a ‘fixed’ background doesn't move
                      with the element." Note how when this is set to
                      background-size: cover, it attempts to cover the entire
                      viewport:*/</span
                    ><br /><br />
                  </code>
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: cover;
                      background-attachment: fixed;
                    "
                  ></div>
                  <code class="block CSS">
                    <span class="property">background-attachment</span>:
                    <span class="value">local</span>;<br /><br />
                    <span class="comment"
                      >/* Local: "This keyword means that the background is
                      fixed with regard to the element's contents: if the
                      element has a scrolling mechanism, the background scrolls
                      with the element's contents, and the background painting
                      area and background positioning area are relative to the
                      scrollable area of the element rather than to the border
                      framing them."*/</span
                    ><br /><br />
                  </code>
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: cover;
                      color: red;
                      padding: 10px;
                      overflow: auto;
                      background-attachment: local;
                    "
                  >
                    Since the height of this div is fixed, then what should
                    happen when you scroll down inside of it is that this image
                    should scroll as well because the background-attachment
                    property is set to local. // Since the height of this div is
                    fixed, then what should happen when you scroll down inside
                    of it is that this image should scroll as well because the
                    background-attachment property is set to local. // Since the
                    height of this div is fixed, then what should happen when
                    you scroll down inside of it is that this image should
                    scroll as well because the background-attachment property is
                    set to local. // Since the height of this div is fixed, then
                    what should happen when you scroll down inside of it is that
                    this image should scroll as well because the
                    background-attachment property is set to local. // Since the
                    height of this div is fixed, then what should happen when
                    you scroll down inside of it is that this image should
                    scroll as well because the background-attachment property is
                    set to local. // Since the height of this div is fixed, then
                    what should happen when you scroll down inside of it is that
                    this image should scroll as well because the
                    background-attachment property is set to local. // Since the
                    height of this div is fixed, then what should happen when
                    you scroll down inside of it is that this image should
                    scroll as well because the background-attachment property is
                    set to local. // Since the height of this div is fixed, then
                    what should happen when you scroll down inside of it is that
                    this image should scroll as well because the
                    background-attachment property is set to local. // Since the
                    height of this div is fixed, then what should happen when
                    you scroll down inside of it is that this image should
                    scroll as well because the background-attachment property is
                    set to local. // Since the height of this div is fixed, then
                    what should happen when you scroll down inside of it is that
                    this image should scroll as well because the
                    background-attachment property is set to local. // Since the
                    height of this div is fixed, then what should happen when
                    you scroll down inside of it is that this image should
                    scroll as well because the background-attachment property is
                    set to local. // Since the height of this div is fixed, then
                    what should happen when you scroll down inside of it is that
                    this image should scroll as well because the
                    background-attachment property is set to local. // Since the
                    height of this div is fixed, then what should happen when
                    you scroll down inside of it is that this image should
                    scroll as well because the background-attachment property is
                    set to local. //
                  </div>
                  <code class="block CSS">
                    <span class="comment"
                      >/* ...compare the above (local) with the below (scroll),
                      which actually can be confusing since it does NOT scroll
                      within a scrollable element. "Scroll" refers to the
                      viewport only.*/</span
                    ><br /><br />
                  </code>
                  <div
                    style="
                      height: 150px;
                      border: 1px solid black;
                      background-image: url('_images/attprof_background_GrizzliesSecondary.gif');
                      background-size: cover;
                      color: red;
                      padding: 10px;
                      overflow: auto;
                      margin-bottom: 1em;
                    "
                  >
                    This image will not scroll because the background-attachment
                    property is not set which means it is set by default to
                    scroll. // This image will not scroll because the
                    background-attachment property is not set which means it is
                    set by default to scroll. //This image will not scroll
                    because the background-attachment property is not set which
                    means it is set by default to scroll. //This image will not
                    scroll because the background-attachment property is not set
                    which means it is set by default to scroll. //This image
                    will not scroll because the background-attachment property
                    is not set which means it is set by default to scroll.
                    //This image will not scroll because the
                    background-attachment property is not set which means it is
                    set by default to scroll. //This image will not scroll
                    because the background-attachment property is not set which
                    means it is set by default to scroll. // //This image will
                    not scroll because the background-attachment property is not
                    set which means it is set by default to scroll. // //This
                    image will not scroll because the background-attachment
                    property is not set which means it is set by default to
                    scroll. // //This image will not scroll because the
                    background-attachment property is not set which means it is
                    set by default to scroll. // //This image will not scroll
                    because the background-attachment property is not set which
                    means it is set by default to scroll. //
                  </div>
                </li>
                <li id="attprof_background-color">
                  <b
                    ><code class="CSS"
                      ><span class="property">background-color</span></code
                    >
                    (initial value: <span class="value">transparent</span>)</b
                  >
                  <code class="block CSS">
                    &lt;color&gt;<br /><br />
                    where<br />
                    &lt;color&gt; = &lt;rgb()&gt; | &lt;rgba()&gt; |
                    &lt;hsl()&gt; | &lt;hsla()&gt; | &lt;hex-color&gt; |
                    &lt;named-color&gt; | currentcolor

                    <p>
                      All of the below declarations result in the same color:
                    </p>

                    <span class="property">background-color</span>:
                    <span class="value">rgb(12, 178, 172)</span>;<br />
                    <span class="property">background-color</span>:
                    <span class="value"> hsl(178, 87%, 37%)</span>;<br />
                    <span class="property">background-color</span>:
                    <span class="value">#0cb2ac</span>;

                    <p>
                      Remember that hexadecimal colors must start with the pound
                      sign immediately (no spaces) followed by the hex code.
                    </p>
                    <p>
                      You cannot mix percentages and integers within the rgb(),
                      rgba(), hsl(), or hsla() functions.
                    </p>
                  </code>

                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 5px solid black;
                      background-color: #0cb2ac;
                    "
                  ></div>

                  <code class="block CSS">
                    <p>
                      To add some transparency to that color, we can use rgba or
                      hsla. The extra "a" stands for <u>a</u>lpha channel, which
                      controls transparency. You supply a value between 0 and 1
                      to signify the opacity:
                    </p>

                    <span class="property">background-color</span>:
                    <span class="value">rgba(12, 178, 172, 0.5)</span>;<br />
                    <span class="property">background-color</span>:
                    <span class="value"> hsla(178, 87%, 37%, 0.5)</span>;

                    <p class="note">
                      UPDATE: You can now use the rgb() and rgba() functions
                      interchangably, as you can with the hsl() and hsla()
                      functions. They will both accept exactly the same
                      parameters, with the alpha channel being optional at the
                      end.
                    </p>
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 5px solid black;
                      background-color: rgba(12, 178, 172, 0.5);
                    "
                  ></div>

                  <code class="block CSS">
                    <p>
                      There is also a
                      <a href="https://drafts.csswg.org/css-color/#named-colors"
                        >large list of named colors</a
                      >
                      that are available to use. For instance, the value
                      lightseagreen is not far away from the above examples:
                    </p>

                    <span class="property">background-color</span>:
                    <span class="value">lightseagreen</span>;

                    <br />
                  </code>
                  <div
                    style="
                      height: 150px;
                      padding: 10px;
                      border: 5px solid black;
                      background-color: lightseagreen;
                    "
                  ></div>
                </li>
              </ul>

              <p>
                Whew! Now that we've finally made it through all the different
                background properties, let's take a look at the mack daddy
                shorthand property simply titled
                <code class="CSS"><span class="property">background</span></code
                >.
              </p>
              <code class="block CSS">
                [ &lt;bg-layer&gt; , ]* &lt;final-bg-layer&gt;<br /><br />
                where &lt;bg-layer&gt; = &lt;bg-image&gt; || &lt;position&gt; [
                / &lt;bg-size&gt; ]? || &lt;repeat-style&gt; ||
                &lt;attachment&gt; || &lt;box&gt;{1,2}<br /><br />
                &lt;final-bg-layer&gt; = &lt;bg-image&gt; || &lt;position&gt; [
                / &lt;bg-size&gt; ]? || &lt;repeat-style&gt; ||
                &lt;attachment&gt; || &lt;box&gt; || &lt;box&gt; ||
                &lt;'background-color'&gt;
                <p>
                  <span class="comment"
                    >"The asterisk multiplier (*) indicates that the entity may
                    appear zero, one or several times." This means that yes, you
                    can apply multiple background images, though note that you
                    can only apply one color, on the "final" i.e. back-most
                    layer.</span
                  >
                </p>
              </code>
              <p>
                As demonstrated by the double bars in the formal definition,
                <code class="CSS"><span class="property">background</span></code
                >'s values can be supplied in any order except for
                background-size, which, if included, must be specified after
                background-position, separated with the '/' character.
              </p>

              <p>
                In the below example will place a small Grizzles secondary logo
                repeating on the left hand side of a div, and a jersey on the
                right hand side of the div. Since the jersey is the last image
                listed, then it is technically at the bottom of the stack and it
                is to that value set that we will have to append the
                background-color.
              </p>

              <code class="block CSS">
                <span class="property">background</span>:<span class="value"
                  >url('_images/attprof_background_GrizzliesSecondary_TransparentJGEdit.png')
                  top left / 75px no-repeat round,
                  url('_images/attprof_background_GrizzliesJersey.png') right /
                  auto 300px no-repeat rgba(12, 178, 172, 0.25)</span
                >;<br /><br />

                <span class="comment">ANNOTATED:</span><br />
                <span class="property">background</span>:<span class="value"
                  ><span class="ccom hghlt">background-image:</span
                  >url('_images/attprof_background_GrizzliesSecondary_TransparentJGEdit.png')
                  <span class="ccom hghlt">// background-position (X, Y):</span>
                  top left /
                  <span class="hghlt ccom">background-size(X)</span>:75px
                  <span class="ccom hghlt">// background-repeat (X, Y):</span>
                  no-repeat round
                  <span class="ccom hghlt">comma introduces background #2</span
                  >,<br />
                  <span class="ccom hghlt">background-image:</span>
                  url('_images/attprof_background_GrizzliesJersey.png')
                  <span class="ccom hghlt">background-position (X):</span> right
                  / <span class="ccom hghlt">background-size (X, Y):</span> auto
                  300px
                  <span class="ccom hghlt">background-repeat:</span> no-repeat
                  <span class="ccom hghlt">background-color:</span> rgba(12,
                  178, 172, 0.25)</span
                >;

                <br />
              </code>

              <div
                style="
                  min-height: 300px;
                  padding: 10px 135px 10px 90px;
                  border: 5px solid black;
                  overflow: hidden;
                  background: url('_images/attprof_background_GrizzliesSecondary_TransparentJGEdit.png')
                      top left / 75px no-repeat round,
                    url('_images/attprof_background_GrizzliesJersey.png') right /
                      auto 300px no-repeat rgba(12, 178, 172, 0.25);
                "
              >
                <h2>The Vancouver Grizzlies</h2>
                <p>
                  The Vancouver Grizzlies were a Canadian professional
                  basketball team based in Vancouver, British Columbia. They
                  were part of the Midwest Division of the Western Conference of
                  the National Basketball Association (NBA). The team was
                  established in 1995, along with the Toronto Raptors, as part
                  of the NBA's expansion into Canada. Following the 2000–01
                  season, the team relocated to Memphis, Tennessee, United
                  States, and are known as the Memphis Grizzlies. The Grizzlies
                  played their home games at General Motors Place for the
                  entirety of their 6 seasons in Vancouver.
                </p>
                <p>
                  Like most expansion teams, the Grizzlies struggled in their
                  early years. The team finished last in the division in five of
                  its seasons, and never managed to win more than 30 percent of
                  its games in any of the team's seasons in Vancouver. In total,
                  the team won 101 games, lost 359, and never qualified for the
                  NBA playoffs. The two expansion teams were denied early draft
                  picks in the first season, but the Grizzlies secured Shareef
                  Abdur-Rahim in 1996. The team continued to lose games despite
                  high draft picks.
                </p>
              </div>
            </div>
          </li>

          <li id="allselectortypes">
            <div class="question">
              <p>Where can I find a list of every conceivable selector type?</p>
            </div>

            <div class="answer">
              <p>
                The below table is a direct copy of the
                <a href="https://www.w3.org/TR/selectors/#selectors"
                  >W3C's specification of possible selector types</a
                >, with occassional added examples.
              </p>

              <table class="directcopy" id="W3CSelectorTypes">
                <thead>
                  <tr>
                    <th>Pattern</th>
                    <th>Meaning</th>
                    <th class="described">Described in section</th>
                    <th class="origin">First defined in CSS level</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="pattern" rowspan="2">*</td>
                    <td class="meaning">any element</td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#universal-selector"
                        >Universal selector</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td colspan="3" class="intblex">
                      <code class="CSS"
                        ><span class="selector">div.answer * </span></code
                      >
                      { } <br />
                      <span class="comment"
                        >/* Rule would apply to any element within a div with
                        the class of "answer".*/</span
                      >
                    </td>
                  </tr>
                  <tr>
                    <td class="pattern">E</td>
                    <td class="meaning">an element of type E</td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#type-selectors"
                        >Type selector</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern" rowspan="2">E[foo]</td>
                    <td class="meaning">an E element with a "foo" attribute</td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>

                  <tr>
                    <td colspan="3" class="intblex">
                      <span class="comment"
                        >/* Meaning the attribute is explicitly invoked/set in
                        the HTML. For example, the below only applies to a
                        elements with a title:*/</span
                      ><br /><br />
                      <code class="CSS"
                        ><span class="selector">a[title]</span></code
                      >
                      { } <br />
                    </td>
                  </tr>

                  <tr>
                    <td class="pattern" rowspan="2">E[foo="bar"]</td>
                    <td class="meaning">
                      an E element whose "foo" attribute value is exactly equal
                      to "bar"
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>

                  <tr>
                    <td colspan="3" class="intblex">
                      <span class="comment"
                        >/* You can specify that element must have two
                        attributes matching two respective criteria by the
                        following syntax:*/</span
                      ><br /><br />
                      <code class="CSS"
                        ><span class="selector"
                          >td[colspan="3"][class="intblex"]</span
                        ></code
                      >
                      { } <br /><br />
                      <span class="comment"
                        >/* In other words, this rule applies only to td
                        elements with a colspan of 3 and a class of exactly
                        "intblex" (not "intblex" and another value). Note that
                        if you want to write a selector for item which has two
                        specific classes, you should do it this way
                        instead.*/</span
                      >
                    </td>
                  </tr>

                  <tr>
                    <td class="pattern">E[foo~="bar"]</td>
                    <td class="meaning">
                      an E element whose "foo" attribute value is a list of
                      whitespace-separated values, one of which is exactly equal
                      to "bar"
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E[foo^="bar"]</td>
                    <td class="meaning">
                      an E element whose "foo" attribute value begins exactly
                      with the string "bar"
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E[foo$="bar"]</td>
                    <td class="meaning">
                      an E element whose "foo" attribute value ends exactly with
                      the string "bar"
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E[foo*="bar"]</td>
                    <td class="meaning">
                      an E element whose "foo" attribute value contains the
                      substring "bar"
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E[foo|="en"]</td>
                    <td class="meaning">
                      an E element whose "foo" attribute has a hyphen-separated
                      list of values beginning (from the left) with "en"
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#attribute-selectors"
                        >Attribute selectors</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:root</td>
                    <td class="meaning">an E element, root of the document</td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-child(n)</td>
                    <td class="meaning">
                      an E element, the n-th child of its parent
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-last-child(n)</td>
                    <td class="meaning">
                      an E element, the n-th child of its parent, counting from
                      the last one
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-of-type(n)</td>
                    <td class="meaning">
                      an E element, the n-th sibling of its type
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-last-of-type(n)</td>
                    <td class="meaning">
                      an E element, the n-th sibling of its type, counting from
                      the last one
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:first-child</td>
                    <td class="meaning">
                      an E element, first child of its parent
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:last-child</td>
                    <td class="meaning">
                      an E element, last child of its parent
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:first-of-type</td>
                    <td class="meaning">
                      an E element, first sibling of its type
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:last-of-type</td>
                    <td class="meaning">
                      an E element, last sibling of its type
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:only-child</td>
                    <td class="meaning">
                      an E element, only child of its parent
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:only-of-type</td>
                    <td class="meaning">
                      an E element, only sibling of its type
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:empty</td>
                    <td class="meaning">
                      an E element that has no children (including text nodes)
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">
                      E:link<br />
                      E:visited
                    </td>
                    <td class="meaning">
                      an E element being the source anchor of a hyperlink of
                      which the target is not yet visited (:link) or already
                      visited (:visited)
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#link"
                        >The link pseudo-classes</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern">
                      E:active<br />
                      E:hover <br />
                      E:focus
                    </td>
                    <td class="meaning">
                      an E element during certain user actions
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#useraction-pseudos"
                        >The user action pseudo-classes</a
                      >
                    </td>
                    <td class="origin">1 and 2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:target</td>
                    <td class="meaning">
                      an E element being the target of the referring URI
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#target-pseudo"
                        >The target pseudo-class</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:lang(fr)</td>
                    <td class="meaning">
                      an element of type E in language "fr" (the document
                      language specifies how language is determined)
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#lang-pseudo"
                        >The :lang() pseudo-class</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">
                      E:enabled<br />
                      E:disabled
                    </td>
                    <td class="meaning">
                      a user interface element E which is enabled or disabled
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#UIstates"
                        >The UI element states pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">
                      E:checked
                      <!--<br>E:indeterminate-->
                    </td>
                    <td class="meaning">
                      a user interface element E which is checked
                      <!-- or in an
                  indeterminate state-->(for instance a radio-button or
                      checkbox)
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#UIstates"
                        >The UI element states pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E::first-line</td>
                    <td class="meaning">
                      the first formatted line of an E element
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#first-line"
                        >The ::first-line pseudo-element</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern">E::first-letter</td>
                    <td class="meaning">
                      the first formatted letter of an E element
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#first-letter"
                        >The ::first-letter pseudo-element</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern">E::before</td>
                    <td class="meaning">
                      generated content before an E element
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#gen-content"
                        >The ::before pseudo-element</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E::after</td>
                    <td class="meaning">
                      generated content after an E element
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#gen-content"
                        >The ::after pseudo-element</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E.warning</td>
                    <td class="meaning">
                      an E element whose class is "warning" (the document
                      language specifies how class is determined).
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#class-html"
                        >Class selectors</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern">E#myid</td>
                    <td class="meaning">
                      an E element with ID equal to "myid".
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#id-selectors"
                        >ID selectors</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:not(s)</td>
                    <td class="meaning">
                      an E element that does not match simple selector s
                    </td>
                    <td class="described">
                      <a href="https://www.w3.org/TR/selectors/#negation"
                        >Negation pseudo-class</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E F</td>
                    <td class="meaning">
                      an F element descendant of an E element
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#descendant-combinators"
                        >Descendant combinator</a
                      >
                    </td>
                    <td class="origin">1</td>
                  </tr>
                  <tr>
                    <td class="pattern">E &gt; F</td>
                    <td class="meaning">an F element child of an E element</td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#child-combinators"
                        >Child combinator</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E + F</td>
                    <td class="meaning">
                      an F element immediately preceded by an E element
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#adjacent-sibling-combinators"
                        >Adjacent sibling combinator</a
                      >
                    </td>
                    <td class="origin">2</td>
                  </tr>
                  <tr>
                    <td class="pattern">E ~ F</td>
                    <td class="meaning">
                      an F element preceded by an E element
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#general-sibling-combinators"
                        >General sibling combinator</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="greyvsgray">
            <div class="question">
              <p>
                In CSS, the color keywords <span class="value">grey</span> and
                <span class="value">gray</span> are interchangable. True or
                false?
              </p>
            </div>

            <div class="answer">
              <a href="https://drafts.csswg.org/css-color/#valdef-color-gray"
                >True</a
              >, though apparently Internet Explorer treated them differently at
              some point.
            </div>
          </li>

          <li id="browserdiffs_canIuse">
            <div class="question">
              <p>
                What are good resources to see which CSS features are available
                in which browsers? (browser compatibility check)
              </p>
            </div>

            <div class="answer">
              <p>Besides MDN, there is:</p>
              <ul>
                <li><a href="http://caniuse.com/">CanIUse.Com</a></li>
                <li>
                  <a href="https://quirksmode.org/compatibility.html"
                    >Quirksmode - compatibility overview</a
                  >
                </li>
              </ul>
            </div>
          </li>

          <li id="define_CSShack">
            <div class="question">
              <p>What is a CSS "hack"?</p>
            </div>

            <div class="answer">
              <p>
                A CSS hack is browser-specific code designed to combat an error.
                But that may cause new errors. The best practice for hacks is to
                place them in a separate stylesheet.
              </p>
            </div>
          </li>

          <li id="synprof_IEconditionalcomments">
            <div class="question">
              <p>
                What is the CSS syntax specific to Internet Explorer 9 and
                earlier?
              </p>
            </div>

            <div class="answer">
              <p>
                Internet Explorer versions before IE 10 make the use of
                conditional comments. Here's a good explanation from Quirksmode:
                "Older IE versions frequently need some extra CSS in order to
                show your pages right. Conditional comments are the best way to
                add this CSS, since the system is explicitly designed for this
                use case.
              </p>

              <ol>
                <li>
                  Their basic structure is the same as an HTML comment (<span
                    class="comment"
                    >&lt;!-- --&gt;</span
                  >). Therefore all other browsers will see them as normal
                  comments and will ignore them entirely.
                </li>
                <li>
                  IE, though, has been programmed to recognize the special
                  <span class="comment">&lt;!--[if IE]&gt;</span> syntax,
                  resolves the <code>if</code> and parses the content of the
                  conditional comment as if it were normal page content.
                </li>
                <li>
                  Since conditional comments use the <b>HTML</b> comment
                  structure, they can only be included in HTML files, and not in
                  CSS files. I'd have preferred to put the special styles in the
                  CSS file, but that's impossible. You can also put an entire
                  new
                  <code class="HTML"
                    ><span class="element">&lt;link&gt;</span></code
                  >
                  tag in the conditional comment referring to an extra style
                  sheet."
                </li>
              </ol>

              <p>
                Therefore, if you wanted to invoke a stylesheet specific for IE
                9 and earlier, you could write:
              </p>

              <code class="block HTML">
                <span class="comment">&lt;!--[if lte IE 9]&gt;</span><br />
                <span class="element"
                  >&lt;link <span class="attribute">href</span> =
                  <span class="value">"_css/JGIEStyles.css"</span>&gt;</span
                ><br />
                <span class="comment">&lt;![endif]--&gt;</span>
              </code>

              <p>
                "lte" means "less than or equal to". You can also use "lt" for
                less than, and "gt" and "gte" for greater than counterparts.
              </p>
              <p>
                Finally, note one more with different syntax - this one means
                the inverse, that all browsers which are <em>not</em> IE 9 or
                earlier will display the following CSS:
              </p>

              <code class="block HTML">
                <span class="comment">&lt;!--[if !IE]&gt; --&gt;</span><br />
                <span class="element"
                  >&lt;link <span class="attribute">href</span> =
                  <span class="value">"_css/JGNonIEstyles.css"</span>&gt;</span
                ><br />
                <span class="comment">&lt;!-- &lt;![endif]--&gt;</span><br />
              </code>

              <p>
                Starting with IE 10 conditional comments are no longer
                supported.
              </p>
            </div>
          </li>

          <li id="general_classandidpurpose">
            <div class="question">
              <p>
                Is the purpose of
                <code class="HTML"><span class="attribute">class</span></code>
                and
                <code class="HTML"><span class="attribute">id</span></code> more
                to (1) create styling hooks or (2) give your elements more
                meaning?
              </p>
            </div>

            <div class="answer">
              <p>(2).</p>
            </div>
          </li>

          <li id="general_WhenToGiveAnID">
            <div class="question">
              <p>
                What question should you ask yourself before deciding to create
                a new <code class="HTML"><span class="attribute">id</span></code
                >?
              </p>
            </div>

            <div class="answer">
              <p>
                Is the content unique, and if so, does it need to be identified?
              </p>
            </div>
          </li>

          <li id="synprof_attselRequireElement">
            <div class="question">
              <p>
                An attribute selector requires an element as a prefix. True or
                false?
              </p>
            </div>

            <div class="answer">
              <p>False. The below is a perfectly valid selector:</p>
              <code class="block CSS">
                <span class="selector">[role="main"]</span> { /*..rules here..*/
                }
              </code>
            </div>
          </li>

          <li id="synprof_attselcaseinsensitive">
            <div class="question">
              <p>
                If the attribute selectors which take
                <a href="#allselectortypes"
                  >string arguments are case sensitive</a
                >, is it possible to make them case insensitive?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes - you would add an "i" to the end of the expression within
                the brackets.
              </p>
              <code class="block CSS">
                <span class="comment">/*Syntax:*/</span><br />
                [attr operator value i]<br /><br />
                <span class="comment">/*Example:*/</span><br />
                <span class="selector">a[title="kibble" i]</span> { }
              </code>
            </div>
          </li>

          <li id="synprof_casestudylinkstyling">
            <div class="question">
              <p>
                Given
                <a href="#allselectortypes"
                  >all the attribute value styling options available</a
                >, what would be the best way to apply red font color to only
                external links?
              </p>
            </div>

            <div class="answer">
              <p>
                See below. Only external links start with "http://", therefore
                we can use the begins with carat (^) in conjunction with an
                attribute selector.
              </p>
              <code class="block CSS">
                <span class="selector"
                  >a[href^="http://"], a[href^="https://"]</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >red</span
                >;<br />
                }
              </code>
            </div>
          </li>

          <li id="synprof_CSSpseudoclass">
            <div class="question">
              <p>In CSS, what is a "pseudo-class"?</p>
            </div>

            <div class="answer">
              <p>
                From MDN: "A CSS pseudo-class is a keyword added to selectors
                that specifies a special state of the element to be selected.
                For example :hover will apply a style when the user hovers over
                the element specified by the selector. Pseudo-classes, together
                with <span class="toDo">pseudo-elements</span>, let you apply a
                style to an element not only in relation to the content of the
                document tree, but also in relation to external factors like the
                history of the navigator (:visited, for example), the status of
                its content (like :checked on some form elements), or the
                position of the mouse (like :hover which lets you know if the
                mouse is over an element or not)."
              </p>

              <code class="block CSS">
                <span class="comment">/*Syntax:*/</span><br />
                selector:pseudo-class { <br />
                &nbsp;&nbsp;property: value;<br />
                } <br /><br />
                <span class="comment"
                  >/*Example - the text will turn red on any hyperlink when the
                  mouse is hovering over it:*/</span
                ><br />
                <span class="selector">a</span>:<span class="pseudoclass"
                  >hover</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >red</span
                >;<br />
                }
              </code>
              <p>
                Pseudo-class selectors "allow you to target elements or
                instances that lie outside of the DOM or are too specific for
                simple selectors to target." (Williamson)
              </p>
            </div>
          </li>

          <li id="general_pseudoclasstypes">
            <div class="question">
              <p>What are the different kinds of pseudo-class selectors?</p>
            </div>

            <div class="answer">
              <h3>Dynamic Pseudo-Classes</h3>
              <p>
                "Dynamic pseudo-classes classify elements on characteristics
                other than their name, attributes, or content, in principle
                characteristics that cannot be deduced from the document tree."
              </p>

              <ul>
                <h4>Dynamic Pseudo-Classes - Links</h4>
                <li>
                  <span class="pseudoclass">:link</span> - applies to links that
                  have not yet been visited.
                </li>
                <li>
                  <span class="pseudoclass">:visited</span> - applies once the
                  link has been visited by the user.
                </li>
              </ul>

              <ul>
                <h4>Dynamic Pseudo-Classes - User Action</h4>
                <li>
                  <span class="pseudoclass">:hover</span> - applies while the
                  user designates an element with a pointing device, but does
                  not necessarily activate it. For example, a visual user agent
                  could apply this pseudo-class when the cursor (mouse pointer)
                  hovers over a box generated by the element.
                </li>
                <li>
                  <span class="pseudoclass">:active</span> - applies while an
                  element is being activated by the user. For example, between
                  the times the user presses the mouse button and releases it.
                  On systems with more than one mouse button, :active applies
                  only to the primary or primary activation button (typically
                  the "left" mouse button).
                  <code class="block CSS">
                    <span class="comment"
                      >/*At this point it's very important to note that link
                      styling should be done in the order specified above and
                      below:*/<br /><br />
                      :link<br />
                      :visited<br />
                      :hover<br />
                      :active<br /><br />
                      Think of it like LoVe-HAte. Also, you can group
                      pseudo-class rules using normal grouping selector
                      syntax:*/</span
                    ><br /><br />
                    <span class="selector">a</span>:<span class="pseudoclass"
                      >link</span
                    >, <span class="selector">a</span>:<span class="pseudoclass"
                      >visited</span
                    >
                    { <br />
                    &nbsp;&nbsp;<span class="property">color</span>:<span
                      class="value"
                      >blue</span
                    >;<br />
                    }
                  </code>
                </li>
                <li>
                  <span class="pseudoclass">:focus</span> - applies while an
                  element has the focus (accepts keyboard or mouse events, or
                  other forms of input) - such as an
                  <span class="toDo">input box </span>and the user clicks into
                  it to type something.
                  <code class="block CSS">
                    <span class="selector">input</span>:<span
                      class="pseudoclass"
                      >focus</span
                    >
                    { <br />
                    &nbsp;&nbsp;<span class="property">outline</span>:<span
                      class="value"
                      >aqua solid 2px</span
                    >;<br />
                    }
                  </code>
                  <samp>
                    <input
                      type="text"
                      value="This box will glow aqua blue when you click inside of it (:focus)."
                      size="50"
                    />
                  </samp>
                </li>
              </ul>

              <h3>UI Element State Pseudo-Classes</h3>
              <ul>
                <li>
                  <span class="pseudoclass">:enabled</span> - represents user
                  interface elements that are in an enabled state; such elements
                  have a corresponding disabled state..."An element is enabled
                  if it can be activated (e.g. selected, clicked on or accept
                  text input) or accept focus. The element also has a disabled
                  state, in which it can't be activated or accept focus."
                </li>
                <li>
                  <span class="pseudoclass">:disabled</span> - see
                  <span class="pseudoclass">:enabled</span>.
                </li>
                <li>
                  <span class="pseudoclass">:checked</span> - Radio and checkbox
                  elements can be toggled by the user. Some menu items are
                  "checked" when the user selects them. When such elements are
                  toggled "on" this pseudo-class applies.
                  <code class="block CSS">
                    <span class="selector">input</span>:<span
                      class="pseudoclass"
                      >checked</span
                    >
                    { <br />
                    &nbsp;&nbsp;<span class="property">outline</span>:<span
                      class="value"
                      >green solid 2px</span
                    >;<br />
                    }
                  </code>
                  <samp>
                    <p>
                      This checkbox will have a solid green outline when
                      checked.
                    </p>
                    <input type="checkbox" />
                  </samp>
                </li>
                <li>
                  <span class="pseudoclass">:indeterminate</span> - Radio and
                  checkbox elements can be toggled by the user, but are
                  sometimes in an indeterminate state, neither checked nor
                  unchecked. This can be due to an element attribute, or DOM
                  manipulation.
                </li>
              </ul>

              <h3>Structural Pseudo-Classes</h3>
              <p>
                Structural pseudo-classes "permit selection based on extra
                information that lies in the document tree but cannot be
                represented by other simple selectors or combinators." A lot of
                pattern matching. If no description is given for a member of
                this list below, click the name for a link to the full
                treatement.
              </p>
              <ul>
                <li>
                  <span class="pseudoclass">:root</span> - "represents an
                  element that is the root of the document." This is, in HTML,
                  the
                  <code class="HTML"
                    ><span class="element">&lt;html&gt;</span></code
                  >
                  element.
                </li>
                <li><span class="pseudoclass">:nth-child()</span></li>
                <li><span class="pseudoclass">:nth-last-child()</span></li>
                <li><span class="pseudoclass">:nth-of-type()</span></li>
                <li><span class="pseudoclass">:nth-last-of-type()</span></li>
                <li><span class="pseudoclass">:first-child</span></li>
                <li><span class="pseudoclass">:last-child</span></li>
                <li><span class="pseudoclass">:first-of-type</span></li>
                <li><span class="pseudoclass">:last-of-type</span></li>
                <li><span class="pseudoclass">:only-child</span></li>
                <li><span class="pseudoclass">:only-of-type</span></li>
                <li><span class="pseudoclass">:empty</span></li>
              </ul>

              <h3>The Target Pseudo-Class</h3>
              <ul>
                <li>
                  <p>
                    <span class="pseudoclass">:target</span> - represents an
                    element that is being linked to in the URL of the browser.
                    For instance, on this page, if you were to go to the
                    following address for this specific question...
                  </p>
                  <samp>
                    <p>
                      <a href="#general_pseudoclasstypes"
                        >Go to top of this question</a
                      >
                    </p>
                  </samp>
                  <p>
                    ...the whole question/answer exchange (which is housed in an
                    <code class="HTML"
                      ><span class="element">&lt;li&gt;</span></code
                    >
                    element) would have a dashed red border around it, because
                    it was specifically targeted in the URL. This would only
                    target
                    <code class="HTML"
                      ><span class="element">&lt;li&gt;</span></code
                    >
                    elements which are targets, however. If you wanted to apply
                    the rule to all elements when targeted in the URL of the
                    browser, then it is perfectly acceptable to use
                    <span class="pseudoclass">:target</span> with no qualifiers
                    beforehand.
                  </p>
                  <p></p>
                  <code class="block CSS">
                    <span class="selector">li</span>:<span class="pseudoclass"
                      >target</span
                    >
                    { <br />
                    &nbsp;&nbsp;<span class="property">border</span>:<span
                      class="value"
                      >2px dashed red</span
                    >;<br />
                    }
                  </code>
                </li>
              </ul>
            </div>
          </li>

          <li id="pseudoprof_first-child">
            <div class="question">
              <p>
                How would I target for styling only elements which are the first
                child of their parent element? For instance, would would I
                target the below
                <code class="HTML"
                  ><span class="element">&lt;h2&gt;</span></code
                >
                element?
              </p>
              <code class="block HTML">
                <span class="element">&lt;section&gt;</span><br />
                &nbsp;&nbsp;<span class="hele hghlt">&lt;h2&gt;</span>First
                Heading<span class="hele hghlt">&lt;/h2&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;h2&gt;</span>Second
                Heading<span class="element">&lt;/h2&gt;</span><br />
                <span class="element">&lt;/section&gt;</span><br />
              </code>
            </div>

            <div class="answer">
              <p>
                You would use the <span class="pseudoclass">:first-child</span>
                <a href="#synprof_CSSpseudoclass">pseudo-class</a> selector.
              </p>
              <code class="block CSS">
                <span class="selector">h2</span>:<span class="pseudoclass"
                  >first-child</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">font-style</span>:<span
                  class="value"
                  >italic</span
                >;<br />
                }
              </code>
              <samp id="pseudoprof_first-child_ex1_results">
                <section>
                  <h2>First Heading</h2>
                  <h2>Second Heading</h2>
                </section>
              </samp>
              <p>
                Note that this would not work in the following scenario because
                the "First Heading"
                <code class="HTML"
                  ><span class="element">&lt;h2&gt;</span></code
                >
                is not the first child of its parent - the paragraph is:
              </p>
              <code class="block HTML" id="pseudoprof_first-child_ex1">
                <span class="element">&lt;section&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;p&gt;</span>This is an
                introductory paragraph.<span class="element">&lt;/p&gt;</span
                ><br />
                &nbsp;&nbsp;<span class="element">&lt;h2&gt;</span>First
                Heading<span class="element">&lt;/h2&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;h2&gt;</span>Second
                Heading<span class="element">&lt;/h2&gt;</span><br />
                <span class="element">&lt;/section&gt;</span><br />
              </code>
              <samp id="pseudoprof_first-child_ex2_results">
                <section>
                  <p>This is an introductory paragraph.</p>
                  <h2>First Heading</h2>
                  <h2>Second Heading</h2>
                </section>
              </samp>
              <p>
                With this in mind you can easily infer the function of the
                pseudo-class <span class="pseudoclass">:last-child</span>.
              </p>
            </div>
          </li>

          <li id="pseudoprof_first-of-type">
            <div class="question">
              <p>
                How would I target for styling only elements which are the first
                of their type within their parent element? For instance, would
                would I target the below
                <code class="HTML"
                  ><span class="element">&lt;h2&gt;</span></code
                >
                element and all other
                <code class="HTML"
                  ><span class="element">&lt;h2&gt;</span></code
                >
                elements which are the first within their parents?
              </p>
              <code class="block HTML">
                <span class="element">&lt;section&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;p&gt;</span>This is an
                introductory paragraph.<span class="element">&lt;/p&gt;</span
                ><br />
                &nbsp;&nbsp;<span class="hele hghlt">&lt;h2&gt;</span>First
                Heading<span class="hele hghlt">&lt;/h2&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;h2&gt;</span>Second
                Heading<span class="element">&lt;/h2&gt;</span><br />
                <span class="element">&lt;/section&gt;</span><br />
              </code>
            </div>

            <div class="answer">
              <p>
                You would use the
                <span class="pseudoclass">:first-of-type</span>
                <a href="#synprof_CSSpseudoclass">pseudo-class</a> selector. As
                it suggests, this applies to only the first selector of its type
                within its parent element.
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*Make every first h2 within a parent element have a pink
                  background.*/</span
                ><br /><br />
                <span class="selector">h2</span>:<span class="pseudoclass"
                  >first-of-type</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">background-color</span>:<span
                  class="value"
                  >pink</span
                >;<br />
                }
              </code>
              <samp id="pseudoprof_first-of-type_ex1_results">
                <section>
                  <p>This is an introductory paragraph.</p>
                  <h2>First Heading</h2>
                  <h2>Second Heading</h2>
                </section>
              </samp>
              <p>
                With this in mind you can easily infer the function of the
                pseudo-classes
                <span class="pseudoclass">:last-of-type</span> and
                <span class="pseudoclass">:only-of-type</span>.
              </p>
            </div>
          </li>

          <li id="pseudoprof_only-child">
            <div class="question">
              <p>
                How would I target for styling only elements which the only
                child of their parent element? For instance, would would I
                target the below
                <code class="HTML"><span class="element">&lt;p&gt;</span></code>
                element?
              </p>
              <p>
                Let's assume the site's logic is that if a paragraph stands
                alone within its section, then it should "pop" as a really
                important point that should be viewed if you have a reader who
                skims.
              </p>
              <code class="block HTML">
                <span class="element">&lt;section&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;p&gt;</span>Bananas are
                good.<span class="element">&lt;/p&gt;</span><br />
                &nbsp;&nbsp;<span class="element">&lt;p&gt;</span>Blueberries
                are good.<span class="element">&lt;/p&gt;</span><br />
                <span class="element">&lt;/section&gt;</span><br /><br />
                <span class="element">&lt;section&gt;</span><br />
                &nbsp;&nbsp;<span class="hele hghlt">&lt;p&gt;</span>Remember
                this: fruits are good.<span class="hele hghlt">&lt;/p&gt;</span
                ><br />
                <span class="element">&lt;/section&gt;</span><br /><br />
              </code>
            </div>

            <div class="answer">
              <p>
                You would use the <span class="pseudoclass">:only-child</span>
                <a href="#synprof_CSSpseudoclass">pseudo-class</a> selector. As
                it suggests, this applies to only elements which are the sole
                children of their parent.
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*Bold every paragraph which is the only child of its parent
                  - remember, this is NOT the same as "bold every paragraph
                  which is the only paragraph within its parent" - in that case,
                  you would want to use :only-of-type.*/</span
                ><br /><br />
                <span class="selector">p</span>:<span class="pseudoclass"
                  >only-child</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">font-weight</span>:<span
                  class="value"
                  >bold</span
                >;<br />
                }
              </code>
              <samp id="pseudoprof_only-child_ex1_results">
                <section>
                  <p>Bananas are good.</p>
                  <p>Blueberries are good.</p>
                </section>

                <section>
                  <p>Remember this: fruits are good.</p>
                </section>
              </samp>
            </div>
          </li>

          <li id="pseudoprof_nth-child">
            <div class="question">
              <p>
                How can I specify CSS styling rules for the Xth child (where X
                is a variable representing a number), or Xth-of-type within a
                parent? Is it possible?
              </p>
            </div>

            <div class="answer">
              <p>
                Indeed it is, though the variable name used in CSS syntax is N,
                not X.
              </p>
              <code class="block CSS"
                ><span class="cgen">
                  &lt;:nth-child( &lt;an-plus-b&gt; [ of &lt;selector&gt;# ]? )
                  { style properties }&gt;#<br /><br />
                  where <br />
                  &lt;an-plus-b&gt; = An+B | even | odd<br /><br /> </span
              ></code>
              <p>
                Let's start with simple alternation of colors. In which case the
                perfect example is a banded table:
              </p>
              <table id="pseudoprof_nth-child_ex1_results">
                <thead>
                  <tr>
                    <th>Pattern</th>
                    <th>Meaning</th>
                    <th class="described">Described in section</th>
                    <th class="origin">First defined in CSS level</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="pattern">E:nth-child(n)</td>
                    <td class="meaning">
                      an E element, the n-th child of its parent
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-last-child(n)</td>
                    <td class="meaning">
                      an E element, the n-th child of its parent, counting from
                      the last one
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-of-type(n)</td>
                    <td class="meaning">
                      an E element, the n-th sibling of its type
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                  <tr>
                    <td class="pattern">E:nth-last-of-type(n)</td>
                    <td class="meaning">
                      an E element, the n-th sibling of its type, counting from
                      the last one
                    </td>
                    <td class="described">
                      <a
                        href="https://www.w3.org/TR/selectors/#structural-pseudos"
                        >Structural pseudo-classes</a
                      >
                    </td>
                    <td class="origin">3</td>
                  </tr>
                </tbody>
              </table>

              <p>
                The above can be accomplished in two ways, but only because the
                table rows (<code class="HTML"
                  ><span class="element">&lt;tr&gt;</span></code
                >) are separated from the header row by partioning them into
                <code class="HTML"
                  ><span class="element">&lt;thead&gt;</span></code
                >
                and
                <code class="HTML"
                  ><span class="element">&lt;tbody&gt;</span></code
                >
                sections. If this were not the case then we would need different
                rules, because the header row would count as the first child of
                the table.
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*We want to start banding at data row number 2 and from
                  there color every other row grey. Both of the below will
                  work.*/</span
                ><br /><br />
                <span class="comment"
                  >/*A. Style every &lt;tr&gt; whose ordinal position within its
                  parent is an even number.*/</span
                ><br /><br />
                <span class="selector">tr</span>:<span class="pseudoclass"
                  >nth-child(even)</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">background</span>:<span
                  class="value"
                  >gainsboro</span
                >;<br />
                } <br /><br />
                <span class="comment"
                  >/*B. Style every &lt;tr&gt; whose ordinal position within its
                  parent is a multiple of 2. The "n" is what triggers the
                  multiple. If only "2" were within the parentheses then this
                  would only apply to the second child.*/</span
                ><br /><br />
                <span class="selector">tr</span>:<span class="pseudoclass"
                  >nth-child(2n)</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">background</span>:<span
                  class="value"
                  >gainsboro</span
                >;<br />
                } <br /><br />
              </code>
              <p>
                For an example of a more complicated example, let's revisit this
                list of the CSS properties which inherit. There are 37 total
                items in this list. The first ten are red, and the last ten are
                purple, and however many are in between are blue:
              </p>
              <ul id="pseudoprof_nth-child_ex2_results">
                <li class="CSS property">border-collapse</li>
                <li class="CSS property">border-spacing</li>
                <li class="CSS property">caption-side</li>
                <li class="CSS property">color</li>
                <li class="CSS property">cursor</li>
                <li class="CSS property">direction</li>
                <li class="CSS property">empty-cells</li>
                <li class="CSS property">font-family</li>
                <li class="CSS property">font-size</li>
                <li class="CSS property">font-style</li>
                <li class="CSS property">font-variant</li>
                <li class="CSS property">font-weight</li>
                <li class="CSS property">font-size-adjust</li>
                <li class="CSS property">font-stretch</li>
                <li class="CSS property">font</li>
                <li class="CSS property">letter-spacing</li>
                <li class="CSS property">line-height</li>
                <li class="CSS property">list-style-image</li>
                <li class="CSS property">list-style-position</li>
                <li class="CSS property">list-style-type</li>
                <li class="CSS property">list-style</li>
                <li class="CSS property">orphans</li>
                <li class="CSS property">quotes</li>
                <li class="CSS property">tab-size</li>
                <li class="CSS property">text-align</li>
                <li class="CSS property">text-align-last</li>
                <li class="CSS property">text-decoration-color</li>
                <li class="CSS property">text-indent</li>
                <li class="CSS property">text-justify</li>
                <li class="CSS property">text-shadow</li>
                <li class="CSS property">text-transform</li>
                <li class="CSS property">visibility</li>
                <li class="CSS property">white-space</li>
                <li class="CSS property">widows</li>
                <li class="CSS property">word-break</li>
                <li class="CSS property">word-spacing</li>
                <li class="CSS property">word-wrap</li>
              </ul>
              <p>
                This is the result of three rules. Note that the offset/starting
                point (B) comes after the multiple (An), which is a little
                confusing.
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*A. Apply this style to every child (1) starting with the
                  10th child and going backwards (adding a negative increment).
                  Note that you must add a negative (you cannot simply
                  subtract)*/</span
                ><br /><br />
                <span class="selector">li</span>:<span class="pseudoclass"
                  >nth-child(-1n+10)</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >red</span
                >;<br />
                } <br /><br />
                <span class="comment"
                  >/*B. Apply this style to every child (1) starting with the
                  10th child FROM THE LAST CHILD (i.e. if this were SQL,
                  COUNT(*)-10) and going backwards (9th from the last, 8th from
                  the last) until the end.<br /><br />
                  We are still going "backwards", using -1n+, because when using
                  the nth-last-child the primary point of reference is the final
                  child, not the first.*/</span
                ><br /><br />
                <span class="selector">li</span>:<span class="pseudoclass"
                  >nth-last-child(-1n+10)</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >purple</span
                >;<br />
                } <br /><br />
                <span class="comment"
                  >/*C. Apply this style to children which meet both of these
                  criteria:<br /><br />
                  1. They are the 11th or greater child in the list.<br />
                  2. They are 11th or more from the end of the list.*/</span
                ><br /><br />
                <span class="selector">li</span>:<span class="pseudoclass"
                  >nth-child(1n+11):nth-last-child(1n+11)</span
                >
                { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >blue</span
                >;<br />
                } <br /><br />
              </code>
              <p>
                The last example is a little mind-bending - you can combine
                nth-child selectors if the elements they target intersect at
                some point, i.e., if the elements meet the conditions of both
                criteria. Think of it as similar to the VBA
                Application.Intersect Method.
              </p>
              <p>
                Also remember that the reference points of
                <span class="pseudoclass">:nth-child()</span> and
                <span class="pseudoclass">:nth-last-child()</span> are
                completely different, which is why you can use the same value of
                1n+11 within the parentheses for both. Here's a visualization
                below. Arrows represent the direction of the increment when the
                increment value is positive:
              </p>
              <img src="_images/pseudoprof_nth-child_ex2_results.png" />
            </div>
          </li>

          <li id="pseudoprof_nth-child_startcount">
            <div class="question">
              <p>What is wrong with the following CSS rule?</p>
              <code class="block CSS">
                :<span class="pseudoclass">nth-child(-2n)</span> { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >blue</span
                >;<br />
                } <br /><br />
              </code>
            </div>

            <div class="answer">
              <p>
                If you do not specify a value for B in the syntax An+B, then the
                default starting number is 1. One minus two is negative one, and
                there is no such thing as an element which occupies a negative
                ordinal position in a list.
              </p>
              <p>
                Negative increments will only work in conjunction with a value
                for B. If we are counting backwards, then we need to count
                backwards from a number higher than 1.
              </p>
            </div>
          </li>

          <li id="synprof_pseudoelement">
            <div class="question">
              <p>
                What is a pseudo-element, and how does it differ from a
                pseudo-class?
              </p>
            </div>

            <div class="answer">
              <p>
                While pseudo-classes (introducted with a single colon :)
                describe a special state, pseudo elements (introduced with a
                double colon ::) allow you to style parts of an element that are
                not the entirety of an element. For example, the "<span
                  class="cpse"
                  >::first-line </span
                >pseudo-element targets only the first line of an element
                specified by the selector."
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*Make the first line of every paragraph bold.*/</span
                ><br />
                <span class="selector">p</span
                ><span class="cpse">::first-line</span> { <br />
                &nbsp;&nbsp;<span class="property">font-weight</span>:<span
                  class="value"
                  >bold</span
                >;<br />
                } <br /><br />
                <span class="comment"
                  >/*Do a "drop-cap" for the first letter of paragraphs with the
                  class "sectionopener".*/</span
                ><br />
                <span class="selector">.sectionopener</span
                ><span class="cpse">::first-letter </span> { <br />
                &nbsp;&nbsp;<span class="property">font-size</span>:<span
                  class="value"
                  >50px</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-family</span>:<span
                  class="value"
                  >Georgia,"Times New Roman",Times,serif</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-weight</span>:<span
                  class="value"
                  >normal</span
                >;<br />
                &nbsp;&nbsp;<span class="property">line-height</span>:<span
                  class="value"
                  >0.5</span
                >;<br />
                &nbsp;&nbsp;<span class="property">margin-right</span>:<span
                  class="value"
                  >5px</span
                >;<br />
                &nbsp;&nbsp;<span class="property">margin-top</span>:<span
                  class="value"
                  >9px</span
                >;<br />
                &nbsp;&nbsp;<span class="property">float</span>:<span
                  class="value"
                  >left</span
                >;<br />
                }
              </code>
              <samp id="synprof_pseudoelement_ex1_results">
                <p>
                  No one knows how many sandhogs are, at any given moment,
                  working beneath the streets of New York City, but one morning
                  this winter half a dozen men could be spotted gathering around
                  a hole on the northwest corner of Tenth Avenue and Thirtieth
                  Street. The hole, surrounded by a tall aluminum fence, was
                  thirty feet wide and reinforced with concrete. A priest had
                  visited months before, to offer a brief prayer: “May God be
                  with all ye who enter here, that the earth shall return ye
                  safely.” Now, as the sun rose, the men stepped from the
                  snow-covered ground into a green metal cage, which was
                  suspended over the chasm by an enormous winch. They wore
                  yellow slickers and rubber boots with steel tips; they
                  carried, among other things, flashlights, scissors,
                  cigarettes, cough drops, knives, extra socks, and several
                  twenty-pound crates marked “explosives.”
                </p>
              </samp>
            </div>
          </li>

          <li id="pseudoprof_moreelements">
            <div class="question">
              <p>
                Is there a way to automatically generate content around elements
                based on CSS rules? For instance, could I have all elements with
                a class of
                <code class="HTML"><span class="attribute">pending</span></code>
                be followed with text that says "(pending)"?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes - this would be accomplished with the
                <span class="cpse">::after</span> pseudo-element (or
                <span class="cpse">::before</span>, if you wanted the text to
                precede the element). Here's how it would work:
              </p>
              <code class="block CSS">
                <span class="comment"
                  >/*Make sure you leave an extra space at the
                  beginning.*/</span
                ><br />
                <span class="selector">.pending</span
                ><span class="cpse">::after</span> { <br />
                &nbsp;&nbsp;<span class="property">content</span>:<span
                  class="value"
                  >" (pending)"</span
                >;<br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >red</span
                >;<br />
                }
              </code>
              <samp id="pseudoprof_moreelements_ex1_results">
                <dl>
                  <dt>Free Agents Signed This Year</dt>
                  <dd>J.J. Redick</dd>
                  <dd>Paul George</dd>
                  <dd class="pending">Boris Diaw</dd>
                </dl>
              </samp>
              <p>
                If you inspect the HTML for the above, you will see that the
                word (pending) is not hard coded into the definition list, nor
                is the red styling.
              </p>
              <p>
                You can also use it in conjunction with
                <span class="toDo">the attr() CSS function</span> in order to
                display the value of the
                <code class="HTML"><span class="attribute">href</span></code>
                attribute immediately after the content of an
                <code class="HTML"><span class="element">&lt;a&gt;</span></code>
                element. Note how the function was concatenated to a one
                character space string without any operators such as &amp; or +.
                Also, the string and the function do not need to be right next
                to each other for the concatenation to work.
              </p>
              <code class="block CSS">
                <span class="selector">a</span
                ><span class="cpse">::after</span> { <br />
                &nbsp;&nbsp;<span class="property">content</span>:" "<span
                  class="value"
                  >attr(href)</span
                >;<br />
                }
              </code>
              <samp id="pseudoprof_moreelements_ex2_results">
                <dl>
                  <a href="https://developer.mozilla.org"
                    >Mozilla Developer Network</a
                  >
                </dl>
              </samp>
            </div>
          </li>

          <li id="pseudoprof_selection">
            <div class="question">
              <p>
                Is there a way to change the color of the highlighting when
                selecting text? (i.e. instead of blue?)
              </p>
            </div>

            <div class="answer">
              <p>
                Yes - this would be accomplished with the
                <span class="cpse">::selection</span> pseudo-element. In the
                below example, you can select the text and see that the text
                color is purple and the highlight color is pink.
              </p>
              <code class="block CSS">
                <span class="selector">.example</span
                ><span class="cpse">::selection</span> { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >purple</span
                >;<br />
                &nbsp;&nbsp;<span class="property">background</span>:<span
                  class="value"
                  >pink</span
                >;<br />
                }
              </code>
              <samp id="pseudoprof_selection_ex1_results">
                <p>
                  In the early twentieth century, the members of the Osage
                  Nation became the richest people per capita in the world,
                  after oil was discovered under their reservation, in Oklahoma.
                  Then they began to be mysteriously murdered off. In 1923,
                  after the death toll reached more than two dozen, the case was
                  taken up by the Bureau of Investigation, then an obscure
                  branch of the Justice Department, which was later renamed the
                  Federal Bureau of Investigation. The case was among the
                  F.B.I.’s first major homicide investigations. After J. Edgar
                  Hoover was appointed the bureau’s director, in 1924, he sent a
                  team of undercover operatives, including a Native American
                  agent, to the Osage reservation.
                </p>
              </samp>
            </div>
          </li>

          <li id="synprof_CSSimportant">
            <div class="question">
              <p>
                What is the purpose of the CSS
                <span class="value">!important</span> declaration?
              </p>
            </div>

            <div class="answer">
              <p>
                The <span class="value">!important</span> declaration, which
                immediately follows the value in a declaration, is a "nuclear
                option" for styling - use this sparingly, if the rule needs to
                win at any cost, despite any more specific rules targeting the
                same element. The only thing that can override it is a more
                specific <span class="value">!important</span> declaration. In
                the below example, red wins out even though by
                <a href="synprof_CSSRulePriority_Specificity"
                  >normal specificity rules</a
                >
                IDs are more specific.
              </p>
              <p>
                Here is MDN's advice on the use of
                <span class="value">!important</span>:
              </p>
              <ul>
                <li>
                  Always look for a way to use specificity before even
                  considering <span class="value">!important</span>.
                </li>
                <li>
                  Only use <span class="value">!important</span> on
                  page-specific CSS that overrides foreign CSS (from external
                  libraries, like Bootstrap or normalize.css).
                </li>
                <li>
                  Never use <span class="value">!important</span> when you're
                  writing a plugin/mashup.
                </li>
                <li>
                  Never use <span class="value">!important</span> on site-wide
                  CSS.
                </li>
              </ul>
              <code class="block CSS">
                <span class="selector">.legal</span> { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >red <span class="hghlt">!important</span></span
                >;<br />
                } <br /><br />
                <span class="selector">#legalparagraph13</span> { <br />
                &nbsp;&nbsp;<span class="property">color</span>:<span
                  class="value"
                  >blue</span
                >;<br />
                } <br /><br />
              </code>
              <samp
                id="synprof_CSSimportant_ex1_results"
                class="synprof_CSSimportant_ex1_results"
              >
                <p>
                  Apple’s trademarks, service marks, trade names, and trade
                  dress are valuable assets. In following these guidelines, you
                  help us protect our valuable trademark rights and strengthen
                  our corporate and brand identities. By using an Apple
                  trademark, in whole or in part, you are acknowledging that
                  Apple is the sole owner of the trademark and promising that
                  you will not interfere with Apple’s rights in the trademark,
                  including challenging Apple’s use, registration of, or
                  application to register such trademark, alone or in
                  combination with other words, anywhere in the world, and that
                  you will not harm, misuse, or bring into disrepute any Apple
                  trademark. The goodwill derived from using any part of an
                  Apple trademark exclusively inures to the benefit of and
                  belongs to Apple. Except for the limited right to use as
                  expressly permitted under these Guidelines, no other rights of
                  any kind are granted hereunder, by implication or otherwise.
                </p>
              </samp>
            </div>
          </li>

          <li id="general_CSSbestpractices_descendant">
            <div class="question">
              <p>
                If you find yourself writing descendent selectors with three or
                more component selectors, you've got a problem - consider
                revising your strategy. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True. Remember to take advantage of inheritance.</p>
            </div>
          </li>

          <li id="attprof_text-decoration">
            <div class="question">
              <p>How do I underline or strikethrough text?</p>
            </div>

            <div class="answer">
              <p>
                You would do this in CSS using the
                <code class="CSS"
                  ><span class="property">text-decoration</span></code
                >
                shorthand property, which represents three properties with the
                following syntax:
              </p>
              <code class="block CSS"
                ><span class="cgen">
                  &lt;'text-decoration-line'&gt; ||
                  &lt;'text-decoration-style'&gt; ||
                  &lt;'text-decoration-color'&gt;
                </span></code
              >
              <p>
                Note the and/or pipes - any of the options can appear in any
                order - and note that you can use multiple line styles (such as
                simultaneous <span class="value">overline</span> and
                <span class="value">underline</span>, but that is a function of
                the
                <code class="CSS"
                  ><span class="property">text-decoration-line</span></code
                >
                property, so that means that the two line styles have to be
                adjacent to work properly in the shorthand.
              </p>
              <code class="block CSS">
                <span class="selector">.goodplayers</span> { <br />
                &nbsp;&nbsp;<span class="property">text-decoration</span>:<span
                  class="value"
                  >overline underline dashed green</span
                >;<br />
                } <br /><br />
                <span class="selector">.retiredplayers</span> { <br />
                &nbsp;&nbsp;<span class="property">text-decoration</span>:<span
                  class="value"
                  >line-through red</span
                >;<br />
                } <br /><br />
              </code>
              <samp>
                <ul>
                  <li style="text-decoration: overline underline dashed green">
                    Kawhi Leonard
                  </li>
                  <li style="text-decoration: line-through red">
                    Tracy McGrady
                  </li>
                </ul>
              </samp>
            </div>
          </li>

          <li id="attprof_font-stretch">
            <div class="question">
              <p>
                What does the
                <code class="CSS"
                  ><span class="property">font-stretch</span></code
                >
                property do? Does it actually stretch a font?
              </p>
            </div>

            <div class="answer">
              <p>
                No. "Like font-feature-settings or font-variant, it is merely a
                means to choose the most appropriate face of the font, if this
                one offers several of them...If the font has no condensed or
                expanded faces, like the default "Times New Roman" on Mac OS,
                font-stretch will not have any visible effect as the only
                suitable face will be used in all cases."
              </p>
            </div>
          </li>

          <li id="attprof_fontshorthand">
            <div class="question">
              <p>
                There are a lot of CSS properties to style fonts - is there a
                shorthand to capture all of these?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes, the
                <code class="CSS"><span class="property">font</span></code>
                shorthand property captures all of these:
              </p>
              <code class="block CSS"
                ><span class="cgen">
                  [ [ &lt;'font-style'&gt; || &lt;font-variant-css21&gt; ||
                  &lt;'font-weight'&gt; || &lt;'font-stretch'&gt; ]?
                  &lt;'font-size'&gt; [ / &lt;'line-height'&gt; ]?
                  &lt;'font-family'&gt; ] | caption | icon | menu | message-box
                  | small-caption | status-bar
                </span></code
              >
              <p>
                Or in other words, here are all the properties that can be
                invoked in here. The highlighted ones are mandatory:
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Property</td>
                    <td>Initial Value</td>
                  </tr>
                </thead>
                <tbody class="propvalpair">
                  <tr>
                    <td>font-style</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>font-variant</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>font-weight</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>font-stretch</td>
                    <td>normal</td>
                  </tr>
                  <tr class="hghlt">
                    <td>font-size</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>line-height</td>
                    <td>normal</td>
                  </tr>
                  <tr class="hghlt">
                    <td>font-family</td>
                    <td>(depends on user agent)</td>
                  </tr>
                </tbody>
              </table>
              <p>
                And here are some quirks about the order of invocation in this
                rule, courtesy of MDN:
              </p>
              <ul>
                <li>
                  font-style,&nbsp;font-variant&nbsp;and&nbsp;font-weight&nbsp;must
                  precede&nbsp;font-size
                </li>
                <li>
                  font-variant&nbsp;may only specify the values defined in CSS
                  2.1, that is&nbsp;normal&nbsp;and&nbsp;small-caps
                </li>
                <li>
                  line-height&nbsp;must immediately follow&nbsp;font-size,
                  preceded by "/", like this: "16px/3" (JG thought: Necessary
                  because how else would they know which sizing instruction
                  corresponds to which property?)
                </li>
                <li>
                  font-family&nbsp;must be the last value specified. (JG
                  thought: Necessary to make it much easier to parse due to
                  potential for numerous value in this field. Once browser sees
                  the first font name it can safely take the rest of the
                  string.)
                </li>
              </ul>
              <p>
                Here's an example of how the
                <code class="CSS"><span class="property">font</span></code>
                shorthand property can save space.
              </p>
              <code class="block CSS">
                <span class="selector">.alotgoingon</span> { <br />
                &nbsp;&nbsp;<span class="property">font-style</span>:<span
                  class="value"
                  >italic</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-variant</span>:<span
                  class="value"
                  >small-caps</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-weight</span>:<span
                  class="value"
                  >bold</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-stretch</span>:<span
                  class="value"
                  >expanded</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-size</span>:<span
                  class="value"
                  >1.25em</span
                >;<br />
                &nbsp;&nbsp;<span class="property">line-height</span>:<span
                  class="value"
                  >1.5</span
                >;<br />
                &nbsp;&nbsp;<span class="property">font-family</span>:<span
                  class="value"
                  >Helvetica, Arial, sans-serif</span
                >;<br />
                } <br /><br />
                <span class="selector">.alotgoingon</span> { <br />
                &nbsp;&nbsp;<span class="property">font</span>:<span
                  class="value"
                  >italic small-caps bold expanded 1.25em/1.5 Helvetica, Arial,
                  sans-serif</span
                >;<br />
                } <br /><br />
              </code>
              <samp>
                <p id="attprof_fontshorthand_ex1_results">
                  This is a heavily-formatted paragraph.
                </p>
                <p>This is a normal paragraph.</p>
              </samp>
              <p>
                What is also useful about the
                <code class="CSS"><span class="property">font</span></code>
                shorthand is how you can use keyword values to use "templates"
                for various default fonts used by the browser in different
                scenarios:
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Value</td>
                    <td>Explanation</td>
                  </tr>
                </thead>
                <tbody class="valueextable">
                  <tr>
                    <td>caption</td>
                    <td>
                      The system font used for captioned controls (e.g.,
                      buttons, drop-downs, etc.).
                    </td>
                  </tr>
                  <tr>
                    <td>icon</td>
                    <td>The system font used to label icons.</td>
                  </tr>
                  <tr>
                    <td>menu</td>
                    <td>
                      The system font used in menus (e.g., dropdown menus and
                      menu lists).
                    </td>
                  </tr>
                  <tr>
                    <td>message-box</td>
                    <td>The system font used in dialog boxes.</td>
                  </tr>
                  <tr>
                    <td>small-caption</td>
                    <td>The system font used for labeling small controls.</td>
                  </tr>
                  <tr>
                    <td>status-bar</td>
                    <td>The system font used in window status bars.</td>
                  </tr>
                  <tr>
                    <td colspan="2">
                      Mozilla specific values: moz-window, -moz-document,
                      -moz-desktop, -moz-info, -moz-dialog, -moz-button,
                      -moz-pull-down-menu, -moz-list and -moz-field
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="attprof_hyphens">
            <div class="question">
              <p>What is the CSS property for controlling hyphenation?</p>
            </div>

            <div class="answer">
              <p>
                That would be
                <code class="CSS"><span class="property">hyphens</span></code
                >. The initial value is <span class="value">manual</span>, which
                means that words only break at actual hyphens. If you want to
                disable even that functionality, you could set the value to
                <span class="value">none</span>.
              </p>

              <p>
                If you want to hyphenate based on syllables, you can do this
                with the <span class="value">auto</span> value. Keep in mind
                this is language specific (as a good web developer you should
                always have a
                <code class="HTML"><span class="attribute">lang</span></code>
                attribute in your
                <code class="HTML"
                  ><span class="element">&lt;html&gt;</span></code
                >
                tag anyway) and will only work if an appropriate hyphenation
                dictionary is available within the browser.
              </p>
            </div>
          </li>

          <li id="attprof_text-rendering">
            <div class="question">
              <p>
                Is there a CSS property to decide how text is rendered on the
                page?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes, this is
                <code class="CSS"
                  ><span class="property">text-rendering</span></code
                >. See MDN for more details.
              </p>
            </div>
          </li>

          <li id="general_verticalcentering">
            <div class="question">
              <p>How do you vertically center a heading in a larger box?</p>
            </div>

            <div class="answer">
              <p>
                You can simply set the
                <code class="CSS"
                  ><span class="property">line-height</span></code
                >
                value to something larger than the text size. In the below
                example, the line-height is set to <span class="value">3</span>,
                which is a multiplier of the font size, and
                <code class="CSS"
                  ><span class="property">background</span></code
                >
                is set to pink.
              </p>
              <samp>
                <h3 style="line-height: 5; background: pink">HEADING</h3>
              </samp>
            </div>
          </li>

          <li id="general_excessivepadding">
            <div class="question">
              <p>
                If a block-level element has excessive padding, the content
                could spill over the bounds of the box. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                Only true if the block-level element has a fixed height value
                there are no existing CSS rules in place to overwrite the
                initial value of the
                <code class="CSS"><span class="property">overflow</span></code>
                property, which is <span class="value">visible</span>.
              </p>
              <samp style="overflow: visible">
                <div style="padding: 0 40%; height: 1em; overflow: visible">
                  This sentence cannot fit inside this fixed-height div.
                </div>
              </samp>
            </div>
          </li>

          <li id="attprof_border-collapse">
            <div class="question">
              <p>
                By default, HTML table cell borders are one in the same, so if
                you set the left border of one cell to be red, then that
                automatically means the right border of the adjacent cell is
                also red. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                False. By default, borders are separate and independent for each
                table cell. This behavior is governed by the
                <code class="CSS"
                  ><span class="property">border-collapse</span></code
                >
                property, which has an initial value of
                <span class="value">separate</span>.
              </p>
              <p>
                Let's take, for example, a table with three different 3px
                borders: a black one for the whole table, a green one for the
                cell on the left, and a red one for the cell on the right.
              </p>
              <samp>
                <table
                  style="border-collapse: separate; border: 3px solid black"
                >
                  <tbody>
                    <tr>
                      <td style="border: 3px solid green">Green</td>
                      <td style="border: 3px solid red">Red</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
              <p>
                Note how by default the rendering is faithful to our
                instructions and shows all three borders at the width we
                specified. If we want the borders to combine, or "collapse",
                then we must change the
                <code class="CSS"
                  ><span class="property">border-collapse</span></code
                >
                property to <span class="value">collapse</span>. Note how the
                exact same table looks radically different with the adjustment
                of just this one setting:
              </p>
              <code class="block CSS">
                <span class="selector">table</span> { <br />
                &nbsp;&nbsp;<span class="property">border-collapse</span>:<span
                  class="value"
                  >collapse</span
                >;<br />
                } <br /><br />
              </code>
              <samp>
                <table
                  style="border-collapse: collapse; border: 3px solid black"
                >
                  <tbody>
                    <tr>
                      <td style="border: 3px solid green">Green</td>
                      <td style="border: 3px solid red">Red</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
              <p>
                This collapse of borders shows the stacking order of formatting
                when it comes to tables. From top to bottom, here is how the
                elements stack:
              </p>
              <ol>
                <li>
                  <code class="HTML"
                    ><span class="element">&lt;td&gt;</span></code
                  >
                  and
                  <code class="HTML"
                    ><span class="element">&lt;th&gt;</span></code
                  >
                </li>
                <li>
                  <code class="HTML"
                    ><span class="element">&lt;tr&gt;</span></code
                  >
                </li>
                <li>
                  <code class="HTML"
                    ><span class="element">&lt;table&gt;</span></code
                  >
                </li>
              </ol>
              <p>
                Therefore if there is a formatting conflict between the table
                and its individual cells with reference to background color, the
                individual cells will win out. Also note that when borders
                collapse and their widths are identical but their colors differ,
                the left-most cells overtake the right-most cells:
              </p>
              <samp>
                <table
                  style="border-collapse: collapse; border: 3px solid black"
                >
                  <tbody>
                    <tr>
                      <td style="border: 3px solid green">Green</td>
                      <td style="border: 3px solid red">Red</td>
                      <td style="border: 3px solid blue">Blue</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
              <p>
                ...but, if the widths differ, then the widest border wins out.
                If we modify the red cell to have a 4px border, watch what
                happens.
              </p>
              <samp>
                <table
                  style="border-collapse: collapse; border: 3px solid black"
                >
                  <tbody>
                    <tr>
                      <td style="border: 3px solid green">Green</td>
                      <td style="border: 4px solid red">Red</td>
                      <td style="border: 3px solid blue">Blue</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
              <p>
                ...also note that this widest-border-wins rule throws the
                stacking order out of the window. Watch what happens when we
                give the underlying
                <code class="HTML"
                  ><span class="element">&lt;table&gt;</span></code
                >
                element a 5px black border:
              </p>
              <samp>
                <table
                  style="border-collapse: collapse; border: 5px solid black"
                >
                  <tbody>
                    <tr>
                      <td style="border: 3px solid green">Green</td>
                      <td style="border: 4px solid red">Red</td>
                      <td style="border: 3px solid blue">Blue</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
              <p>
                Therefore, if there is a conflict between table border styles
                within a table where
                <code class="CSS"
                  ><span class="property">border-collapse</span></code
                >
                is set to <span class="value">collapse</span>:
              </p>
              <ol>
                <li>The widest border is always on top.</li>
                <li>
                  If the widths of the borders are equal, then the above
                  stacking order dictates which wins out.
                </li>
                <li>
                  If the two items have the same width border and are of the
                  same type, then the topmost and/or leftmost item's borders
                  win.
                </li>
              </ol>
            </div>
          </li>

          <li id="attprof_border-spacing">
            <div class="question">
              <p>
                Let's say I wanted to build a table where the cells were spaced
                apart from each other, almost as if they were floating squares
                in a grid formation. Would that be possible?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes - assuming the
                <code class="CSS"
                  ><span class="property">border-collapse</span></code
                >
                property is not set to <span class="value">collapse</span>, you
                can then use the
                <code class="CSS"
                  ><span class="property">border-spacing</span></code
                >
                property. In the below example, the table cells are spaced 2em
                apart. Pixels would work too, of course, but percentages don't -
                if you think about this, it makes sense - to what would the
                percentage refer?
              </p>
              <code class="block CSS">
                <span class="selector">table</span> { <br />
                &nbsp;&nbsp;<span class="property">border</span>:<span
                  class="value"
                  >1px solid black</span
                >;<br />

                &nbsp;&nbsp;<span class="property">border-spacing</span>:<span
                  class="value"
                  >2em</span
                >;<br />
                } <br /><br />
              </code>
              <samp>
                <table style="border-collapse: separate; border-spacing: 2em">
                  <caption style="border: 1px solid black">
                    Hollywood Numbers
                  </caption>
                  <tbody>
                    <tr>
                      <td>1</td>
                      <td>2</td>
                      <td>3</td>
                    </tr>
                    <tr>
                      <td>4</td>
                      <td>5</td>
                      <td>6</td>
                    </tr>
                    <tr>
                      <td>7</td>
                      <td>8</td>
                      <td>9</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="attprof_caption-side">
            <div class="question">
              <p>
                Is there any way to change the default behavior of the table
                <code class="HTML"
                  ><span class="element">&lt;caption&gt;</span></code
                >
                element to appear below the table, rather than above?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes - using the table in an another example, we can move the
                "Hollywood Numbers" caption to the bottom of the table using the
                <code class="CSS"
                  ><span class="property">caption-side</span></code
                >
                property. Note that all values other than
                <span class="value">top</span> and
                <span class="value">bottom</span> are considered non-standard
                and not supported by any browsers except for Firefox.
              </p>
              <code class="block CSS">
                <span class="selector">table</span> { <br />
                &nbsp;&nbsp;<span class="property">caption-side</span>:<span
                  class="value"
                  >bottom</span
                >;<br />
                }
              </code>
              <samp>
                <table
                  style="
                    border-collapse: separate;
                    border-spacing: 2em;
                    caption-side: bottom;
                  "
                >
                  <caption style="border: 1px solid black">
                    Hollywood Numbers
                  </caption>
                  <tbody>
                    <tr>
                      <td>1</td>
                      <td>2</td>
                      <td>3</td>
                    </tr>
                    <tr>
                      <td>4</td>
                      <td>5</td>
                      <td>6</td>
                    </tr>
                    <tr>
                      <td>7</td>
                      <td>8</td>
                      <td>9</td>
                    </tr>
                  </tbody>
                </table>
              </samp>
            </div>
          </li>

          <li id="attprof_vertical-align">
            <div class="question">
              <p>How do I vertically align text within a table cell?</p>
            </div>

            <div class="answer">
              <p>
                Use the
                <code class="CSS"
                  ><span class="property">vertical-align</span></code
                >
                property. This also can be applied to images so that the default
                behavior of baseline alignment changes.
              </p>
            </div>
          </li>

          <li id="general_hexcolor">
            <div class="question">
              <p>
                When referring to colors, how does hexadecimal notation work?
              </p>
            </div>

            <div class="answer">
              <p>
                In mathematics and computing, hexadecimal (also base 16, or hex)
                is a positional numeral system with a radix, or base, of 16. It
                uses sixteen distinct symbols, most often the symbols 0–9 to
                represent values zero to nine, and A, B, C, D, E, F...to
                represent values ten to fifteen.
              </p>

              <p>
                Hexadecimal values [when used to define web colors] are
                represented by a six-character "hex triplet...The bytes
                represent the red, green and blue components of the color. One
                byte represents a number in the range 00 to FF (in hexadecimal
                notation), or 0 to 255 in decimal notation."
              </p>

              <p>Below is an infographic on hex colors from Lynda:</p>

              <img src="_images/general_hexcolor.png" />

              <p>
                Note that each color is represented by two hexadecimal
                characters - each character has 16 possible values
                (0123456789ABCDEF), so the total number of combinations is 16 X
                16, or 255, which is exactly the scale used by the RGB color
                model. 00 is the least intense (black, absence of color) while
                FF is the most intense (white, all colors).
              </p>

              <p>
                The below box, for example, is colored with the hex code for
                red, with the foreground text colored with the hex code for
                white:
              </p>

              <samp style="background-color: #ff0000">
                <code class="CSS" style="background-color: none">
                  <p style="color: #fff">
                    background-color: #FF0000 // color: #FFFFFF
                  </p>
                </code>
              </samp>

              <p>
                Each color is one byte, which is eight bits - therefore web
                colors are 24-bit.
              </p>
            </div>
          </li>

          <li id="general_hexcolorshorthand">
            <div class="question">
              <p>Describe the shorthand notation for hexadecimal colors.</p>
            </div>

            <div class="answer">
              <p>
                If the hex triplet is comprised of three pairs of identical
                characters, like so:
              </p>
              <samp><code>#0099CC</code></samp>
              <p>
                ...then the duplicates can be removed and each pair can be
                represented with one character, like so:
              </p>
              <samp><code>#09C</code></samp>
            </div>
          </li>

          <li id="general_diffbwcolorandBGcolor">
            <div class="question">
              <p>
                What is the difference between the
                <code class="CSS"><span class="property">color</span></code> and
                <code class="CSS"
                  ><span class="property">background-color</span></code
                >
                properties?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="CSS"><span class="property">color</span></code>
                property refers to the text content of an element, including its
                decorations (underline, strikethrough, etc). The setting of the
                <code class="CSS"><span class="property">color</span></code>
                property in turn sets the value of the
                <span class="cgen"
                  ><a href="#synprof_currentcolor">currentcolor</a></span
                >
                property, which is used as the basis for other properties,
                <a href="#attprof_border">such as border color</a>. In Adobe
                Illustrator terms, think about it as the stroke. You can also
                think of it as "foreground color".
              </p>

              <p>
                The
                <code class="CSS"
                  ><span class="property">background-color</span></code
                >
                property, on the other hand, is like the fill behind the stroke.
                <a href="#attprof_background-color">Click here</a> for a profile
                of the
                <code class="CSS"
                  ><span class="property">background-color</span></code
                >
                property.
              </p>
            </div>
          </li>

          <li id="synprof_CSSlength">
            <div class="question">
              <p>
                Please describe all the different units of measurement that can
                be used to satisfy the
                <span class="cgen">&lt;length&gt;</span> data type, which is
                used in many CSS properties, such as font-size.
              </p>
            </div>

            <div class="answer">
              <p>
                Below is a graphic which shows the all the different units of
                measurement available within the
                <span class="cgen">&lt;length&gt;</span> data type, with only
                minor exclusions:
              </p>
              <img src="_images/synprof_CSSlength.png" />

              <p>
                Below are descriptions of the measurements taken word-for-word
                from MDN:
              </p>
              <h3>Relative Units i.e. Font-Relative Lengths</h3>
              <table>
                <thead>
                  <tr>
                    <td>Value</td>
                    <td>Explanation</td>
                  </tr>
                </thead>
                <tbody class="valueextable">
                  <tr>
                    <td>em</td>
                    <td>
                      <p>
                        This unit represents the calculated font-size of the
                        element. If used on the font-size property itself, it
                        represents the inherited font-size of the element.
                      </p>
                      <p>
                        This unit is often used to create scalable layouts,
                        which keep the vertical rhythm of the page, even when
                        the user changes the size of the fonts. The CSS
                        properties line-height, font-size, margin-bottom and
                        margin-top often have values expressed in em.
                      </p>
                    </td>
                  </tr>
                  <tr>
                    <td>ex</td>
                    <td>
                      This unit represents the x-height of the element's font.
                      On fonts with the 'x' letter, this is generally the height
                      of lowercase letters in the font; 1ex = 0.5em in many
                      fonts.
                    </td>
                  </tr>
                  <tr>
                    <td>ch</td>
                    <td>
                      This unit represents the width, or more precisely the
                      advance measure, of the glyph '0' (zero, the Unicode
                      character U+0030) in the element's font.
                    </td>
                  </tr>
                  <tr>
                    <td>rem</td>
                    <td>
                      This unit represents the font-size of the root element
                      (e.g. the font-size of the &lt;html&gt; element). When
                      used on the font-size on this root element, it represents
                      its initial value.
                    </td>
                  </tr>
                  <tr>
                    <td>lh</td>
                    <td>
                      Equal to the computed value of the line-height property of
                      the element on which it is used, converted to an absolute
                      length.
                    </td>
                  </tr>
                  <tr>
                    <td>rlh</td>
                    <td>
                      Equal to the computed value of line-height property on the
                      root element, converted to an absolute length. When
                      specified on the font-size or line-height properties of
                      the root element, the rlh units refer to the properties'
                      initial value.
                    </td>
                  </tr>
                </tbody>
              </table>
              <h3>Viewport-Relative Lengths</h3>
              <p>
                Viewport-percentage lengths defined a length relatively to the
                size of viewport, that is the visible portion of the
                document....[not the actual screen, but the browser window
                itself].
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Value</td>
                    <td>Explanation</td>
                  </tr>
                </thead>
                <tbody class="valueextable">
                  <tr>
                    <td>vh</td>
                    <td>
                      <p>1/100th of the height of the viewport.</p>
                    </td>
                  </tr>
                  <tr>
                    <td>vw</td>
                    <td>1/100th of the width of the viewport.</td>
                  </tr>
                  <tr>
                    <td>vi</td>
                    <td>
                      Equal to 1% of the size of the initial containing block,
                      in the direction of the root element’s inline (i.e.
                      horizontal) axis.
                    </td>
                  </tr>
                  <tr>
                    <td>vb</td>
                    <td>
                      Equal to 1% of the size of the initial containing block,
                      in the direction of the root element’s block (i.e.
                      vertical) axis.
                    </td>
                  </tr>
                  <tr>
                    <td>vmin</td>
                    <td>
                      1/100th of the minimum value of the height and the width
                      of the viewport..."This unit is based on the smaller
                      dimension of the viewport. If the viewport height is
                      smaller than the width, the value of vmin will be equal to
                      1% of the viewport height. Similarly, if the viewport
                      width is smaller than the height, the value of vmin will
                      be equal to 1% of the viewport width."
                    </td>
                  </tr>
                  <tr>
                    <td>vmax</td>
                    <td>
                      1/100th of the maximum value of the height and the width
                      of the viewport. "This unit is based on the larger
                      dimension of the viewport. If the viewport height is
                      larger than the width, the value of vmax will be equal to
                      1% of viewport height. Similarly, if the viewport width is
                      larger than the height, the value of vmax will be equal to
                      1% of the viewport width."
                    </td>
                  </tr>
                </tbody>
              </table>
              <samp
                style="
                  background-color: blue;
                  color: white;
                  width: 15vw;
                  height: 15vh;
                "
              >
                width: 15vw,<br />
                height: 15vh
              </samp>
              <samp
                style="
                  background-color: blue;
                  color: white;
                  width: 15vmax;
                  height: 15vmax;
                "
              >
                width: 15vmax,<br />
                height: 15vmax<br />
                <strong>equivalent to </strong><br />
                width: 15vw,<br />
                height: 15vw <br />
                <strong>...because width is the larger (i.e. max) value</strong
                >.
              </samp>
              <samp
                style="
                  background-color: blue;
                  color: white;
                  width: 15vmin;
                  height: 15vmin;
                "
              >
                width: 15vmin,<br />
                height: 15vmin<br />
                <strong>equivalent to </strong><br />
                width: 15vh,<br />
                height: 15vh <br />
                <strong
                  >...because height is the smaller (i.e. min) value</strong
                >.
              </samp>
              <p>
                You can see how the <span class="value">vmin</span>/<span
                  class="value"
                  >vmax</span
                >
                measurements can be useful for mobile sites, since users will
                often read the same website in both configurations: phone
                upright (height is greater than width), and phone sideways
                (width is greater than height).
              </p>
              <h3>Absolute Lengths</h3>
              <p>
                Absolute length units represent a physical measurement when the
                physical properties of the output medium are known, such as for
                print layout. This is done by anchoring one of the units to a
                physical unit, and then defining the others relative to it. The
                anchor is done differently for low-resolution devices, such as
                screens, and high-resolution devices, such as printers.
              </p>
              <p>
                For low-dpi devices, the unit px represents the physical
                reference pixel and then other units are defined relative to it.
                Thus, 1in is defined as 96px which equals 72pt. The consequence
                of this definition is that on such devices, length described in
                inches (in), centimeters (cm) or millimeters (mm) doesn't
                necessary match the length of the physical unit with the same
                name.
              </p>
              <p>
                For high-dpi devices, inches (in), centimeters (cm), millimeters
                (mm) are defined as their physical counterparts. Therefore the
                px unit is defined relative to them (1/96 of 1 inch).
              </p>
              <p>
                The unit in doesn't represent a physical inch on screen, but
                represents 96px. That means that whatever is the real screen
                pixel density, it is assumed to be 96dpi. On devices with a
                greater pixel density, 1in will be smaller than 1 physical inch.
              </p>
              <samp style="background-color: blue; color: white; width: 1in"
                >This &lt;samp&gt; element is sized to 1 inch wide.</samp
              >
              <table>
                <thead>
                  <tr>
                    <td>Value</td>
                    <td>Explanation</td>
                  </tr>
                </thead>
                <tbody class="valueextable">
                  <tr>
                    <td>px</td>
                    <td>
                      <p>
                        [CSS pixels are] relative to the viewing device. For
                        screen display, typically one device pixel (dot) of the
                        display. For printers and very high resolution screens
                        one CSS pixel implies multiple device pixels, so that
                        the number of pixel per inch stays around 96.viewport.
                      </p>
                    </td>
                  </tr>
                  <tr>
                    <td>mm</td>
                    <td>One millimeter.</td>
                  </tr>
                  <tr>
                    <td>q</td>
                    <td>A quarter of a millimeter (1/40th of a centimeter).</td>
                  </tr>
                  <tr>
                    <td>cm</td>
                    <td>One centimeter (10 millimeters).</td>
                  </tr>
                  <tr>
                    <td>in</td>
                    <td>One inch (2.54 centimeters).</td>
                  </tr>
                  <tr>
                    <td>pt</td>
                    <td>One point (1/72nd of an inch).</td>
                  </tr>
                  <tr>
                    <td>pc</td>
                    <td>One pica (12 points).</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="general_CSSvendorprefix">
            <div class="question">
              <p>With regards to CSS, what is a "vendor prefix"?</p>
            </div>

            <div class="answer">
              <p>
                "Browser vendors sometimes add prefixes to experimental or
                nonstandard CSS properties, so developers can experiment with
                new ideas while—in theory—preventing their experiments from
                being relied upon and then breaking web developers' code during
                the standardization process. Developers should wait to include
                the unprefixed property until browser behavior is standardized."
              </p>
              <p>"The major browsers use the following prefixes:"</p>
              <ul>
                <li>
                  <span class="cprop hghlt">-webkit-</span> (Chrome, Safari,
                  newer versions of Opera, almost all iOS browsers (including
                  Firefox for iOS); basically, any WebKit based browser)
                </li>
                <li><span class="cprop hghlt">-moz-</span> (Firefox)</li>
                <li>
                  <span class="cprop hghlt">-o-</span> (Old, pre-WebKit,
                  versions of Opera)
                </li>
                <li>
                  <span class="cprop hghlt">-ms-</span> (Internet Explorer and
                  Microsoft Edge)
                </li>
              </ul>
              <p>
                An example of this is the
                <code class="CSS"><span class="property">transform</span></code>
                property:
              </p>
              <br /><br />
              <samp id="transformexample"
                >This &lt;samp&gt; element has been rotated using the
                experimental
                <code class="CSS"><span class="property">transform</span></code>
                property.</samp
              >
              <p>
                See the code below - note the repetition of the rule for the
                different browsers with different vendor prefixes:
              </p>
              <code class="block CSS">
                <span class="selector">#transformexample</span> { <br />
                &nbsp;&nbsp;<span class="property">transform</span>:<span
                  class="value"
                  >rotate(-5deg)</span
                >;<br />
                &nbsp;&nbsp;<span class="property">transform-origin</span>:<span
                  class="value"
                  >left bottom</span
                >;<br />
                &nbsp;&nbsp;<span class="property">-webkit-transform</span
                >:<span class="value">rotate(-5deg)</span>;<br />
                &nbsp;&nbsp;<span class="property"
                  >-webkit-transform-origin</span
                >:<span class="value">left bottom</span>; <br />
                &nbsp;&nbsp;<span class="property">-moz-transform</span>:<span
                  class="value"
                  >rotate(-5deg)</span
                >;<br />
                &nbsp;&nbsp;<span class="property">-moz-transform-origin</span
                >:<span class="value">left bottom</span>; <br />
                }
              </code>
              <p>
                If a property is experimental and requires a vendor prefix, you
                can find this easily in the "browser compatibility" section of
                the Mozilla Developer Network profile of the property:
              </p>
              <img src="_images/general_CSSvendorprefix.png" />
              <p>
                In sum, vendor prefixes allow us to use CSS features before
                they're standardized.
              </p>
            </div>
          </li>

          <li id="general_CSSreset">
            <div class="question">
              <p>What is a "CSS reset"?</p>
            </div>

            <div class="answer">
              <p>
                A "CSS reset" is basically a skeleton of CSS rules that
                overwrite a browser's default style sheet. Generally, it aims to
                strip default user agent formatting from a sheet so that it is
                truly a "blank slate".
              </p>
              <p>
                As Eric Meyer says when justifying the CSS resets, "all browsers
                have presentation defaults, but no browsers have the same
                defaults...For example, some browsers indent unordered and
                ordered lists with left margins, whereas others use left
                padding...Headings have slightly different top and bottom
                margins, indentation distances are different, and so on. Even
                something as basic as the default line height varies from one
                browser to another."
              </p>

              <p>
                James Williamson says the most important properties to address
                in a reset are
                <code class="CSS"><span class="property">margin</span></code
                >, <code class="CSS"><span class="property">padding</span></code
                >, <code class="CSS"><span class="property">border</span></code
                >,
                <code class="CSS"><span class="property">font-size</span></code>
                and
                <code class="CSS"
                  ><span class="property">line-height</span></code
                >.
              </p>

              <p>
                Here is a modified reset from Eric Meyer's page - when
                implementing a CSS reset in your code, make sure you use them at
                the top of your style sheet with the appropriate comment. Then
                your custom styles which follow can overwrite the reset if
                necessary.
              </p>

              <code class="block CSS">
                html, body, div, span, applet, object, iframe, h1, h2, h3, h4,
                h5, h6, p, blockquote, pre, a, abbr, acronym, address, big,
                cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small,
                strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd,
                ol, ul, li, fieldset, form, label, legend, table, caption,
                tbody, tfoot, thead, tr, th, td, article, aside, canvas,
                details, embed, figure, figcaption, footer, header, hgroup,
                menu, nav, output, ruby, section, summary, time, mark, audio,
                video { <br />
                &nbsp;&nbsp;margin: 0;<br />
                &nbsp;&nbsp;padding: 0;<br />
                &nbsp;&nbsp;border: 0;<br />
                &nbsp;&nbsp;font-size: 100%;<br />
                &nbsp;&nbsp;font: inherit;<br />
                &nbsp;&nbsp;vertical-align: baseline;<br />
                }<br /><br />
                /* HTML5 display-role reset for older browsers */<br /><br />
                article, aside, details, figcaption, figure, footer, header,
                hgroup, menu, nav, section {<br />
                &nbsp;&nbsp;display: block;<br />
                }<br /><br />
                body {<br />
                &nbsp;&nbsp;line-height: 1;<br />
                }<br /><br />
                blockquote, q {<br />
                &nbsp;&nbsp;quotes: none;<br />
                }<br /><br />
                table {<br />
                &nbsp;&nbsp;border-collapse: collapse;<br />
                &nbsp;&nbsp;border-spacing: 0;<br />
                }
              </code>

              <p>
                JW says that this creates a load on the browser, to apply
                styling to every element, so it's best to customize a smaller
                reset for elements you know you will want special control over.
              </p>

              <p>
                When you're ready, the
                <a
                  href="https://github.com/necolas/normalize.css/blob/master/normalize.css"
                  >normalize.css</a
                >
                CSS reset is worth a serious look.
              </p>
            </div>
          </li>

          <li id="general_CSSframework">
            <div class="question">
              <p>
                What is a CSS framework, and how does it differ from a CSS
                reset?
              </p>
            </div>

            <div class="answer">
              <p>
                While a CSS reset aims to simply strip default user agent
                formatting from a sheet so that it is truly a "blank slate", a
                CSS framework is much broader CSS template for your website. It
                is far larger than a reset and contains all sorts of prebuilt
                classes that are ready to be assigned to your elements. Perhaps
                the most important feature of a framework is a
                <a href="https://v4-alpha.getbootstrap.com/layout/grid/"
                  >layout grid or responsive layout</a
                >. There is a learning curve to using a framework, since you
                have to familiarize yourself with a number of classes and what
                they do.
              </p>
              <p>
                Bootstrap and Foundation are the most popular frameworks,
                followed by Pure CSS and Base.
              </p>
              <p>
                Note that CSS frameworks can within them contain a CSS reset -
                Bootstrap, for instance, implements the normalize.css reset.
              </p>
            </div>
          </li>

          <li id="general_CSSpreprocessor">
            <div class="question">
              <p>What is a CSS preprocessor?</p>
            </div>

            <div class="answer">
              <p>
                In general, "a preprocessor is a program that takes one type of
                data and converts it to another type of data." A CSS
                preprocessor, in gaming terms, is a "mod" to enhance the
                capability of CSS. There are several things you cannot do in
                native CSS that a preprocessor allows you to do. Here are some
                of them (using the Less CSS syntax):
              </p>
              <ul>
                <li>
                  <p class="emphasize">Use variables.</p>
                  <code class="block SCSS">
                    <span class="cgen">@nice-blue</span>:
                    <span class="value">#5B83AD</span>;<br /><br />
                    <span class="selector">#header</span> { <br />
                    &nbsp;&nbsp;<span class="property">background-color</span
                    >:<span class="cge">@nice-blue</span>;<br />
                    }
                  </code>
                </li>
                <li>
                  <p class="emphasize">
                    Use a previously-defined selector as within another
                    selector. These are called "mixins", because you are mixing
                    in the rules of one item with another.
                  </p>
                  <code class="block SCSS">
                    <span class="selector">.meat</span> { <br />
                    &nbsp;&nbsp;<span class="comment"
                      >/*Imagine a bunch of rules here */</span
                    ><br />
                    }<br /><br />
                    <span class="comment"
                      >/* The #header will get the same exact rules as the
                      "meat" class:*/</span
                    ><br />
                    <span class="selector">#header</span> { <br />
                    &nbsp;&nbsp;<span class="cgen">.meat</span>;<br />
                    }
                  </code>
                </li>
                <li>
                  <p class="emphasize">
                    Use selectors as functions which can take arguments.
                  </p>
                  <code class="block SCSS">
                    <span class="selector">.crooked(@degree)</span> { <br />
                    &nbsp;&nbsp;<span class="property">transform</span>:<span
                      class="value"
                      >rotate(@degree)</span
                    >;<br />
                    &nbsp;&nbsp;<span class="property">-webkit-transform</span
                    >:<span class="value">rotate(@degree)</span>;<br />
                    &nbsp;&nbsp;<span class="property">-moz-transform</span
                    >:<span class="value">rotate(@degree)</span>;<br />
                    } <br /><br />
                    <span class="selector">#header</span> { <br />
                    &nbsp;&nbsp;<span class="property">.crooked(25deg)</span
                    >;<br />
                    }
                  </code>
                </li>
                <li>
                  <p class="emphasize">
                    Nest rules, which has the same effect as writing a
                    descendant selector. For instance, the following standard
                    CSS...
                  </p>
                  <code class="block CSS">
                    <span class="selector">#header</span> { <br />
                    &nbsp;&nbsp;<span class="property">color</span>:<span
                      class="value"
                      >black</span
                    >;<br />}<br /><br />
                    <span class="selector">#header .navigation</span> { <br />
                    &nbsp;&nbsp;<span class="property">font-size</span>:<span
                      class="value"
                      >12px</span
                    >;<br />}<br /><br />
                    <span class="selector">#header .logo</span> { <br />
                    &nbsp;&nbsp;<span class="property">width</span>:<span
                      class="value"
                      >300px</span
                    >;<br />}
                  </code>
                  <p>...can be written like so in Less CSS:</p>
                  <code class="block SCSS">
                    <span class="selector">#header</span> {
                    <span class="declaration">
                      <span class="property">color</span>:<span class="value"
                        >black</span
                      >;<br /><br />
                      <span class="selector">.navigation</span> {
                      <span class="declaration">
                        <span class="property">font-size</span>:<span
                          class="value"
                          >12px</span
                        >;
                      </span>
                      } <br />
                      <br />
                      <span class="selector">.logo</span> {
                      <span class="declaration">
                        <span class="property">width</span>:<span class="value"
                          >300px</span
                        >;
                      </span>
                      }
                    </span>
                    }
                  </code>
                </li>
                <li>
                  <p class="emphasize">Use arithmetic operators:</p>
                  <code class="SCSS block">
                    @std-margin:<span class="value">16px</span>;<br /><br />

                    <span class="selector">p</span> { <br />
                    &nbsp;&nbsp;<span class="property">margin-bottom</span
                    >:<span class="value">@std-margin</span>;<br />
                    }<br /><br />
                    <span class="selector">h1</span> { <br />
                    &nbsp;&nbsp;<span class="property">margin-bottom</span
                    >:<span class="value">@std-margin + 6</span>;<br />
                    }
                  </code>
                </li>
              </ul>
              <p>
                ...and a whole lot more. The above examples were written in Less
                CSS. Also in the top two for CSS preprocessors is Sass. Less is
                written in JavaScript, and Sass is written in Ruby.
              </p>
              <p>
                Just like C++ must be compiled into machine code, so too do
                these preprocessed CSS languages need to be compiled into actual
                CSS. Therefore when looking at the source code of a page, you
                will see actual CSS, but it will not be clear if the author used
                a preprocessor. Likewise, if you're the author, the actual CSS
                is abstracted from your view, though keep in mind that in
                Less/Sass, valid CSS is valid Less/Sass.
              </p>
              <p>Other notable preprocessors are Stylus and PostCSS.</p>
            </div>
          </li>

          <li id="synprof_rootfolder">
            <div class="question">
              <p>What is a "root directory"?</p>
            </div>

            <div class="answer">
              <p>
                The root directory is the highest-level directory in a hierarchy
                - if you are thinking about a folder structure, it is the point
                at which you cannot go "up" any more. All websites have a root
                directory, often called
                <span class="directory">public_html</span>.
              </p>
            </div>
          </li>

          <li id="synprof_CSS_SelectorMultipleCriteria">
            <div class="question">
              <p>
                How would I write a CSS selector for an element which has at
                least two specific class values?
              </p>
            </div>

            <div class="answer">
              <p>
                You would simply concatenate the element and the two class
                selectors into one unbroken string. In the below example, this
                styling rule is applied to only
                <code class="HTML element">&lt;code&gt;</code> elements which
                have the classes of "HTML" and "block":
              </p>
              <code class="block CSS">
                <span class="selector">code.HTML.block</span> { <br />
                &nbsp;&nbsp;&nbsp;&nbsp;<span class="property"
                  >background-color:</span
                ><span class="value">#eff0f1</span>;<br />
                }
              </code>
              <p>
                Important: this does not only apply to chaining classes but all
                CSS selectors - the way to essentially specify AND criteria is
                to mash all of the selectors together without whitespace. This
                is why the nth-child range works in this example used in another
                question:
              </p>
              <code class="block CSS">
                <span class="selector">li</span>:<span class="pseudoclass"
                  >nth-child(1n+11):nth-last-child(1n+11)</span
                >
                { <br />
                <span class="declaration">
                  <span class="property">color</span>:<span class="value"
                    >blue</span
                  >;<br />
                </span>
                } <br /><br />
                <span class="comment">
                  <p>
                    /* IE apply blue font color to all objects which are (A) li
                    elements AND (B) &gt;= the 11th child of their parent AND
                    (C) the &lt;= 11th from last child of their parent.
                  </p>
                  <p>
                    Likewise the equivalent of the OR
                    operator/function/conjunction would be the comma.
                  </p>
                </span>
              </code>
            </div>
          </li>

          <li id="general_tooltip">
            <div class="question">
              <p>What is a tooltip?</p>
            </div>

            <div class="answer">
              <p>
                "The tooltip or infotip or a hint is a common graphical user
                interface element. It is used in conjunction with a cursor,
                usually a pointer. The user hovers the pointer over an item,
                without clicking it, and a tooltip may appear—a small 'hover
                box' with information about the item being hovered over."
              </p>
              <p>
                "Many graphical web browsers display the
                <code class="HTML attribute">title</code> attribute of an HTML
                element as a tooltip when a user hovers the pointer over that
                element."
              </p>
            </div>
          </li>

          <li id="attprof_TITLE">
            <div class="question">
              <p>
                The title attribute in HTML is actually a global attribute,
                which means it can be used on any element. True or False?
              </p>
            </div>

            <div class="answer">
              <p title="Even this paragraph has a tooltip!">
                True - this is not just limited to links. When a value is
                supplied to the
                <code class="HTML attribute">title</code> attribute of an
                element, this usually manifests itself in a tooltip when the
                user hovers over the item with their cursor. If you hover over
                this paragraph, you will see additional information.
              </p>
              <p>
                "If this attribute is omitted, it means that the title of the
                nearest ancestor of this element is still relevant (and could be
                used as the tooltip for that element). If this attribute is set
                to the empty string, it explicitly means its nearest ancestor's
                title is not relevant (and shouldn't be used in the tooltip for
                this element)."
              </p>
              <p>
                In the screenshot below, the information displayed by hovering
                over the link is the value supplied to the
                <code class="HTML attribute">title</code> attribute of the
                <code class="HTML element">&lt;span&gt;</code> element
                containing the text "citation needed".
              </p>
              <img src="_images/attprof_TITLE.png" />
            </div>
          </li>

          <li id="general_ImageFormats">
            <div class="question">
              <p>
                What are the image formats supported for use on the web, and
                what are the differences between them?
              </p>
            </div>

            <div class="answer">
              <p>
                <a
                  href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization#selecting-the-right-image-format"
                  >Google has a pretty good write up on this</a
                >: "There are three universally supported image formats: GIF,
                PNG, and JPEG."
              </p>
              <img src="_images/general_ImageFormats.png" />
              <p>
                The above graphic is a little bit of a simplification - see
                below for a table describing the differences between these
                formats.
              </p>
              <table>
                <thead>
                  <tr>
                    <th>Format</th>
                    <th>Colors</th>
                    <th>Lossless?</th>
                    <th>Transparency?</th>
                    <th>Vector?</th>
                    <th>Best Use</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th>GIF</th>
                    <td>256 (8 bit)</td>
                    <td>Y</td>
                    <td>Yes, but only full transparency for one color</td>
                    <td>N</td>
                    <td>Only when animation is required.</td>
                  </tr>
                  <tr>
                    <th>JPEG</th>
                    <td>16 million (24 bit)</td>
                    <td>N</td>
                    <td>N</td>
                    <td>N</td>
                    <td>For photographs.</td>
                  </tr>
                  <tr>
                    <th>PNG</th>
                    <td>16 million (24 bit)</td>
                    <td>Y</td>
                    <td>Y, partial transparency available</td>
                    <td>N</td>
                    <td>Logos and shapes.</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="general_imagesizing">
            <div class="question">
              <p>
                What is the purpose of resizing an image in Photoshop for the
                web when you can just adjust the
                <code class="HTML attribute">width</code> and/or
                <code class="HTML attribute">height</code> attributes of the
                image using HTML or CSS styling?
              </p>
            </div>

            <div class="answer">
              <p>
                The reason for doing this is that the server will still have to
                fetch the image in its entirety before resizing it, which means
                that fetching an 8 MB image will take longer than fetching a 1
                MB image.
              </p>
            </div>
          </li>

          <li id="attprof_ALT">
            <div class="question">
              <p>
                What are some best practices for using the
                <code class="HTML attribute">alt</code> attribute within an
                <code class="HTML element">&lt;img&gt;</code> element?
              </p>
            </div>

            <div class="answer">
              <ul>
                <li>
                  "Never, ever omit the
                  <code class="HTML attribute">alt</code> attribute."
                </li>
                <li>
                  "If the image contains text then the
                  <code class="HTML attribute">alt</code> value should simply
                  repeat the text."
                </li>
                <li>
                  If the image is purely for decoration, and cannot be supplied
                  through CSS alone, then
                  <code class="HTML attribute">alt</code> value should be an
                  empty string.
                </li>
                <li>
                  "The <code class="HTML attribute">alt</code> attribute does
                  not always have to literally describe the contents of the
                  image. Keep in mind the purpose and context of the image and
                  what would be useful to someone who cannot see it. The alt
                  attribute is supposed to be an alternative for the image,
                  usually stating its purpose. For example, an image of a
                  warning sign should not have alt text “a triangle with a
                  yellow background, black border and an exclamation mark”, but
                  simply “Warning!”—unless, of course, the alt text's purpose is
                  to show what the warning symbol actually looks like."
                </li>
              </ul>
            </div>
          </li>

          <li id="general_CSSpixel">
            <div class="question">
              <p>
                If a pixel is an arbitrary measurement, how does CSS define a
                pixel?
              </p>
            </div>

            <div class="answer">
              <p>
                CSS's pixels are a one-to-one ratio with a pixels on a device
                with 96 pixels per inch. Therefore if your monitor is 96 ppi,
                then your CSS pixels will equal your device pixels, which are
                1/96 of an inch. This is called a "reference pixel."
              </p>
            </div>
          </li>

          <li id="general_imgbestpractices">
            <div class="question">
              <p>
                What are some general best practices when using images on the
                web?
              </p>
            </div>

            <div class="answer">
              <ul>
                <li>
                  If you're placing an image with transparency in your web page,
                  make sure the matte color of the image matches your background
                  (see p. 101 of Ai guide for more).
                </li>
                <li>Images should be no wider than 800px.</li>
              </ul>
            </div>
          </li>

          <li id="general_unicode">
            <div class="question">
              <p>What is Unicode, and why should you use it?</p>
            </div>

            <div class="answer">
              <p>
                "Unicode is a computing industry standard for the consistent
                encoding, representation, and handling of text expressed in most
                of the world's writing systems"...in essence, it is a global
                language so that web sites across the world can render whatever
                language has been used within the page.
              </p>
              <p>
                The highlighted area of the code below is the invocation of the
                Unicode encoding:
              </p>
              <code class="block HTML">
                <span class="element">&lt;head&gt;</span><br />

                <span class="hghlt"
                  ><span class="element"
                    >&lt;&nbsp;&nbsp;&lt;meta
                    <span class="attribute">charset</span> =
                    <span class="value">"utf-8"</span>&gt;</span
                  ></span
                ><br />

                <span class="element">&lt;&nbsp;&nbsp;&lt;title&gt;</span>Jeff's
                HTML / CSS / JavaScript Reference<span class="element"
                  >&lt;/title&gt;</span
                ><br />

                <span class="element"
                  >&lt;&nbsp;&nbsp;&lt;link
                  <span class="attribute">href</span> =
                  <span class="value">"_css/JGWebReference.css"</span>
                  <span class="attribute">rel</span> =
                  <span class="value">"stylesheet"</span>
                  <span class="attribute">type</span> =
                  <span class="value">"text/css"</span>&gt; &gt;</span
                ><br />

                <span class="element">&lt;/head&gt;</span><br />
              </code>
            </div>
          </li>

          <li id="eleprof_HTML">
            <div class="question">
              <p>
                The only permitted content of an html element is one head
                element, followed by one body element. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_CSScolorkeywords">
            <div class="question">
              <p>
                CSS offered only 16 basic color keywords until it incorporated
                the standard of SVG 1.0 and now offers 147 named colors. True or
                False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_HSLcolor">
            <div class="question">
              <p>What is HSL color?</p>
            </div>

            <div class="answer">
              <p>
                HSL stands for "hue, saturation, and lightness." It is based off
                a more intuitive model where you can more easily guess values
                that will approximate the color you would want.
              </p>
              <p>In the graphic below...</p>
              <ul>
                <li>
                  <strong>Hue</strong>, or in cruder terms the color,
                  <u>is an integer value</u> between 0 and 360 signifying the
                  degree position around a color wheel.
                  <ul>
                    <li>Red is around 0/360.</li>
                    <li>Green is around 120.</li>
                    <li>Blue is around 240.</li>
                  </ul>
                </li>
                <li>
                  <strong>Saturation</strong>, the measure of how deep/bold/rich
                  or, uh, saturated that color is,
                  <u>is a percentage</u> between 0 and 100. 0 is no color at
                  all, 100 is fully saturated.
                </li>
                <li>
                  <strong>Lightness</strong>, the measure of how bright the
                  color is, <u>is also a percentage</u> between 0 and 100. 0 is
                  no light at all (black), 100 is blinding white light.
                </li>
              </ul>
              <img src="_images/general_HSLcolor.png" />
              <samp
                style="
                  background-color: hsl(300, 100%, 100%);
                  border: 1px solid black;
                "
              >
                <code class="CSS">background-color:hsl(300,100%,100%);</code>
              </samp>
              <samp
                style="
                  background-color: hsl(300, 100%, 50%);
                  color: white;
                  border: 1px solid black;
                "
              >
                <code class="CSS">background-color:hsl(300,100%,50%);</code>
              </samp>
              <samp
                style="
                  background-color: hsl(300, 50%, 50%);
                  color: white;
                  border: 1px solid black;
                "
              >
                <code class="CSS">background-color:hsl(300,50%,50%);</code>
              </samp>
              <samp
                style="
                  background-color: hsl(300, 5%, 95%);
                  border: 1px solid black;
                "
              >
                <code class="CSS">background-color:hsl(300,5%,95%);</code>
              </samp>
              <p>
                What's cool about HSL is that it allows you to find complemetary
                colors more easily. Once you have nailed down the saturation and
                lightness, you can play with different hues to find different
                colors with the same "feel". The below brownish-yellow, for
                instance, should be complementary to the third color ( the
                second purple in the list above).
              </p>
              <samp
                style="
                  background-color: hsl(60, 50%, 50%);
                  color: white;
                  border: 1px solid black;
                "
              >
                <code class="CSS">background-color:hsl(300,50%,50%);</code>
              </samp>
            </div>
          </li>

          <li id="attprof_opacity">
            <div class="question">
              <p>
                Explain the CSS
                <code class="CSS property">opacity</code> property.
              </p>
            </div>

            <div class="answer">
              <p>
                The <code class="CSS property">opacity</code> property allows
                you to make an element partially transparent. It takes a value
                between 0 (totally transparent - zero opacity) to 1 (totally
                opaque). Let's test it on the below table:
              </p>
              <code class="block CSS">
                <span class="selector">#fontpropertytable</span> { <br />
                <span class="declaration">
                  <span class="property">opacity:</span
                  ><span class="value">0.5</span>;
                </span>
                }
              </code>
              <table style="opacity: 0.5">
                <thead>
                  <tr>
                    <td>Property</td>
                    <td>Initial Value</td>
                  </tr>
                </thead>
                <tbody class="propvalpair">
                  <tr>
                    <td>font-style</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>font-variant</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>font-weight</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>font-stretch</td>
                    <td>normal</td>
                  </tr>
                  <tr class="hghlt">
                    <td>font-size</td>
                    <td>normal</td>
                  </tr>
                  <tr>
                    <td>line-height</td>
                    <td>normal</td>
                  </tr>
                  <tr class="hghlt">
                    <td>font-family</td>
                    <td>(depends on user agent)</td>
                  </tr>
                </tbody>
              </table>
              <p>A couple things to note:</p>
              <ul>
                <li>
                  <p>
                    A <code class="HTML element">&lt;table&gt;</code> has many
                    children, and you can tell that everything within this
                    <code class="HTML element">&lt;table&gt;</code> has been
                    affected by the
                    <code class="CSS property">opacity</code> property - in
                    short, when you set the property on an element, it applies
                    to all children of that element as well.
                  </p>
                  <p>
                    If you wish to target an element without affecting its
                    children, give it a
                    <code class="CSS property">background-color</code> and/or
                    <code class="CSS property">color</code> with transparency
                    instead.
                  </p>
                </li>
                <li>
                  The value supplied is between 0 and 1, but a percentage is not
                  a valid substitute. You must enter a decimal (.5, 0.43, etc.).
                </li>
              </ul>
            </div>
          </li>

          <li id="attprof_dropshadows">
            <div class="question">
              <p>How would you use CSS to create a drop shadow?</p>
            </div>

            <div class="answer">
              <p>
                Drop shadows are controlled with two separate properties -
                <code class="CSS property">box-shadow</code> for block level
                elements, and <code class="CSS property">text-shadow</code> for
                text. Below is same sample code, and the result it produces.
              </p>
              <code class="CSS block">
                <span class="selector">samp</span> { <br />
                <span class="declaration">
                  <span class="property">box-shadow:</span
                  ><span class="value">5px 5px 2px 2px rgba(0,0,0,.7)</span>;
                </span>
                } <br /><br />
                <span class="selector">span</span> { <br />
                <span class="declaration">
                  <span class="property">text-shadow:</span
                  ><span class="value">2px 2px 2px rgb(0,0,0)</span>;
                </span>
                }
              </code>
              <samp
                style="
                  background-color: peru;
                  box-shadow: 5px 5px 2px 2px rgba(0, 0, 0, 0.7);
                  text-align: center;
                "
              >
                <span
                  style="
                    font-size: 3em;
                    font-family: Bellbaby;
                    font-weight: bold;
                    color: gold;
                    text-shadow: 2px 2px 2px rgb(0, 0, 0);
                  "
                  >SCHMIDT &amp; BURR, M.D.J.D.</span
                >
              </samp>
              <p>
                Let's take a closer look at the syntax of these drop shadow
                properties. First, <code class="CSS property">box-shadow</code>:
              </p>
              <code class="CSS block syntax">
                none | &lt;shadow&gt;#<br /><br />
                where <br />
                &lt;shadow&gt; = inset? &amp;&amp; &lt;length&gt;{2,4}
                &amp;&amp; &lt;color&gt;?
              </code>
              <p>
                Translation: "Specify a
                <code class="CSS property">box-shadow</code> using:
              </p>
              <ul>
                <li>
                  Two, three, or four
                  <code class="CSS datatype">length</code> values.
                </li>
                <li>
                  If only two values are given, they are interpreted as
                  <code class="CSS datatype">offset-x</code>
                  <code class="CSS datatype">offset-y</code> values.
                </li>
                <li>
                  If a third value is given, it is interpreted as a
                  <code class="CSS datatype">blur-radius</code>.
                </li>
                <li>
                  If a fourth value is given, it is interpreted as a
                  <code class="CSS datatype">spread-radius</code>.
                </li>
                <li>
                  Optionally, the <code class="CSS value">inset</code> keyword.
                </li>
                <li>
                  Optionally, a <code class="CSS datatype">color</code> value."
                </li>
              </ul>
              <p>
                First example but with
                <code class="CSS datatype">offset-x</code> and
                <code class="CSS datatype">offset-y</code> values set to 0:
              </p>
              <samp
                style="
                  background-color: peru;
                  box-shadow: 0px 0px 2px 2px rgba(0, 0, 0, 0.7);
                  text-align: center;
                "
              >
                <span
                  style="
                    font-size: 3em;
                    font-family: Bellbaby;
                    font-weight: bold;
                    color: gold;
                    text-shadow: 2px 2px 2px rgb(0, 0, 0);
                  "
                  >SCHMIDT &amp; BURR, M.D.J.D.</span
                >
              </samp>
              <p>
                First example but with
                <code class="CSS datatype">blur-radius</code> set to 0. Note the
                razor sharp edge of the "shadow":
              </p>
              <samp
                style="
                  background-color: peru;
                  box-shadow: 5px 5px 0px 2px rgba(0, 0, 0, 0.7);
                  text-align: center;
                "
              >
                <span
                  style="
                    font-size: 3em;
                    font-family: Bellbaby;
                    font-weight: bold;
                    color: gold;
                    text-shadow: 2px 2px 2px rgb(0, 0, 0);
                  "
                  >SCHMIDT &amp; BURR, M.D.J.D.</span
                >
              </samp>
              <p>
                First example but with
                <code class="CSS datatype">spread-radius</code> set to 0. Note
                how the shadow does not "spread" from its ending point 2px from
                the edge of the block. Without this value, the shadow is the
                same size as the element:
              </p>
              <samp
                style="
                  background-color: peru;
                  box-shadow: 5px 5px 2px 0px rgba(0, 0, 0, 0.7);
                  text-align: center;
                "
              >
                <span
                  style="
                    font-size: 3em;
                    font-family: Bellbaby;
                    font-weight: bold;
                    color: gold;
                    text-shadow: 2px 2px 2px rgb(0, 0, 0);
                  "
                  >SCHMIDT &amp; BURR, M.D.J.D.</span
                >
              </samp>
              <p>
                First example but with
                <code class="CSS value">inset</code> keyword. "The presence of
                the <code class="CSS value">inset</code> keyword changes the
                shadow to one inside the frame (as if the content was depressed
                inside the box).":
              </p>
              <samp
                style="
                  background-color: peru;
                  box-shadow: inset 5px 5px 2px 2px rgba(0, 0, 0, 0.7);
                  text-align: center;
                "
              >
                <span
                  style="
                    font-size: 3em;
                    font-family: Bellbaby;
                    font-weight: bold;
                    color: gold;
                    text-shadow: 2px 2px 2px rgb(0, 0, 0);
                  "
                  >SCHMIDT &amp; BURR, M.D.J.D.</span
                >
              </samp>
              <p>
                Let's now turn our attention to the
                <code class="CSS property">text-shadow</code> property:
              </p>
              <code class="CSS block syntax">
                none | &lt;shadow-t&gt;#<br /><br />
                where <br />
                &lt;shadow&gt; = [ &lt;length&gt;{2,3} &amp;&amp; &lt;color&gt;?
                ]
              </code>
              <p>
                Note that the syntax is almost identical to
                <code class="CSS property">box-shadow</code>, but there is no
                <code class="CSS value">inset</code> keyword, and besides the
                mandatory X and Y offets, there is only one optional
                <code class="CSS datatype">length</code> value which is
                <code class="CSS datatype">blur-radius</code>. Let's look the
                example above, but with the box styling removed:
              </p>
              <samp class="clean" style="text-align: center">
                <span
                  style="
                    font-size: 3em;
                    font-family: Bellbaby;
                    font-weight: bold;
                    color: gold;
                    text-shadow: 2px 2px 2px rgb(0, 0, 0);
                  "
                  >SCHMIDT &amp; BURR, M.D.J.D.</span
                >
              </samp>
              <p>Again, here's the code:</p>
              <code class="CSS block">
                <span class="selector">span</span> { <br />
                <span class="declaration">
                  <span class="property">text-shadow:</span
                  ><span class="value">2px 2px 2px rgb(0,0,0)</span>;
                </span>
                }
              </code>
              <p>
                Translation: "give this text a black shadow offset 2 pixels
                down, and 2 pixels to the right of the text. Blur the edge of
                the shadow with a radius of two pixels."
              </p>

              <p>
                One final note on both of these properties - although
                <code class="CSS datatype">color</code> is optional, its default
                color is not black - in fact, this depends on the user agent. So
                it is best to explicitly set a color to avoid surprises.
              </p>
            </div>
          </li>

          <li id="attprof_linear-gradient">
            <div class="question">
              <p>How do I use CSS to create a gradient?</p>
            </div>

            <div class="answer">
              <p>
                In CSS, gradients are not properties, but
                <em>functions</em> which take colors as their arguments and
                output what is techincally an
                <code class="CSS datatype">image</code>, not a
                <code class="CSS datatype">color</code>. This on-the-fly image,
                in turn, is applied to properties that can accept images, such
                as <code class="CSS property">background</code>.
              </p>
              <p>
                The two functions which create gradients are
                <code class="CSS function">linear-gradient</code> and
                <code class="CSS function">radial-gradient</code> - their names
                are pretty self-explanatory, but the syntax deserves some
                explanation. First, here's an example linear gradient:
              </p>
              <samp
                style="
                  background: -webkit-linear-gradient(
                    left,
                    #fff 0%,
                    #b57c12 50%,
                    #000 100%
                  );
                  text-align: center;
                "
              ></samp>
              <p>...and here's the code:</p>
              <code class="CSS block">
                <span class="selector">span</span> { <br />
                <span class="declaration">
                  <span class="property">background:</span
                  ><span class="value"
                    >-webkit-linear-gradient(left, #fff 0%, #b57c12 50%, #000
                    100%)</span
                  >;
                </span>
                }
              </code>
              <p>Let's go through it piece by piece:</p>
              <ol>
                <li>
                  <p>
                    <code class="CSS value">-webkit-linear-gradient</code><br />
                    Note the vendor prefix - when used with
                    <code class="CSS property">background</code> or
                    <code class="CSS property">background-image</code>, all of
                    the major browsers require the prefix as of this writing
                    (5/8/17).
                  </p>
                </li>
                <li>
                  <p>
                    <code class="CSS value">left</code><br />
                    The starting point of the gradient with regard to the
                    element. Besides the obvious other 90 degree values (<code
                      class="CSS value"
                      >top</code
                    >, <code class="CSS value">bottom</code>,
                    <code class="CSS value">right</code>), you can also supply a
                    degree. Below is an example of the same gradient, but with
                    the value <code class="CSS value">225deg</code> (you MUST
                    follow the degree amount immediately with "deg", no spaces).
                  </p>
                  <samp
                    style="
                      background: -webkit-linear-gradient(
                        225deg,
                        #fff 0%,
                        #b57c12 50%,
                        #000 100%
                      );
                      text-align: center;
                    "
                  ></samp>
                </li>
                <li>
                  <p>
                    <code class="CSS value"
                      >#fff 0%, #b57c12 50%, #000 100%</code
                    ><br />
                    <code class="CSS comment"
                      >/* #fff, #b57c12, #000 would do the same thing */</code
                    ><br />
                    The three source colors of the gradient (white, gold, black)
                    followed respectively by their position i.e. within the
                    gradient, relative to the starting point. These are called
                    "color stops". Think Adobe Illustrator - you can
                    theoretically add as many stops as you want.
                  </p>
                  <p>
                    Pure white is at 0% (the beginning), the gold color is
                    reached at 50%, and pure black is reached at 100%. As it
                    turns out, we could have omitted these percentages entirely
                    because the browser will split the color stops evenly in the
                    event that you do not supply a value.
                  </p>
                  <p>
                    Watch what happens when we change the white to 25%, and the
                    black to 75%:
                  </p>
                  <samp
                    style="
                      background: -webkit-linear-gradient(
                        left,
                        #fff 25%,
                        #b57c12 50%,
                        #000 75%
                      );
                      text-align: center;
                    "
                  ></samp>
                </li>
              </ol>
              <p class="toDo">
                <code class="CSS function">radial-gradient</code> is another
                beast which was not covered in the class so I will get to it
                later.
              </p>
              <p>
                Note also that other browsers, as of this writing, use different
                syntax - for instance, instead of
                <code class="CSS value">left</code> in Webkit, you may see
                <code class="CSS value">to right</code> in the final
                standardized version. Luckily,
                <a href="http://www.colorzilla.com/gradient-editor/"
                  >there is an excellent website which generates all the CSS
                  code you need</a
                >
                for gradients using a nice GUI.
              </p>
            </div>
          </li>

          <li id="synprof_flex-box">
            <div class="question toDo">
              <p>
                Describe how CSS's flex-box capabilities work (FINISH THIS)...
              </p>
            </div>

            <div class="answer">
              <div class="sample">
                <p>Let's test some stuff out. First, with no flex.</p>
                <div class="containerDotted sample">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <h3>
                All following are with display:flex; and manually-set dimensions
                of 80px on each side.
              </h3>
              <div class="sample">
                <p>
                  No other properties set (default flex-direction is
                  flex-start):
                </p>
                <div class="containerDotted" id="flexExample_bare">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>justify-content is space-between:</p>
                <div class="containerDotted" id="flexExample_jiSpaceBetween">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>justify-content is center:</p>
                <div class="containerDotted" id="flexExample_jiCenter">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>
                  justify-content is center but flex-basis is set to 50% on
                  first element. "The flex-basis CSS property specifies the
                  initial main size of a flex item."
                </p>
                <ul>
                  <li>
                    Flex-basis overrides standard ol' width and height. The
                    blocks below are both set to 80 x 80.
                  </li>
                  <li>
                    Flex-basis DOES NOT override max-width and max-height.
                  </li>
                </ul>
                <p>
                  Initial/default value is auto, meaning "look at my width or
                  height property".."If no width is specified, then the
                  flex-basis falls back to the computed width of the item’s
                  contents."
                </p>
                <p>
                  "Width is just a fallback when flex-basis is missing, and
                  min-width and max-width are just upper and lower limits for
                  the final flex-basis....flex-basis is the size of flex items
                  before they are placed into a flex container."
                </p>
                <div class="containerDotted" id="flexExample_jiCenter_fb50">
                  <div class="flexExItem fECube fE1" style="flex-basis: 50%">
                    <span></span>
                  </div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>justify-content is flex-end:</p>
                <div class="containerDotted" id="flexExample_jiFlexEnd">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>flex-direction is row-reverse:</p>
                <div class="containerDotted" id="flexExample_dirRowReverse">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>flex-direction is row-reverse and flex-start is end:</p>
                <div
                  class="containerDotted"
                  id="flexExample_jiFlexEnd_dirRowReverse"
                >
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <p>flex-direction is column:</p>
              <div class="sample">
                <div class="containerDotted" id="flexExample_dirColumn">
                  <div class="flexExItem fECube fE1"><span></span></div>
                  <div class="flexExItem fECube fE2"><span></span></div>
                </div>
              </div>
              <p>
                OK, now let's start talking about PROPORTIONS...all still have
                manual height/width of 80px...note how that is being overridden
                by flex-grow...flex-grow by default is 0. we are now talking
                about properties on the items themselves, not the container as a
                whole:
              </p>
              <div class="sample">
                <p>Both with flex-grow at 1:</p>
                <div class="containerDotted">
                  <div class="flexExItem fECube fE1_g1"><span></span></div>
                  <div class="flexExItem fECube fE2_g1"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>Blue at 2, red at 1:</p>
                <div class="containerDotted">
                  <div class="flexExItem fECube fE1_g2"><span></span></div>
                  <div class="flexExItem fECube fE2_g1"><span></span></div>
                </div>
              </div>
              <p>OK, getting bored, let's do wrap vs. no wrap.</p>
              <div class="sample">
                <p>First, the default, nowrap.</p>
                <div class="containerDotted" id="flexExample_noWrap">
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                </div>
              </div>
              <div class="sample">
                <p>Now with wrap.</p>
                <div class="containerDotted" id="flexExample_wrap">
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                  <div class="flexExItem fECube fEw"><span></span></div>
                </div>
              </div>
            </div>
          </li>

          <li id="general_CSSpositioning">
            <div class="question">
              <p>
                How does the CSS
                <code class="CSS"><span class="property">position</span></code>
                property work?
              </p>
            </div>

            <div class="answer">
              <p>
                The property values themselves fall within a larger hierarchy
                which I will explain here. In the most general sense, elements
                are either considered "positioned", or they're not. Let's look
                at non-positioned elements first.
              </p>
              <h3>Non-Positioned Elements</h3>
              <p>
                If you don't touch the position property at all, an element will
                by default have
                <code class="CSS"><span class="value">static</span></code>
                positioning. That means that the element will be positioned
                according to the normal flow of the document. It will obey
                margin rules as well as behavior like stacking for block
                elements and adjacency for inline elements.
              </p>
              <p>
                This means that the properties
                <code class="CSS"><span class="property">top</span></code
                >, <code class="CSS"><span class="property">right</span></code
                >, <code class="CSS"><span class="property">bottom</span></code
                >, and
                <code class="CSS"><span class="property">left</span></code
                >, which indicate offsets from those respective edges for
                positioned elements, have no effect on an element with static
                positioning. (I'll just call these "the offset properties" from
                now on.)
              </p>
              <h3>Positioned Elements</h3>
              <p>
                Everything else is considered "positioned", but there are
                subcategories here before we get to the actual properties. These
                all make use off the offset properties to achieve of a specific
                position, but differ in what those offsets implicitly refer to.
              </p>
              <h4>Relatively-Positioned Elements</h4>
              <p>
                This corresponds to the
                <code class="CSS"><span class="value">relative</span></code>
                value. Relative means "relative to where it would have been in a
                normal document flow."
              </p>
              <p id="relativePositioningExample">
                Note how this paragraph seems slightly off. In fact it is
                because it has the following positioning applied.
              </p>
              <pre
                class="CSS code"
              ><code class="CSS">#relativePositioningExample {
  position: relative;
  top: -10px;
  left: 5px;
}
</code></pre>
              <p>
                This rule instructs the element to position itself (meaning its
                top-left-hand corner) 10px above where it would have been
                normally, and 5px to the right.
              </p>
              <p>
                Note also how the surrounding elements (the paragraph above it,
                and the code block below it) are positioned as if that element
                were in the normal flow. It's almost as if relative positioning
                made a copy of the element, offset it to the original, and then
                made the original completely transparent so to render it
                unviewable. In other words, the flow of the document continues
                as if the relatively-positioned element were statically
                positioned.
              </p>
              <h4>Absolutely-Positioned Elements</h4>
              <p>
                Absolutely positioned elements are those which are completely
                taken out of the flow of the document, meaning that they
                disregard the elements around them, and vice versa. The two
                values corresponding to absolute positioning are
                <code class="CSS"><span class="value">absolute</span></code> and
                <code class="CSS"><span class="value">fixed</span></code
                >, and differ solely in their reference point. This reference
                point is a "containing block [element]", therefore the offset
                properties refer to offsets from the edges of that containing
                block:
              </p>
              <ol>
                <li>
                  <p>
                    <b
                      ><code class="CSS"
                        ><span class="value">absolute</span></code
                      ></b
                    >: the reference point is the nearest positioned ancestor,
                    using the definition of "positioned" that I've laid out
                    above. Here's an example.
                  </p>
                  <pre
                    class="HTML code"
                  ><code class="HTML">&lt;div style="position: relative; border: 1px dashed black"&gt;
  &lt;p&gt;The quick brown fox jumps over the lazy dog.&lt;/p&gt;
  &lt;p&gt;The quick brown fox jumps over the lazy dog.&lt;/p&gt;
  &lt;p&gt;The quick brown fox jumps over the lazy dog.&lt;/p&gt;
  &lt;div style="  width: 25%; 
                height: 25%; 
                background-color: red; 
                position: absolute;
                top: 0px; 
                left: 0px
                margin: 3px;"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
                  <div style="position: relative; border: 1px dashed black">
                    <p>The quick brown fox jumps over the lazy dog.</p>
                    <p>The quick brown fox jumps over the lazy dog.</p>
                    <p>The quick brown fox jumps over the lazy dog.</p>
                    <div
                      style="
                        width: 25%;
                        height: 25%;
                        background-color: red;
                        position: absolute;
                        top: 0px;
                        left: 0px;
                        margin: 3px;
                      "
                    ></div>
                  </div>
                  <p>Note how...</p>
                  <ul>
                    <li>
                      ...the red div is positioned absolutely (i.e. without
                      regard to other elements) with the reference point of its
                      nearest positioned ancestor, which is the containing div.
                    </li>
                    <li>
                      ...we had to set position: relative on the containing div
                      so that technically it would be considered "positioned" so
                      that this absolute positioning would refer to the correct
                      element.
                    </li>
                    <li>
                      ...the absolutely positioned red div's margin is
                      respected.
                    </li>
                    <li>
                      ...the red div is "on top" of the text. That's because
                      <code class="CSS"
                        ><span class="value">absolute</span></code
                      >
                      "creates a new
                      <a href="#css_stackingContext">stacking context</a> when
                      the value of z-index is not auto."
                    </li>
                  </ul>
                </li>
                <li>
                  <p>
                    <b
                      ><code class="CSS"
                        ><span class="value">fixed</span></code
                      ></b
                    >: the reference point is the viewport itself. I don't want
                    to create an example, because that means you'll be seeing
                    this element on this webpage no matter what. A common use
                    case for fixed positioning are header bars that are present
                    no matter where the user is in the document. Fixed
                    positioning also creates a new stacking context when z-index
                    is not auto.
                  </p>
                </li>
              </ol>
              <h4>Stickily-Positioned Elements</h4>
              <p>
                Yes, "stickily". This corresponds to the
                <code class="CSS"><span class="value">sticky</span></code>
                value. This value means that an element is "treated as
                relatively positioned until its containing block crosses a
                specified threshold...at which point it is treated as "stuck"
                until meeting the opposite edge of its containing block."
              </p>
              <pre
                class="CSS code"
              ><code class="CSS">#stickyPositioningExample {
  position: sticky;
  top: 10px;
  margin: 5px;
}
</code></pre>
              <p>
                Translation of the above rule: "this element shall be relatively
                positioned (no visible difference from static), until it reaches
                10px from the top of the screen, at which point fix it in place
                (i.e. let it "stick"), until it reaches the boundary of its
                parent."
              </p>
              <p>
                Try it out for yourself below. When you scroll down and the
                distance between the top edge of the viewport and the top edge
                of the purple block decreases to 10px, the purple block will
                stick to the screen and stay in view as long as its containing
                element is in view, which means that it will block the sentences
                below it proportional to the degree that the top edge of its
                containing block is outside of the viewport.
              </p>
              <div style="border: 1px dashed black">
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <div
                  style="
                    width: 250px;
                    height: 250px;
                    background-color: purple;
                    position: sticky;
                    top: 10px;
                    margin: 5px;
                    color: white;
                  "
                >
                  Don't leave me
                </div>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
                <p>The quick brown fox jumps over the lazy dog.</p>
              </div>
            </div>
          </li>
          <li id="css_stackingContext">
            <div class="question toDo">
              <p>What is a CSS "stacking context"?</p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <h3 id="jsSection">JavaScript</h3>

          <li id="general_JSIsAScriptingLanguage">
            <div class="question">
              <p>
                Why is JavaScript called a "scripting language" rather than a
                programming language?
              </p>
            </div>

            <div class="answer">
              <p>
                "Scripting languages are programming languages that don't
                require an explicit compilation step." Scripting languages are
                interpreted rather than compiled.
              </p>
              <p>
                Compilation is the act of transforming human-readable code into
                machine code so that it can be executed (an .exe file is an
                example of the end result of compilation). Think of how in Adobe
                Premiere you would often have to "render" video before you could
                view it. It is transforming the code into something the computer
                can digest.
              </p>
              <p>
                Scripting languages, on the other hand, do not need to be
                compiled. JavaScript is interpreted by the user's browser, which
                is the real "program" running the script. That's another way to
                think about a scripting language - it is usually executed within
                an existing program and not a program in and of itself. JS is
                executed within a web browser, VBA is executed within an MS
                Office product, and so on.
              </p>
              <p>
                This makes a lot of sense: "Initially, there were programming
                languages that was written to build programs like excel, word,
                browsers, games and etc. These programs were built with
                languages like c and java. Overtime, these programs needed a way
                for users to create new functionality, so they had to provide an
                interface to their bytecode and hence scripting languages were
                born."
              </p>
            </div>
          </li>

          <li id="general_JSLocalFiles">
            <div class="question">
              <p>
                JavaScript cannot access you or any user's local files (i.e.
                files on their machine). True or False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_JSClientServer">
            <div class="question">
              <p>
                JavaScript can only be used on the client (user) side of the
                client-server application structure.
              </p>
            </div>

            <div class="answer">
              <p>
                False. Though by and large JavaScript is used on the client side
                - the user's browser is responsible for fetching, interpreting,
                and applying the JS code - there are server-side applications.
                Node.js, for instance, "enables JavaScript to be used for
                server-side scripting, and runs scripts server-side to produce
                dynamic web page content <em>before</em> the page is sent to the
                user's web browser."
              </p>
            </div>
          </li>

          <li id="general_ECMAScript">
            <div class="question">
              <p>What is JavaScript's actual, standardized name?</p>
            </div>

            <div class="answer">
              <p>
                ECMAScript. Filename extension is .es. JavaScript is the best
                known <em>implementation</em> of ECMAScript.
              </p>
            </div>
          </li>

          <li id="synprof_JSCaseSensitive">
            <div class="question">
              <p>
                Unlike HTML or CSS, JavaScript is a case-sensitive language.
                True or False?
              </p>
            </div>

            <div class="answer">
              <p>True, though it is white-space insensitive.</p>
            </div>
          </li>

          <li id="synprof_JSsemicolons">
            <div class="question">
              <p>JavaScript statements end in semicolons. True or False?</p>
            </div>

            <div class="answer">
              <p>
                True.
                <a href="_pages/Examples/JSHelloWorldTest.htm">Hello, world!</a>
              </p>
            </div>
          </li>

          <li id="attprof_script">
            <div class="question">
              <p>How do you call JavaScript from an HTML document?</p>
            </div>

            <div class="answer">
              <p>
                You execute JavaScript using the
                <code class="HTML element2">script</code> tag - you can either:
              </p>
              <ol class="lower-alpha">
                <li>
                  use its <code class="HTML attribute">src</code> attribute to
                  point it to an external file (as with CSS, external code is
                  the recommended path), with nothing between the opening and
                  closing tags, or...
                </li>
                <li>
                  put the JavaScript itself between the the opening and closing
                  tags.
                </li>
              </ol>
              <p>Below is an example of both approaches.</p>
              <code class="block HTML">
                <span class="comment2"> A. Link to External File </span><br />
                <span class="element2"
                  >script
                  <span class="attribute">src</span>
                  =
                  <span class="value">"_scripts/JGWebReference.js"</span></span
                ><span class="element2 closetag">script</span>
                <br />
                <br />
                <span class="comment2"> B. Embedded Script</span><br />
                <span class="element2">script</span>
                <span class="nest"> alert("Hello, world!"); </span>
                <span class="element2 closetag">script</span>
              </code>
              <p>
                Do not combine both approaches - i.e, use the
                <code class="HTML"><span class="attribute">src</span></code>
                attribute AND put some code in between the tags.
              </p>
              <p>
                Note that you may see, with approach (a), the inclusion of
                <code class="HTML"
                  ><span class="attribute">type</span> =
                  <span class="value">"text/javascript"</span></code
                >
                in the <code class="HTML element2">script</code> tag - this is
                no longer required in HTML5.
              </p>
              <p>
                Where you place the tag is up to you - it's generally a good
                idea to put it right before the
                <code class="HTML element2 closetag">body</code> closing tag so
                that the script has access to all the elements on the page. If
                you call the script in the head of the document, then try to
                access an element on the page, it will fail. But
                <a
                  href="http://stackoverflow.com/questions/436411/where-should-i-put-script-tags-in-html-markup"
                  >it's a</a
                >
                more
                <a
                  href="https://developers.google.com/speed/docs/insights/BlockingJS"
                  >complicated matter</a
                >, because some scripts do not need to get elements / set their
                values and may be best suited in the
                <code class="HTML element2">head</code> .
              </p>
            </div>
          </li>

          <li id="methprof_window.alert">
            <div class="question">
              <p>How do you use JS to create a pop-up window?</p>
            </div>

            <div class="answer">
              <h3>Alert: Pop-up With OK Button</h3>
              <p>
                The <code class="JS method">alert()</code> method of the
                <code class="JS object">window</code> object takes as an
                argument the text string to be displayed, but the argument is
                optional.
              </p>
              <code class="block JS">
                window.<span class="method">alert</span
                ><span class="punctuation">(</span
                ><span class="string">"Hello World!"</span
                ><span class="punctuation">)</span>; <br /><br />
                <span class="comment">// or... </span>
                <br /><br />
                window.<span class="method">alert</span
                ><span class="punctuation">(</span>textstring<span
                  class="punctuation"
                  >)</span
                >;
                <br />
                <span class="comment"
                  >// ...where "textstring" is a variable representing a text
                  string.
                </span>
              </code>
              <h3>Confirm: Pop-up with OK and Cancel Button</h3>
              <p>
                The <code class="JS method">confirm()</code> method of the
                <code class="JS object">window</code> object takes as an
                argument the text string to be displayed, but the argument is
                optional. If the user clicks OK, then the Boolean value true is
                returned; if the user clicks Cancel or Xs out the window, then
                the value is false. In the below example, the returned value
                will be stored in the variable userOKtoExit.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> userOKtoExit = confirm("Are you sure you would like to exit?");</code></pre>
              <h3>Prompt: Pop-up with Text Box</h3>
              <p>
                The <code class="JS method">prompt()</code> method of the
                <code class="JS object">window</code> object takes as an
                argument the text string to be displayed, but the argument is
                optional. The method simply returns what the user typed into the
                box. If the user clicks OK but enters nothing, then the method
                returns an empty string. If the user clicks Cancel or Xs out the
                window, then the method returns null. In the below example, the
                returned value will be stored in the variable userFeedback.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> userFeedback = prompt("How did you feel about your visit today?");</code></pre>
            </div>
          </li>

          <li id="synprof_var">
            <div class="question">
              <p>
                How do you create and assign values and their datatypes to
                variables in JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                Using the <code class="JS statement">var</code> statement, like
                so:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> year<span class="punctuation">;</span>
year <span class="operator">=</span> <span class="value">2011</span><span class="punctuation">;
</span>
<span class="comment">// or... </span>
<span class="statement">
var</span> year = <span class="value">2011</span>;</code>
</pre>
              <p>A couple notes on JS variable conventions:</p>
              <ul>
                <li>The variable name cannot contain a space.</li>
                <li>The variable name cannot start with a number.</li>
                <li>It's cool to use _ and $ in your variable names.</li>
                <li>
                  If you misspell a variable name later on, then JS will create
                  a new variable with that name (technically, it "creates a new
                  property on the global object"). This is the equivalent of
                  coding in a VBA module without writing
                  <code class="VBA">Option Explicit</code> at the top.
                </li>
              </ul>
              <p>
                You can declare multiple variables with one
                <code class="JS statement">var</code> statement, like so:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> year = <span class="value">2011</span>, month = <span class="value">"August"</span>, day = <span class="value">23</span>; </code>
</pre>
              <p>
                Note also that the programmer assigns no explicit data types to
                the variables - JS guesses the data type is based on the value
                you assign to the variable. Because
                <code class="JS"><span class="value">"August"</span></code> is
                in double quotes (single quotes will work too), then it will be
                treated as a string.
              </p>
              <p>
                This is why JS is sometimes called a "weakly-typed" language, or
                an "untyped" language. It is more accurate to say, however, that
                it is "dynamically typed", and that the type assignment comes
                from JS and not the user. These are the seven types that JS can
                assign to your variables:
              </p>
              <ul>
                <li id="synprof_jsPrimitive">
                  Six data types that are primitives (A primitive (which is
                  "data that is not an object and has no methods...all
                  primitives are immutable (cannot be changed)")...:
                  <ul>
                    <li>
                      <b>Boolean</b>* - only possible values are
                      <code class="JS"><span class="value">true</span></code> or
                      <code class="JS"><span class="value">false</span></code
                      >. If being compared to a number,
                      <code class="JS"><span class="value">true</span></code> is
                      converted to
                      <code class="JS"
                        ><span class="value">1</span> and
                        <span class="value">false</span></code
                      >
                      is converted to
                      <code class="JS"><span class="value">0</span></code
                      >.
                    </li>
                    <li>
                      <b>Undefined</b> - this is for variables which have been
                      declared, but no value assigned.
                    </li>
                    <li>
                      <b>Null</b> - only possible value is
                      <code class="JS"><span class="value">null</span></code
                      >. This differs from Undefined in that Null "represents
                      the <em>intentional</em> absence of any object value."
                    </li>
                    <li>
                      <b>Number</b>* - a double-precision 64-bit floating point
                      number (between -(2<span class="superscript">53</span> -1)
                      and 2<span class="superscript">53</span> -1).
                    </li>
                    <li>
                      <b>String</b>* - "a set of 'elements' of 16-bit unsigned
                      integer values. Each element in the String occupies a
                      position in the String. The first element is at index 0,
                      the next at index 1, and so on. The length of a String is
                      the number of elements in it."
                    </li>
                    <span class="toDo">
                      <li><b>Symbol</b> (new in ECMAScript 6)</li>
                    </span>
                  </ul>
                </li>
                <li>...and #7, <b>Object</b>.</li>
              </ul>
              <p>
                List items with asterisks have corresponding built-in objects
                which primitives may be converted to in order to perform certain
                methods, i.e. "jeff".length makes JS create a "wrapper" String
                object for the "jeff" value so that in can access String.length.
                More on objects later.
              </p>
            </div>
          </li>

          <li id="synprof_JS_typeof">
            <div class="question">
              <p>How would you view the data type of a JavaScript variable?</p>
            </div>

            <div class="answer">
              <p>
                You would use the
                <code class="JS"><span class="operator">typeof</span></code>
                operator. For instance, if you were trying to figure out the
                type of value in the variable moneyOrder, you would write:
              </p>
              <pre
                class="JS code"
              ><code class="JS">console.log(<span class = "operator">typeof</span> moneyOrder);
                
<span class="comment">// Console logs "number"</span></code>
</pre>
              <p>
                Note that the result returned is a string, so the below would be
                the proper way to use this in a conditional statement:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (<span class = "operator">typeof</span> moneyOrder === "number") {
    <span class="comment">// Do stuff</span>
}</code></pre>
            </div>
          </li>

          <li id="synprof_JS_hoisting">
            <div class="question">
              <p>What is "hoisting"?</p>
            </div>

            <div class="answer">
              <p>
                "Because variable declarations (and declarations in general
                [,including function definitions]) are processed before any code
                is executed, declaring a variable anywhere in the code is
                equivalent to declaring it at the top. This also means that a
                variable can appear to be used before it's declared. This
                behavior is called "hoisting", as it appears that the variable
                declaration is moved to the top of the function or global code."
              </p>
              <p>
                Therefore you can call functions before you even define them,
                though for legibility, please define them first.
              </p>
            </div>
          </li>

          <li id="general_JS_classHoisting">
            <div class="question">
              <p>
                Javascript class declarations, like function declarations, are
                hoisted. True or false?
              </p>
            </div>

            <div class="answer">
              <p>False.</p>
            </div>
          </li>

          <li id="general_JS_statementVsExpression">
            <div class="question">
              <p>
                What is the difference between a statement and an expression?
              </p>
            </div>

            <div class="answer">
              <p>
                According to MDN, "an expression is any valid unit of code that
                resolves to a value." Further detail:
              </p>
              <blockquote>
                <p>
                  Every syntactically valid expression resolves to some value
                  but conceptually, there are two types of expressions:
                </p>
                <ol>
                  <li>
                    with side effects (for example: those that assign value to a
                    variable) and
                  </li>
                  <li>
                    those that in some sense evaluate and therefore resolve to a
                    value.
                  </li>
                </ol>

                <p>
                  The expression x = 7 is an example of the first type. This
                  expression uses the = operator to assign the value seven to
                  the variable x. The expression itself evaluates to seven.
                </p>

                <p>
                  The code 3 + 4 is an example of the second expression type.
                  This expression uses the + operator to add three and four
                  together without assigning the result, seven, to a variable.
                </p>
                <p>JavaScript has the following expression categories:</p>
                <ul>
                  <li>
                    Arithmetic: evaluates to a number, for example 3.14159.
                    (Generally uses arithmetic operators.)
                  </li>
                  <li>
                    String: evaluates to a character string, for example, "Fred"
                    or "234". (Generally uses string operators.)
                  </li>
                  <li>
                    Logical: evaluates to true or false. (Often involves logical
                    operators.)
                  </li>
                  <li>
                    Primary expressions: Basic keywords and general expressions
                    in JavaScript.
                  </li>
                  <li>
                    Left-hand-side expressions: Left values are the destination
                    of an assignment.
                  </li>
                </ul>
              </blockquote>
              <p>
                With that said, here are some examples of expressions, assuming
                x and y are already defined. Note that "resolves" could also be
                written as "evaluates to":
              </p>
              <pre
                class="JS code"
              ><code class="JS">this                         // resolves to Window
x = 2                        // resolves to 2
x                            // resolves to 2
1 + (y = 3)                  // resolves to 4 (after inner resolves to 3)
'hello'                      // resolves to 'hello'
true                         // resolves to true
1 &amp;&amp; 2                       // resolves to 2
0 &amp;&amp; 1                       // resolves to 0
1 || 2                       // resolves to 1
!!Function.prototype.apply   // resolves to true
[x, y] = [y, x]              // resolves to [3, 2]
</code></pre>
              <p>
                Note that there are no <em>declarations</em> in the above
                examples like let, var, const, etc.
              </p>
              <p>
                Now, onto statements. "Statements are just perform some actions
                but do not produce any value or output whereas expressions
                return some value."
              </p>
              <p>
                According to to MDN, "JavaScript applications consist of
                statements with an appropriate syntax." Put another way,
                programs are built from statements. Statements fall under
                several categories, like control flow statements (if...else,
                switch, continue, break), function statements (function, async
                function, class, return), and declarations (var, let, const).
              </p>
              <p>
                "In computer programming, a statement is a syntactic unit of an
                imperative programming language that expresses some action to be
                carried out.... A statement may have internal components (e.g.,
                expressions)....in purely functional programming, there are no
                statements; everything is an expression. This distinction is
                frequently observed in wording: a statement is
                <em>executed</em>, while an expression is <em>evaluated</em>."
              </p>
            </div>
          </li>

          <li id="synprof_JSif">
            <div class="question">
              <p>How do you write an IF statement in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                Below is the syntax for a JavaScript
                <code class="JS statement"
                  ><span class="statement">if</span></code
                >
                statement, which "executes a statement if a specified condition
                is truthy". The <code class="JS statement">else</code> statement
                is optional.
              </p>
              <pre
                class="code syntax"
                id="JSsyntax1"
              ><code class="JS"><span class="statement">if</span> (condition) {
<span class="comment">  /* execute this code */</span>
} <code class="JS statement">else</code> {
<span class="comment">  /* execute this code */</span>
}</code></pre>
              <p>
                Keep in mind that the indentation, use of brackets to enclose
                the code, and line breaks shown above is not necessarily
                required but is the accepted best practice. You could write an
                if statement that looks like this...
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (i &lt; 10) victory = true; <span class="statement">else</span> victory = false; </code></pre>
              <p>
                ...but it only works because both the if and else conditions
                include only one statement. If there is more than one statement
                then you will need to wrap them in a
                <a href="#general_JS_blockStatement">block statement</a>.
              </p>
              <p>
                Keep in mind also that everything within the parentheses
                following the if keyword must be a condition that ultimately
                boils down to a simple true or false. The below is an example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">if</span> (P1Score  P2Score) {
    window.alert("Player 1 Wins!");
} <code class="JS statement">else</code> {
    window.alert("Player 2 Wins!");
}</code></pre>
              <div class="sidenote">
                <p>
                  As it turns out, the above is actually a lengthy way to write
                  this conditional statement. For a simple if/else, you could
                  use the
                  <a href="#synprof_JS_ternaryOperator">ternary operator</a>:
                </p>
                <pre
                  class="JS code"
                ><code class="JS">var result = P1Score &gt; P2Score ? "Player 1 Wins!" : "Player 2 Wins!"
window.alert(result);</code></pre>
              </div>
              <p>
                If you want to write an "else if" statement, it's as simple as
                the below:
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><span class=" statement">if</span> (conditionA) {
<span class="comment">  /* execute this code */</span>
} <span class=" statement">else if</span> (conditionB) {
<span class="comment">  /* execute this code */</span>
} <span class=" statement">else if</span> (conditionC) {
<span class="comment">  /* execute this code */</span>
} <span class=" statement">else</span> {
<span class="comment">  /* execute this code */</span>
}</code></pre>
            </div>
          </li>

          <li id="general_JS_TruthyVSFalsy">
            <div class="question">
              <p>What does "truthy" and "falsy" mean?</p>
            </div>

            <div class="answer">
              <p>
                "In JavaScript, a truthy value is a value that is considered
                true when evaluated in a Boolean context. All values are truthy
                unless they are defined as falsy (i.e., except for false, 0, "",
                null, undefined, and NaN)."
              </p>
              <p>
                "Do not confuse the primitive boolean values true and false with
                truthiness or falsiness of the Boolean object. Any value that is
                not undefined, null, 0, NaN, or the empty string (""), and any
                object, including a Boolean object whose value is false, is
                considered truthy when used as the condition."
              </p>
              <p>
                This is how <code class="JS statement">if</code> statements
                without any operators work. For example, the below behaves as we
                would expect because we assigned the primitive Boolean value of
                <code class="JS"><span class="value">false</span></code> to
                <code class="JS">test</code>:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> test = <span class="value">false</span>;
                        
<span class=" statement">if</span> (test) {...};            <span class="comment">// false</span>
<span class=" statement">if</span> (test == <span class="value">true</span>) {...};    <span class="comment">// false</span></code></pre>
              <p>
                Let's see what happens, however, when
                <code class="JS">test</code> is a Boolean <em>object</em>, not a
                primitive.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> test = new Boolean(false);
                        
<span class=" statement">if</span> (test) {...};            <span class="comment">// true</span>
<span class=" statement">if</span> (test == <span class="value">true</span>) {...};    <span class="comment">// false</span></code></pre>
              <p>Here are examples of truthy values per MDN:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">if</span> (true)
<span class=" statement">if</span> ({})
<span class=" statement">if</span> ([])
<span class=" statement">if</span> (42)
<span class=" statement">if</span> ("foo")
<span class=" statement">if</span> (new Date())
<span class=" statement">if</span> (-42)
<span class=" statement">if</span> (3.14)
<span class=" statement">if</span> (-3.14)
<span class=" statement">if</span> (Infinity)
<span class=" statement">if</span> (-Infinity)</code></pre>
              <p>...and here are examples of falsy values:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">if</span> (false)
<span class=" statement">if</span> (null)
<span class=" statement">if</span> (undefined)
<span class=" statement">if</span> (0)
<span class=" statement">if</span> (NaN)
<span class=" statement">if</span> ('')
<span class=" statement">if</span> ("")
<span class=" statement">if</span> (document.all) [1]</code></pre>
            </div>
          </li>

          <li id="general_JS_testNumLessThanLetter">
            <div class="question">
              <p>What will the following condition evaluate to, and why?</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> ("5" &lt; "a")</code></pre>
            </div>

            <div class="answer">
              <p>
                True. When strings are compared, they follow the order of the
                Unicode character set, in which numeric characters come first.
              </p>
            </div>
          </li>

          <li id="general_JS_between">
            <div class="question">
              <p>
                JavaScript's Math.between() method allows you to test if a
                number is between two other numbers. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                False. There is no such method. In order to test whether a
                number is between two numbers, you need to test two conditions
                and join them using the AND &amp;&amp; operator, like so:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (20 &lt;= age &amp;&amp; age &lt;= 30)</code></pre>
            </div>
          </li>

          <li id="synprof_JSequalssign">
            <div class="question">
              <p>
                Explain the complicated role of the equals sign (=) in
                JavaScript.
              </p>
            </div>

            <div class="answer">
              <p>
                There are three distinct uses of the = operator, corresponding
                to the number of times that operator appears.
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Symbol</td>
                    <td>Type</td>
                    <td>Role</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code class="JS operator">=</code></td>
                    <td>assignment</td>
                    <td>
                      Used to only set a value. For instance,
                      <code class="JS"
                        ><span class="statement">var</span> year =
                        <span class="value">2011</span>;</code
                      >. If you try to use the single equals sign to check
                      equality, it will not work.
                    </td>
                  </tr>
                  <tr>
                    <td><code class="JS operator">==</code></td>
                    <td>comparison - equality</td>
                    <td>
                      This is used to see if two values are equal, but first
                      "converts the operands if they are not of the same type".
                      Therefore
                      <code class="JS"
                        >(<span class="string">"2"</span> ==
                        <span class="value">2</span>)</code
                      >
                      would evaluate to
                      <code class="JS"><span class="value">true</span></code
                      >.
                    </td>
                  </tr>
                  <tr>
                    <td><code class="JS operator">===</code></td>
                    <td>comparison - identity/"strict equality"</td>
                    <td>
                      This is used to see if two values are equal with no type
                      conversion. Therefore
                      <code class="JS"
                        >(<span class="string">"2"</span> ===
                        <span class="value">2</span>)</code
                      >
                      would evaluate to
                      <code class="JS"><span class="value">false</span></code
                      >.
                    </td>
                  </tr>
                </tbody>
              </table>
              <p>
                Those same rules apply to the not equals operators, which are
                the comparison operators above with one of the = signs replaced
                with !:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="string">"2"</span> != <span class="value">2</span>     <span class="comment">// false</span>
<span class="string">"2"</span> !== <span class="value">2</span>    <span class="comment">// true</span>
<span class="string">false</span> != <span class="value">0</span>     <span class="comment">// false</span>
<span class="string">false</span> !== <span class="value">0</span>    <span class="comment">// true</span></code></pre>
              <p>
                Those same rules, however, do not apply to the greater-than- or
                less-than-or-equal to operators, which are what you would
                expect: <code class="JS operator">&lt;=</code> and
                <code class="JS operator">&gt;=</code>.
              </p>
              <p>
                You can use console.log() to quickly test if a condition is
                true:
              </p>
              <pre
                class="JS code"
              ><code class="JS">console.log(8 === 6);   <span class="comment">// false</span></code></pre>
            </div>
          </li>

          <li id="synprof_JS_">
            <div class="question">
              <p>How do you add or subtract 1 to a variable in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                You would use the increment operator (<code class="JS operator"
                  >++</code
                >) for addition, and the decrement operator (<code
                  class="JS operator"
                  >--</code
                >) for subtraction. Both of the below examples, for instance,
                change the value of <code class="JS">x</code> to
                <code class="JS"><span class="value">4</span></code
                >.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> x = <span class="value">3</span><span class="punctuation">;</span>
x<span class="operator">++</span><span class="punctuation">;</span></code>
</pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> x = <span class="value">3</span><span class="punctuation">;</span>
<span class="operator">++</span>x<span class="punctuation">;</span></code>
</pre>
              <p>
                The difference between the postfix and prefix forms, however,
                becomes more important when using the incrementation of one
                variable to assign a value to another. In the postfix form, it
                "returns the value <em>before</em> incrementing":
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> x = <span class="value">3</span><span class="punctuation">;</span>
<span class="statement">var</span> y = x<span class="operator">++</span><span class="punctuation">;</span>
<span class="comment">// y = 3. y is assigned the value of x (3), then x is incremented to 4.</span></code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> x = <span class="value">3</span><span class="punctuation">;</span>
<span class="statement">var</span> y = <span class="operator">++</span>x<span class="punctuation">;</span>
<span class="comment">// y = 4. x is incremented to 4, then assigned to y.</span></code></pre>
              <p></p>
            </div>
          </li>

          <li id="synprof_JS_assignmentoperators">
            <div class="question">
              <p>
                What is the best way to reassign the value of a JS variable if
                the reassignment is the variable's existing value plus/minus
                another value other than 1?
              </p>
            </div>

            <div class="answer">
              <p>
                JavaScript has special assignment operators that make this easy:
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Operator</td>
                    <td>Type</td>
                    <td>Example: initial value of x = 4</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code class="JS operator">+=</code></td>
                    <td>addition assignment</td>
                    <td>
                      <code class="JS"
                        >x <span class="operator">+=</span>
                        <span class="value">2</span
                        ><span class="punctuation">;</span>
                        <span class="comment">// x = 6</span></code
                      >
                    </td>
                  </tr>
                  <tr>
                    <td><code class="JS operator">-=</code></td>
                    <td>subtraction assignment</td>
                    <td>
                      <code class="JS"
                        >x <span class="operator">-=</span>
                        <span class="value">2</span
                        ><span class="punctuation">;</span>
                        <span class="comment">// x = 2</span></code
                      >
                    </td>
                  </tr>
                  <tr>
                    <td><code class="JS operator">*=</code></td>
                    <td>multiplication assignment</td>
                    <td>
                      <code class="JS"
                        >x <span class="operator">*=</span>
                        <span class="value">2</span
                        ><span class="punctuation">;</span>
                        <span class="comment">// x = 8</span></code
                      >
                    </td>
                  </tr>
                  <tr>
                    <td><code class="JS operator">/=</code></td>
                    <td>division assignment</td>
                    <td>
                      <code class="JS"
                        >x <span class="operator">/=</span>
                        <span class="value">2</span
                        ><span class="punctuation">;</span>
                        <span class="comment">// x = 2</span></code
                      >
                    </td>
                  </tr>
                  <tr>
                    <td colspan="3">
                      <a
                        href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators"
                        >...and many more.</a
                      >
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>
          <li id="synprof_JS_AndOr">
            <div class="question">
              <p>
                How do you use an AND or an OR clause in JavaScript when
                creating a condition?
              </p>
            </div>

            <div class="answer">
              <p>
                The symbol used for AND is a double ampersand (&amp;&amp;), and
                the symbol used for OR is a double pipe (||). For example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (P1Score &gt; P2Score &amp;&amp; gameover === <span class="value">true</span>) {
    window.alert("Player 1 Wins!");
} <span class="statement">else</span> {
    window.alert("Player 2 Wins!");
}</code></pre>
              <p>
                These logical operators are not nearly as simple as they seem,
                however. First, it should be stressed that logical operators are
                not merely used in the condition of an if statement. They can be
                used anywhere, and they "actually return the value of one of the
                specified operands." Here's how they both behave.
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Operator</td>
                    <td>Usage</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      Logical AND (<code class="JS operator">&amp;&amp;</code>)
                    </td>
                    <td><code class="JS">expr1 &amp;&amp; expr2</code></td>
                    <td>
                      Returns expr1 if it can be converted to false; otherwise,
                      returns expr2. Thus, when used with Boolean values,
                      <code class="JS operator">&amp;&amp;</code> returns true
                      if both operands are true; otherwise, returns false.
                    </td>
                  </tr>
                  <tr>
                    <td>Logical OR (<code class="JS operator">||</code>)</td>
                    <td><code class="JS">expr1 || expr2</code></td>
                    <td>
                      Returns expr1 if it can be converted to true; otherwise,
                      returns expr2. Thus, when used with Boolean values,
                      <code class="JS operator">||</code> returns true if either
                      operand is true.
                    </td>
                  </tr>
                  <tr>
                    <td>Logical NOT (<code class="JS operator">!</code>)</td>
                    <td><code class="JS">!expr1</code></td>
                    <td>
                      Returns false if its single operand can be converted to
                      true; otherwise, returns true.
                    </td>
                  </tr>
                </tbody>
              </table>
              <p>
                Let's go step-by step through the first example to see how the
                top line of the if statement behaves:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// 1. Test if expression #1 is falsy / can be converted to false.</span>
<span class="statement">if</span> (P1Score &gt; P2Score &amp;&amp; gameover === <span class="value">true</span>) {

<span class="comment">// 2. Expression #1 is not falsy, which means that expression #2 is automatically returned.</span>
<span class="statement">if</span> (gameover === <span class="value">true</span>) {

<span class="comment">// 3. The final result of expression #2 assuming that gameover is indeed true, which means that this if statement will be executed.</span>
<span class="statement">if</span> (<span class="value">true</span>) {
</code></pre>
              <p>
                "Even though the &amp;&amp; and || operators can be used with
                operands that are not Boolean values, they can still be
                considered Boolean operators since their return values can
                always be converted to Boolean values."
              </p>
              <p></p>
              <p>
                There is an important concept of "short-circuit" evaulation at
                play here:
              </p>
              <ul>
                <li>
                  false &amp;&amp; (anything) is short-circuit evaluated to
                  false.
                </li>
                <li>true || (anything) is short-circuit evaluated to true.</li>
              </ul>
              <p>
                Let's look at an example of how these operators actually return
                values are not merely used to test conditions. In a later
                example on minification, the minifier changes this code:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> emailField = document.getElementById("focusblurtest2");

emailField.onfocus = function() {
    <span class=" statement">if</span> (emailField.value === "your email") {
        emailField.value = "";
    }
};

emailField.onblur = function() {
    <span class=" statement">if</span> (emailField.value === "") {
        emailField.value = "your email";
    }
};
</code></pre>
              <p>...into this:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> emailField = document.getElementById("focusblurtest2");
                            
emailField.onfocus = function() {
    <span style="color:blue; background-color:yellow;">"your email" === emailField.value</span> &amp;&amp; <span style="color:green; background-color:yellow;">(emailField.value="")</span>
};

emailField.onblur = function() {
    "" === emailField.value &amp;&amp; (emailField.value="your email")
};</code></pre>

              <p>
                Remember the rules of &amp;&amp;: if expression 1 is false, then
                return false (because there's no point evaluating the second
                expression), otherwise, return expression 2. Now, expression 2
                itself may be false, in which case this could all evaluate to
                false anyway.
              </p>
              <p>
                In the example above, if
                <code class="JS"
                  ><span style="color: blue; background-color: yellow"
                    >"your email" === emailField.value</span
                  >
                  (expr1)</code
                >
                evaluates to true, then the rules of &amp;&amp; say to return
                <code class="JS">expr2</code>, which in this case happens to be
                an assignment,
                <code class="JS"
                  ><span style="color: green; background-color: yellow"
                    >(emailField.value="")</span
                  ></code
                >. This is an example of how the rules of these operators can be
                used to circumvent the
                <code class="JS"><span class="statement">if</span></code>
                statement entirely.
              </p>
              <p>
                Note how the assignments on the right hand side of the
                &amp;&amp; have been wrapped in parentheses. This is because the
                assignment operator (=) actually has a lower precedence than
                &amp;&amp;. If those parentheses weren't added, then the
                highlighted example would have simply ignored the assignment
                operator and would have returned
                <code class="JS"
                  ><span style="color: green; background-color: yellow"
                    >emailField.value</span
                  ></code
                >.
              </p>
              <p>
                Also note that the &amp;&amp; operator takes precedence over the
                || operator...the below example, according to MDN, "stresses the
                importance of requiring the right hand operator to be a single
                expression (grouped if needed by parentheses)."
              </p>
              <pre
                class="JS code"
              ><code class="JS">false &amp;&amp; true  || true      <span class="comment">// returns true</span>
false &amp;&amp; (true || true)     <span class="comment">// returns false</span></code></pre>
              <p>
                Here's another example - in the following function, the use of
                the || operator allows the function to easily handle a potential
                undefined value without an if statement:
              </p>
              <pre class="JS code"><code class="JS">function likes(names) {
  names = names || [];
  switch(names.length){
    case 0: 
      return 'no one likes this'; 
      break;
    <span class="comment">// more cases, etc.</span>
}</code></pre>
              <p>
                As you can see, the function is expecting an array value for its
                parameter names. The function has an array-specific method
                (length()) that will error out if called on an undefined value.
                The function needs an array to exist in order to proceed.
              </p>
              <p>
                Therefore names = names || [], translated into English, is:
                "We're going to reassign the names parameter we just received by
                testing its truthiness with an OR operator. If names is truthy,
                then reassign it to the same value, leaving it unchanged. If
                names is falsy, then reassign it to an empty array."
              </p>
            </div>
          </li>

          <li id="synprof_JS_modulus">
            <div class="question">
              <p>
                The operator used to get a remainder in JS is the same as VBA,
                the % (modulo). True or False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> x = <span class="value">3</span><span class="punctuation">;</span>
<span class="statement">var</span> y = x <span class="operator">%</span> 2<span class="punctuation">;</span>
<span class="comment">// y = 1. </span></code></pre>
            </div>
          </li>

          <li id="synprof_JS_ternaryOperator">
            <div class="question">
              <p>
                Describe how the ternary operator, which is frequently used as a
                shortcut for the if statement, is used.
              </p>
            </div>

            <div class="answer">
              <p>
                The basic syntax of the ternary operator (which is named as such
                because it is the only JS operator which takes three operands)
                is below:
              </p>
              <pre
                class="code syntax"
              ><code class="JS">condition ? expression1 : expression2 </code></pre>
              <p>
                Here's a real world example of how this would work on the right
                side of a variable assignment:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> highScore = <span class="value">P1Score &gt; P2Score ? P1Score : P2Score</span>

<span class="comment">// Translation: When assigning a value to highScore: if P1Score is greater than P2Score, use P1Score, else use P2Score. </span></code></pre>
            </div>
          </li>

          <li id="synprof_JS_consolemessages">
            <div class="question">
              <p>
                How do you send messages to the console in JavaScript (Similar
                to VBA's <code class="VBA">Debug.Print</code>)?
              </p>
            </div>

            <div class="answer">
              <p>
                There are a variety of ways you can send messages to the
                console, all of which are methods of the
                <code class="JS object">console</code> object. The most common
                is
                <code class="JS">console.<span class="method">log</span>()</code
                >, which returns the value of whatever is in the parentheses.
                For example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> x = <span class="value">3</span><span class="punctuation">;</span>
console.<span class="method">log</span>(x);
<span class="comment">// Console will return "3". </span>

<span class="statement">var</span> x = <span class="value">3</span>, y = <span class="value">4</span><span class="punctuation">;</span>
console.<span class="method">log</span>(x, y);
<span class="comment">// Console will return "3 4". </span>

<span class="statement">var</span> x = <span class="value">3</span>, y = <span class="value">4</span><span class="punctuation">;</span>
console.<span class="method">log</span>(x + y);
<span class="comment">// Console will return "7". </span></code></pre>
              <p>
                There are other methods, such as
                <code class="JS"
                  >console.<span class="method">info</span>()</code
                >,
                <code class="JS"
                  >console.<span class="method">warn</span>()</code
                >,
                <code class="JS"
                  >console.<span class="method">error</span>()</code
                >, which all essentially do the same thing, but may be more
                semantically accurate, and are usually given special formatting
                by browsers. See below, for example, how Firefox and Chrome
                treat the same console messages.
              </p>
              <h3>Chrome Console Messages</h3>
              <img src="_images/synprof_JS_consolemessages_Chrome.png" />
              <h3>Firefox Console Messages</h3>
              <img src="_images/synprof_JS_consolemessages_Firefox.png" />
            </div>
          </li>

          <li id="stateprof_JS_WHILE">
            <div class="question">
              <p>What are three basic loops you can execute in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                Since you, reader, likely have a background in VBA (*wink*), you
                already know about these types of loops, but of course you need
                to know the syntax.
              </p>
              <h3>
                <code class="JS"><span class="statement">while</span></code>
                Loop
              </h3>
              <pre
                class="code syntax"
              ><code class="JS"><span class="statement">while</span> (condition) {
    /* do stuff */
};</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">while</span> (a &lt; 10) {
    console.log(a);
    a++;
}

<span class="comment">// Translation: While a is less than 10, send the value of a to the console, then add 1 to it. Repeat this loop until a is no longer less than 10. </span></code></pre>

              <p>
                <code class="JS"><span class="statement">while</span></code> is
                ideal when you want to use a loop, but you don't know how many
                times you'll have to execute it. Remember, you must have
                something in the body of that loop that can affect that
                condition, or else it will run forever!
              </p>

              <h3>
                <code class="JS"><span class="statement">do</span></code
                >...<code class="JS"><span class="statement">while</span></code>
                Loop (much rarer than
                <code class="JS"><span class="statement">while</span></code>
                Loop)
              </h3>
              <p>
                Note that the code is executed at least once no matter what,
                because the the condition is not checked until the end.
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><code class="JS"><span class="statement">do</span></code> {
    /* stuff to do */;                      
} <code class="JS"><span class="statement">while</span></code> (condition);</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">do</span>  {
    console.log(a);
    a++;
} <span class="statement">while</span> (a &lt; 10);

<span class="comment">// Translation: Send the value of a to the console, then add 1 to it. Check if the value is less than 10, if so, repeat. </span></code></pre>
              <p>
                Note in the above two examples that if a was greater than 10 to
                begin with, then the value of a would never have been sent to
                the console in the while loop, but would have been sent to the
                console once in the do-while loop.
              </p>
              <h3>
                <code class="JS"><span class="statement">for</span></code> Loop
              </h3>
              Unlike VBA, which only has the condition in the "head" of the
              loop, leaving you to set the counter variable before the loop and
              increment the counter variable in the body of the loop, JavaScript
              takes care of all of this in the head of the loop between the
              parentheses after
              <code class="JS"><span class="statement">for</span></code
              >.
              <pre
                class="code syntax"
              ><code class="JS"><strong>MDN Definition:</strong>
for ([initialization]; [condition]; [final-expression]) {
    /* do stuff */;
}

<strong>Jeff Definition:</strong>
for ([set value of index/counter]; [check condition]; [increment counter]) {
    /* do stuff */;
}</code></pre>
              <p>
                Here's an example; the variable name "i" is very common as a
                counter variable, since it is the first letter of the word
                "index."
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">for</span> (var i = 1; i &lt; 10; i++) {
    console.log(i);
}

<span class="comment">// Translation: Declare the variable "i" and set it equal to 1. While i is less than 10, send the value to the console... </span>

<span class="comment">// Console: 1 </span>

<span class="comment">// ...then, AFTER the statement block of the loop completes, execute the [final-expression], which is the incrementation (i++) of the variable i by one. </span>

<span class="statement">for</span> (var i = 1; i &lt; 10; i += 2) {
    console.log(i);
}

<span class="comment">// Translation: Declare the variable "i" and set it equal to 1. While i is less than 10, send the value to the console. Then add 2 to i. </span>

<span class="comment">// Console: 1, 3, 5, 7, 9. </span>
</code></pre>
              <p>
                Remember that in the third part of the
                <code class="JS"><span class="statement">for</span></code>
                "header" you are <em>assigning</em> a value. Therefore i + 2
                will not work because + by itself is not an assignment operator.
              </p>
            </div>
          </li>

          <li id="general_JS_purposeOfDoWhile">
            <div class="question">
              <p>
                What is a real-world example of a legitimate use of a
                <code class="JS"><span class="statement">do</span></code
                >...<code class="JS"><span class="statement">while</span></code>
                loop?
              </p>
            </div>

            <div class="answer">
              <p>
                One good reason to use
                <code class="JS"><span class="statement">do</span></code
                >...<code class="JS"><span class="statement">while</span></code>
                is when capturing user input. You need to try to capture the
                user's input at least once. If they are well-behaved and enter
                the information properly, then one pass may be all it takes. But
                in other cases, it may take several attempts to get the user to
                give you the information you need.
              </p>
              <p>
                The below is an example of such a scenario. The below loop asks
                the user for their name. The Boolean validName is set to false
                initially, and the loop will continue to execute while this
                variable is false. If the userName variable becomes longer than
                0 characters, then validName is set to true, and the loop exits:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> userName;
<span class="statement">var</span> validName = false;

do {
  userName = prompt("Provide your name.");
  <span class=" statement">if</span> (userName.trim().length !== 0) {
    validName = true;
  }
} while (!validName)
<span class="comment">// i.e., while validName is not true.</span> </code></pre>
            </div>
          </li>

          <li id="synprof_JS_exitingloops">
            <div class="question">
              <p>
                How do you exit a JavaScript loop through a condition other than
                the one stated in the loop "header"?
              </p>
            </div>

            <div class="answer">
              <p>
                You could use one of two statements (that I know of right now):
              </p>
              <ul>
                <li>
                  <p>
                    <code class="JS"><span class="statement">break</span></code>
                    - "terminates the current loop, switch, or label
                    statement... and transfers program control to the statement
                    following the terminated statement." Equivalent of VBA's
                    <code class="VBA">Exit</code>.
                  </p>
                  The below example loops through all the players on a softball
                  team roster and adds them to the starting lineup, but once
                  it's reached 10 players (if it does at all), it will exit the
                  loop, since there can only be 10 players on the field.
                  <pre
                    class="JS code"
                  ><code class="JS"><span class="statement">for</span> (var i = 1; i &lt;= NumberOfPlayersOnRoster; i++) {
    <span class="comment">/* Add player to starting lineup */</span>               
    <span class="statement">if</span> (i == 10) {
        <span class="statement">break</span>;
    }
}
</code></pre>
                </li>
                <li>
                  <p>
                    <code class="JS"
                      ><span class="statement">continue</span></code
                    >
                    - "terminates execution of the statements in the current
                    iteration of the current or labeled loop, and continues
                    execution of the loop with the next iteration." Equivalent
                    of VBA's <code class="VBA">Next</code>.
                  </p>
                  <p>
                    The below example is like the above, but before adding a
                    player to the starting lineup checks if they paid their
                    dues. If not the
                    <code class="JS"
                      ><span class="statement">continue</span></code
                    >
                    statement is invoked to skip the rest of the loop (i.e.
                    adding them to the lineup) and start with the next iteration
                    (i.e. player).
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS"><span class="statement">for</span> (var i = 1; i &lt;= NumberOfPlayersOnRoster; i++) {          
    <span class="statement">if</span> (<span class="comment">/* Player did not pay dues */</span>) {
        <span class="statement">continue</span>;
    }
    <span class="comment">/* Add player to starting lineup */</span>
}
</code></pre>
                </li>
              </ul>
            </div>
          </li>

          <li id="synprof_JS_functions">
            <div class="question">
              <p>How do you create a function in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                The syntax is pretty simple - as you can tell from the brackets,
                function arguments are completely optional:
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><strong>To define the function:</strong>
<span class="comment">// Option A. Function Declaration</span>
<span class="statement">function</span> exampleFunction ([parameter1], [parameter2], etc.) {
    [statements];
}

<span class="comment">// Option B. Function Expression</span>
<span class="statement">var</span> exampleFunction = <span class="statement">function</span> [optionalName] ([param1], [param2], etc.) {
    [statements];
};

<strong>To call/execute the function:</strong>
exampleFunction([argument1], [argument2], etc.);</code></pre>
              <p>
                Note that the function declaration is not followed by a
                semicolon, while a function expression is - because it is just
                like any old variable assignment
              </p>
              <p>
                "Generally speaking, a function is a "subprogram" that can be
                called by code external (or internal in the case of recursion)
                to the function. Like the program itself, a function is composed
                of a sequence of statements called the function body. Values can
                be passed to a function, and the function will return a
                value...In JavaScript, functions are first-class objects,
                because they can have properties and methods just like any other
                object."
              </p>
              <p>
                Remember that defining/declaring and calling/executing are
                separate steps. You should probably declare all of your
                functions at the top of your code. Below is a mind-numbingly
                simple example of a function:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> multiply(x, y) {
    <span class="statement">var</span> result = x * y;
    console.log(result);
}

multiply(8, 6);
<span class="comment">// Console: 48</span></code></pre>
              <p>
                You may think to yourself: isn't it a bad idea to declare the
                variable result within the function? What if we run it twice and
                there is an error declaring
                <code class="JS">result</code> because it already exists?
              </p>
              <p>
                The answer is that variables declared within functions are local
                to that function. Once the function completes, the variable is
                gone. However, functions can access global variables, which are
                variables defined outside of functions. Check the example below:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> total = 100;

<span class="statement">function</span> multiplyThenAddToTotal(x, y) {
    <span class="statement">var</span> result = x * y;
    total += result;
    console.log(total);
}

multiplyThenAddToTotal(8, 6);
<span class="comment">// Console: 148</span></code></pre>
              <p>
                You can also have a function return a value - the above example
                has been modified to demonstrate this:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> multiply(x, y) {
    <span class="statement">var</span> result = x * y;
    <span class="statement">return</span> result;
}

<span class="statement">var</span> cost = 98.10;
<span class="statement">var</span> tax = 0.06;
<span class="statement">var</span> costInclTax = multiply(cost,(1+tax)); <span class="comment">// 103.986</span></code></pre>
              <p>
                Note that "the return statement
                <em>ends function execution</em> and specifies a value to be
                returned to the function caller." Therefore any statements you
                write after return will be ignored, because return is also an
                instruction to exit the function. This is why you may see
                return; with no variable/value afterwards.
              </p>
              <p>
                Also, you must supply function parameters/arguments in the order
                that they are defined. If you supply an extra parameter, it will
                be ignored; if you supply too few paramaters, the arguments will
                be unassigned and JS will attempt to execute the function
                anyway.
              </p>
            </div>
          </li>

          <li id="general_functionNaming">
            <div class="question">
              <p>How should you name your functions?</p>
            </div>

            <div class="answer">
              <p>
                A good model to follow is verbNoun, i.e. calculateArea,
                hideMenu.
              </p>
            </div>
          </li>

          <li id="objprof_ARRAY">
            <div class="question">
              <p>How do you create an array in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                An array is a single variable that holds multiple values. Arrays
                are objects (the global
                <code class="JS object">Array</code> object, which will be
                invoked on the first line of the below code example), which
                means they have properties, like
                <code class="JS property">length</code>, which returns a count
                of the number of members in the array. They also have methods,
                which are
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
                  >listed concisely on the MDN page</a
                >.
              </p>
              <p>
                Because of JavaScript's dynamically typed nature, you can put
                objects of any type (Boolean, number, string) right next to each
                other in the same array.
              </p>
              <p>
                As in many other programming languages, array indexes start at
                0. Below is an example of array declaration:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> sampleArray = [];             <span class="comment">// Option A.</span>
            
<span class="statement">var</span> sampleArray = new Array();    <span class="comment">// Option B.</span>   

<span class="comment">// Note that the Array object is capitalized and the word "new" is not. Also, leaving the brackets/parentheses empty is a way of saying "this is an array, I just don't want to give it an explicit length".</span>                        
                        
sampleArray[0] = 50;
sampleArray[1] = "Mouse";

<span class="comment">// By assigning values to an array with no predefined size, we are simultaneously creating new slots for the values, then filling them. Before this array was an empty array with a length of 0, now it has a length of 2.</span>

console.log(sampleArray[1]);
<span class="comment">// Console: Mouse</span>
</code></pre>
              <p>
                As with normal variable declaration, array variables can be both
                declared and initialized in the same statement:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> sampleArray = [50, "Mouse"]; 

console.log(sampleArray[1]);
<span class="comment">// Console: Mouse</span>
</code></pre>
              <p>
                It's good practice to write arrays in the below fashion - each
                element on its own line, for clarity.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> newMSPsquad = [
  'Jimmy Butler',
  'Jeff Teague',
  'Taj Gibson',
  'Jamal Crawford',
  'Karl Anthony-Towns'
];
</code></pre>
              <p>
                In the above array, the value of newMSPsquad[5] is undefined,
                because there is not yet a position #5 created for this array.
              </p>
            </div>
          </li>

          <li id="methprof_jsArrayAdd">
            <div class="question">
              <p>How do you add an item to an existing array?</p>
            </div>

            <div class="answer">
              <h3>Adding to the End - No Method</h3>
              <p>
                You can actually do this without any special methods with a cute
                little trick. Take the newMSPsquad array we created earlier.
                Let's add "Andrew Wiggins" by simply using the length property
                of the array as its index - the length property will always be a
                number 1 higher than the final index position of the array,
                since it starts at 0.
              </p>
              <pre
                class="JS code"
              ><code class="JS">newMSPsquad[newMSPsquad.length] = 'Andrew Wiggins';
</code></pre>
              <p>
                When you assign a value to a non-existent array position, that
                position will be implicitly created.
              </p>
              <h3>
                Adding to the End with
                <code class="JS"><span class="method">push</span>()</code> -
                Preferred
              </h3>
              <p>
                The above is all well and good, but what if we wanted to add two
                new players? There's an easier way: the
                <code class="JS"><span class="method">push</span>()</code>
                method. This method is available on all
                <code class="JS object">Array</code> objects. Not only does it
                add one or more elements to the end of the array, it also
                returns the new length of the array. Therefore the following
                code:
              </p>
              <pre
                class="JS code"
              ><code class="JS">squadCount = newMSPsquad.<span class="method">push</span>('Andrew Wiggins','David West');
</code></pre>
              <p>
                ...not only adds two players to the array, but also assigns a
                value to squadCount.
              </p>
              <h3>
                Adding to the Beginning with
                <code class="JS"><span class="method">unshift</span>()</code>
              </h3>
              If you want to add to the beginning of the array instead, use the
              <code class="JS"><span class="method">unshift</span>()</code>
              method. Otherwise it behaves exactly like
              <code class="JS"><span class="method">push</span>()</code>.
            </div>
          </li>

          <li id="methprof_jsArrayRemove">
            <div class="question">
              <p>How would you remove items from an array?</p>
            </div>

            <div class="answer">
              <p>Let's use our newMSPsquad array as our example:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> newMSPsquad = [
  'Jimmy Butler',
  'Jeff Teague',
  'Taj Gibson',
  'Jamal Crawford',
  'Karl Anthony-Towns'
];
</code></pre>
              <h3>
                Removing One Member from the End of an Array with
                <code class="JS"><span class="method">pop</span>()</code>
              </h3>
              <p>
                The
                <code class="JS"><span class="method">pop</span>()</code> method
                not only removes the last item of the array - note the
                terminology is the same used in
                <a href="#general_prg_stack">call stacks</a>, in which the top
                of the stack is progressively "popped" off - it also returns
                that element. Therefore the following code will remove Karl
                Anthony-Towns from newMSPsquad as well as assign his name to a
                new variable.
              </p>
              <pre
                class="JS code"
              ><code class="JS">removedPlayer = newMSPsquad.<span class="method">pop</span>();
</code></pre>
              <p>
                Note that the
                <code class="JS"><span class="method">pop</span>()</code> method
                does not accept any arguments.
              </p>
              <h3>
                Removing One Member from the Beginning of an Array with
                <code class="JS"><span class="method">shift</span>()</code>
              </h3>
              <p>
                The
                <code class="JS"><span class="method">shift</span>()</code>
                method behaves exactly the same as
                <code class="JS"><span class="method">pop</span>()</code>, but
                removes/returns the first element of the array, not the last. If
                this were to be used on newMSPsquad, it would return Jimmy
                Butler.
              </p>
            </div>
          </li>

          <li id="methprof_jsArrayJoin">
            <div class="question">
              <p>
                What is the easiest way to convert an array into a single string
                of comma separated values?
              </p>
            </div>

            <div class="answer">
              <p>
                Using the
                <code class="JS"><span class="method">join</span>()</code>
                method with a string containing a comma as an argument. Let's
                use our newMSPsquad array as our example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> newMSPsquad = [
  'Jimmy Butler',
  'Jeff Teague',
  'Taj Gibson',
  'Jamal Crawford',
  'Karl Anthony-Towns'
];

<span class="statement">var</span> squadList = newMSPsquad.<span class="method">join</span>(", ")
console.log(squadList) 

<span class = "comment">// Jimmy Butler, Jeff Teague, Taj Gibson, Jamal Crawford, Karl Anthony-Towns</span>
</code></pre>
              <p>Some notes re: the separator argument:</p>
              <ul>
                <li>The separator is converted to a string if necessary.</li>
                <li>
                  If omitted, the array elements are separated with a comma
                  (",").
                </li>
                <li>
                  If separator is an empty string, all elements are joined
                  without any characters in between them.
                </li>
              </ul>
            </div>
          </li>

          <li id="methprof_jsArrayConcat">
            <div class="question">
              <p>What is the easiest way to combine two arrays?</p>
            </div>

            <div class="answer">
              <p>
                Using the
                <code class="JS"><span class="method">concat</span>()</code>
                method on one array with the other array as an argument. Let's
                use the following example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> retail = [
  'CHN',
  'CAN'
];

<span class="statement">var</span> direct = [
  'LDU',
  'DCN'
];

<span class="statement">var</span> allChannels = retail.<span class="method">concat</span>(direct);
console.log(allChannels);

<span class = "comment">// (4) ["CHN", "CAN", "LDU", "DCN"]</span>
</code></pre>
              <p>
                Note that we are assigning this to a variable. Unlike methods
                like pop() and push(), using this on an array does not change
                that original array. Instead, it returns a new array, which is
                why we had to declare a variable allChannels to capture that
                returned value.
              </p>
              <p>
                Also note that we can chain multiple instances of this method
                together. Let's modify the above example.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> retail = [
  'CHN',
  'CAN'
];

<span class="statement">var</span> direct = [
  'LDU',
  'DCN'
];

<span class="statement">var</span> overseas = [
  'GBC',
  'DKC'
];

<span class="statement">var</span> allChannelsA = retail.<span class="method">concat</span>(direct).<span class="method">concat</span>(overseas);
<span class="statement">var</span> allChannelsB = retail.<span class="method">concat</span>(direct.<span class="method">concat</span>(overseas));

console.log(allChannelsA);
console.log(allChannelsB);

<span class = "comment">// Both yield: 
(6) ["CHN", "CAN", "LDU", "DCN", "GBC", "DKC"]</span>
</code></pre>
            </div>
          </li>

          <li id="general_jsArrayPosQuiz">
            <div class="question">
              <p>
                Let's say we have a one-member array called apples - in other
                words, only apples[0] has a value. What would happen if we tried
                to assign a value to apples[2]?
              </p>
            </div>

            <div class="answer">
              <p>
                The JS engine would create both apples[1], with a value of
                undefined, and apples[2], with your chosen value. The total
                length of the array would be 3.
              </p>
            </div>
          </li>

          <li id="general_objectMethodsAndProperties">
            <div class="question">
              <p>
                How do variables and functions relate to object properties and
                methods?
              </p>
            </div>

            <div class="answer">
              <p>Here's an easy way to think about this:</p>
              <ul>
                <li>A property is a variable that belongs to an object.</li>
                <li>A method is a function that belongs to an object.</li>
              </ul>
            </div>
          </li>

          <li id="synprof_JS_mathWithNonNumbers">
            <div class="question">
              <p>
                How does JavaScript react if you try to do mathematical
                operations with non-numbers?
              </p>
            </div>

            <div class="answer">
              <p>
                It depends on which operator you are using. If you are using +,
                for instance, this functions as a concatenation operator as
                well:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> code = 5 + "b"; <span class="comment">// Resulting value: 5b</span></code></pre>
              <p>
                But for other operations like subtraction, multiplication or
                division, you will get an error code which reads
                <code class="JS"><span class="value">NaN</span></code
                >, which is short for "Not a Number".:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> code = 5 * "b"; <span class="comment">// Resulting value: NaN</span></code></pre>
              <p>
                Keep in mind, however, that JS will coerce strings that look
                like numbers into number behavior in cases like the below:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> code = 5 * "6"; <span class="comment">// Resulting value: 30</span></code></pre>
            </div>
          </li>

          <li id="objprof_JS_Number">
            <div class="question">
              <p>
                How do you convert a string-based number into a actual number
                datatype in JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>You have several options.</p>
              <h3>
                Converting a String to a Number With No Rounding - Option A
              </h3>
              <p>
                Use the
                <code class="JS"><span class="method">Number</span>()</code>
                function. "In a non-constructor context (i.e., without the new
                operator), <code class="JS method">Number</code> can be used to
                perform a type conversion."
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> textInput = "";
<span class="statement">var</span> properNum = <span class="function">Number</span>(textInput); <span class="comment">// Resulting value: 0</span></code> </pre>
              <h3>
                Converting a String to a Number With No Rounding - Option B
              </h3>
              <p>
                Use the <code class="JS method">parseFloat</code> function to
                convert the string to a floating-point number.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> textInput = "3.2210";
<span class="statement">var</span> properNum = <span class="function">parseFloat</span>(textInput); <span class="comment">// Resulting value: 3.221</span></code> </pre>
              <h3>Converting a String to an Integer</h3>
              <p>
                Use the <code class="JS method">parseInt</code> function. This
                one has two parameters:
              </p>
              <pre
                class="syntax code"
              ><code class="JS">parseInt(string, radix);</code></pre>
              <p>
                What is radix? "An integer between 2 and 36 that represents the
                radix (the base in mathematical numeral systems) of the above
                mentioned string. Specify 10 for the decimal numeral system
                commonly used by humans.
                <strong
                  >Always specify this parameter to eliminate reader confusion
                  and to guarantee predictable behavior.</strong
                >
                Different implementations produce different results when a radix
                is not specified, usually defaulting the value to 10."
              </p>
              <p>
                As you'll see in the example below,
                <code class="JS method">parseInt</code> does not round a number.
                It merely returns the integer portion of it - in this way it
                behaves like Math.<code class="JS"
                  ><span class="function">floor</span></code
                >.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> textInput = "3.2210";
<span class="statement">var</span> properNum = <span class="function">parseInt</span>(textInput,10); <span class="comment">// Resulting value: 3</span></code> </pre>
            </div>
          </li>

          <li id="general_JS_parseNumsFromStrings">
            <div class="question">
              <p>
                You can use parseInt and parseFloat to extract numbers from
                strings containing numeric values. True or False?
              </p>
            </div>

            <div class="answer">
              <p>
                True, but with a condition. This will only work if the string
                begins with a numeric character. The extraction stops as soon as
                a non-numeric character is encountered.
              </p>
              <p>Below are several examples of this in action.</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="function">parseInt</span>("4100 years ago", 10); <span class="comment">// Resulting value:  4100</span>
<span class="function">parseInt</span>("Hey, 18 dogs!", 10); <span class="comment">// Resulting value:  NaN</span>
<span class="function">parseInt</span>("2123-32131", 10); <span class="comment">// Resulting value:  2123</span>
<span class="function">parseInt</span>(".5", 10); <span class="comment">  // Resulting value:  NaN</span></code> </pre>
            </div>
          </li>

          <li id="funcprof_JS_isNaN">
            <div class="question">
              <p>How do you test if an item is numeric in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                Using the
                <code class="JS"><span class="method">isNaN</span>()</code>
                function, which tells you if an argument is Not a Number.
                Remember that this does not care about datatypes - "when the
                argument to the isNaN function is not of type Number, the value
                is first coerced to a Number. The resulting value is then tested
                to determine whether it is NaN." For example:
              </p>
              <pre
                class="JS code"
              ><code class="JS">console.log(<span class="function">isNaN</span>(5)); <span class="comment">     // false</span>
console.log(<span class="function">isNaN</span>("5")); <span class="comment">   // false</span>
console.log(<span class="function">isNaN</span>("b")); <span class="comment">   // true</span></code> </pre>
              <p>
                You can do the inverse of this - test what is Not Not a Number
                (i.e. what IS a number, similar to the VBA
                <code class="VBA">IsNumeric</code> function) - by doing the
                following:
              </p>
              <pre
                class="JS code"
              ><code class="JS">console.log(<span class="function">!isNaN</span>(5)); <span class="comment">     // true</span>
console.log(<span class="function">!isNaN</span>("5")); <span class="comment">   // true</span>
console.log(<span class="function">!isNaN</span>("b")); <span class="comment">   // false</span></code> </pre>
            </div>
          </li>

          <li id="gen_mathFunctionsInJS">
            <div class="question">
              <p>
                How do I do more advanced mathematical functions like Excel's
                ROUND, FLOOR, etc.?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the <code class="JS object">Math</code> object
                with one of its methods. To round to the nearest integer, you
                would do the following:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> fracNumber = 8.98;
<span class="statement">var</span> wholeNumber = Math.<span class="function">round</span>(fracNumber); <span class="comment">// Resulting value: 9</span></code> </pre>
              <p>To round down, you would do the following:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> fracNumber = 8.98;
<span class="statement">var</span> wholeNumber = Math.<span class="function">floor</span>(fracNumber); <span class="comment">// Resulting value: 8</span></code> </pre>
              <p>To round up, you would do the following:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> fracNumber = 8.2;
<span class="statement">var</span> wholeNumber = Math.<span class="function">ceil</span>(fracNumber); <span class="comment">// Resulting value: 9</span></code> </pre>
              <p>
                To determine the maximum number out of a group of numbers, you
                can do the following:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> a = 8, b = 9, c = 10;
<span class="statement">var</span> biggest = Math.<span class="function">max</span>(a, b, c); <span class="comment">// Resulting value: 10</span></code> </pre>
              <p>
                "<code class="JS object">Math</code> is a built-in object that
                has properties and methods for mathematical constants and
                functions. Not a function object...Unlike the other global
                objects, <code class="JS object">Math</code> is not a
                constructor. All properties and methods of
                <code class="JS object">Math</code> are static."
              </p>
            </div>
          </li>

          <li id="methprof_JS_random">
            <div class="question">
              <p>How do you get JavaScript to generate a random number?</p>
            </div>

            <div class="answer">
              <p>
                You would use the Math.random() function, which generates a
                number "in the range [0, 1); that is, from 0 (inclusive) up to
                but not including 1 (exclusive)".
              </p>

              <p>
                If you wanted a random number higher than 1, you would simply
                use a multiplier on the result of Math.random().
              </p>
            </div>
          </li>

          <li id="general_JS_randomDice">
            <div class="question">
              <p>
                Let's say you wanted to simulate a dice roll by returning an
                integer between 1 and 6. What would be the best way to do this?
              </p>
            </div>

            <div class="answer">
              <p>Here's the wrong way:</p>
              <pre
                class="invalid JS code"
              ><code class="JS"><span class="statement">var</span> diceRoll = Math.ceil(Math.random() * 6);</code> </pre>
              <p>And here's the right way:</p>
              <pre
                class="valid JS code"
              ><code class="JS"><span class="statement">var</span> diceRoll = Math.floor(Math.random() * 6) + 1;</code> </pre>
              <p>
                Why is the usage of Math.ceil() wrong? After all, it looks more
                elegant without that +1, right?
              </p>
              <p>
                As you may recall, Math.random() "generates a number "in the
                range [0, 1); that is, from 0 (inclusive) up to but not
                including 1 (exclusive)". There is a slight chance, then, that
                the result of Math.random() will be 0.
              </p>
              <p>
                The result of Math.ceil(0) is 0, therefore, we open ourselves up
                to a diceRoll value of 0, which is impossible.
              </p>
            </div>
          </li>

          <li id="synprof_JS_quotes">
            <div class="question">
              <p>
                When defining a string value in JavaScript, you can use either
                single quotes or double quotes. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="synprof_JS_quotesWithinQuotes">
            <div class="question">
              <p>How do you handle quotes-within-quotes in JavaScript?</p>
            </div>

            <div class="answer">
              <p>You would put a backslash before the inner quotes, like so:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> phrase = "He said \"that's fine\", and left.";</code> </pre>
            </div>
          </li>

          <li id="propprof_JS_length">
            <div class="question">
              <p>
                How do you measure the character length of a string in
                JavaScript (similar to Excel's LEN function)?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the same property you would use to count members
                in an array -
                <code class="JS"><span class="property">length</span></code
                >.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> babyToy = "teddy bear";
console.log(babyToy.<span class="property">length</span>); <span class="comment">// Console: 10</span></code></pre>
              <p>
                Remember, this is not a function - this is a property of an
                object. Even though a string is one of the primitive data types,
                JavaScript converts string primitive to a
                <code class="JS object">String</code> global object in order to
                give it access to certain properties and methods.
              </p>
            </div>
          </li>

          <li id="methprof_JS_toUpperCase">
            <div class="question">
              <p>How do you convert a string to upper case using JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                Using the
                <code class="JS"
                  ><span class="method">toUpperCase</span>()</code
                >
                method of the <code class="JS object">String</code> object, but
                remember, this must be assigned to a new variable. The following
                code will not work as intended because the upper case conversion
                is not captured in memory by a new variable.:
              </p>
              <pre
                class="invalid code"
              ><code class="JS"><span class="statement">var</span> babyToy = "teddy bear";
babyToy.<span class="method">toUpperCase</span>();
console.log(babyToy); <span class="comment">// Console: teddy bear</span></code></pre>
              <p>Corrected below:</p>
              <pre
                class="valid code"
              ><code class="JS"><span class="statement">var</span> babyToy = "teddy bear";
<span class="statement">var</span> babyToy2 = babyToy.<span class="method">toUpperCase</span>();
console.log(babyToy2); <span class="comment">// Console: TEDDY BEAR</span></code></pre>
            </div>
          </li>

          <li id="methprof_JS_split">
            <div class="question">
              <p>
                What is the JS equivalent to VBA's
                <code class="VBA">Split</code> function, which "returns a
                zero-based, one-dimensional array containing a specified number
                of substrings"?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the
                <code class="JS"><span class="method">split</span>()</code>
                method of the <code class="JS object">String</code> object, with
                the delimiter defined in quotes between the parentheses like so:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> coordGroups = "1001, 1002, 1003";
<span class="statement">var</span> coordGroupArr = coordGroups.<span class="method">split</span>(", ");
<span class="comment">// Yields three-member array.</span>

<span class=" statement">for</span> (i = 1; i &lt;= coordGroupArr.length; i++) {
    console.log(coordGroupArr[i-1]);
}

<span class="comment">// Console: 1001</span>
<span class="comment">// Console: 1002</span>
<span class="comment">// Console: 1003</span>
</code></pre>
              <p>
                A couple notes on
                <code class="JS"><span class="method">split</span>()</code>:
              </p>
              <ul>
                <li>
                  If the separator/delimiter is omitted or does not occur in the
                  string, the array returned contains one element consisting of
                  the entire string.
                </li>
                <li>
                  If the separator/delimiter is an empty string (''), the string
                  is split between each character.
                </li>
                <li>
                  When the string is empty, split() returns an array containing
                  one empty string, rather than an empty array.
                </li>
                <li>
                  The separator/delimiter does not have to be a string; it can
                  also be a
                  <a href="#general_regularExpression">regular expression</a>.
                </li>
              </ul>
            </div>
          </li>

          <li id="methprof_JS_indexOf1">
            <div class="question">
              <p>
                How, using JS, can you find the character position of a string
                within a string, similar to Excel's SEARCH function?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the
                <code class="JS"><span class="method">indexOf</span>()</code>
                method of the <code class="JS object">String</code> object, with
                the search term defined in quotes between the parentheses like
                so:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> phrase = "He said \"that's fine\", and left.";
<span class="statement">var</span> position = phrase.<span class="method">indexOf</span>("said");

console.log(position);
<span class="comment">// Console: 3</span>
</code></pre>
              <p>
                The word "said" starts at the fourth character in the string,
                but the
                <code class="JS"><span class="method">indexOf</span>()</code>
                method returns
                <code class="JS"><span class="value">3</span></code> because it
                starts counting from 0.
              </p>
              <p>
                If the string is not found, the
                <code class="JS"><span class="method">indexOf</span>()</code>
                method returns
                <code class="JS"><span class="value">-1</span></code
                >.
              </p>
              And just like Excel's SEARCH, there is an optional start number
              parameter called fromIndex. With that parameter set, the function
              ignores all characters before the start index:
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> phrase = "Mississippi";
<span class="statement">var</span> position = phrase.<span class="method">indexOf</span>("ss",4);

console.log(position);
<span class="comment">// Console: 5</span>
</code></pre>
              <p>
                The inverse of this - starting from a given position (optional)
                yet searching backwards / ignoring all characters after the
                fromIndex - can be found with the
                <code class="JS"
                  ><span class="method">lastIndexOf</span>()</code
                >
                method:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> phrase = "Mississippi";
<span class="statement">var</span> position = phrase.<span class="method">lastIndexOf</span>("ss",4);

console.log(position);
<span class="comment">// Console: 2</span>
</code></pre>
            </div>
          </li>

          <li id="methprof_JS_indexOf2">
            <div class="question">
              <p>
                Using JS, how can I search an array for an item and identify its
                postion if found?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the
                <code class="JS"><span class="method">indexOf</span>()</code>
                method, which is also used on strings in a manner similar to
                Excel's SEARCH. Let's take for an example an array of the top 10
                tennis players in the world, ordered from #1 to #10.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> topTenTennis =  [
    "Andy Murray", 
    "Rafael Nadal", 
    "Roger Federer", 
    "Novak Djokovic", 
    "Stan Wawrinka", 
    "Marin Cilic", 
    "Dominic Thiem", 
    "Kei Nishikori", 
    "Milos Raonic", 
    "Grigor Dimitrov"
];
</code></pre>
              <p>
                And let's say you know Federer is in the Top 10, you just don't
                know his rank, i.e., his position in the array. You could use
                the below to find out:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> federerRank = topTenTennis.indexOf("Roger Federer") + 1;
</code></pre>
              <p>
                Note that when using
                <code class="JS"><span class="method">indexOf</span>()</code> on
                an array, you need the search argument to match exactly the
                contents of that array member. ("Federer") alone would not have
                worked because there is no array member named simply "Federer".
                Like the string version,
                <code class="JS"><span class="method">indexOf</span>()</code>
                will return -1 if the search term cannot be found.
              </p>
              <p>
                Below is the actual syntax of this rule, note that we did not
                use the optional fromIndex.
              </p>
              <pre
                class="syntax code"
              ><code class="JS">arr.indexOf(searchElement[, fromIndex])</code></pre>
              <p>
                MDN on fromIndex: "The index to start the search at. If the
                index is greater than or equal to the array's length, -1 is
                returned, which means the array will not be searched. If the
                provided index value is a negative number, it is taken as the
                offset from the end of the array. Note: if the provided index is
                negative, the array is still searched from front to back. If the
                calculated index is less than 0, then the whole array will be
                searched. Default: 0 (entire array is searched)."
              </p>
            </div>
          </li>

          <li id="general_JS_arrays2D">
            <div class="question">
              <p>
                How would you create a two-dimensional array that mimics the
                structure of a spreadsheet?
              </p>
            </div>

            <div class="answer">
              <p>Let's say you have the following table...</p>
              <table>
                <thead>
                  <tr>
                    <td>Name</td>
                    <td>Test1</td>
                    <td>Test2</td>
                    <td>Test3</td>
                    <td>Test4</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Timmy</td>
                    <td>80</td>
                    <td>90</td>
                    <td>100</td>
                    <td>95</td>
                  </tr>
                  <tr>
                    <td>Joey</td>
                    <td>75</td>
                    <td>95</td>
                    <td>85</td>
                    <td>100</td>
                  </tr>
                  <tr>
                    <td>Bella</td>
                    <td>60</td>
                    <td>70</td>
                    <td>75</td>
                    <td>90</td>
                  </tr>
                </tbody>
              </table>
              <p>
                ...which you want to recreate as a JS array. The way to do this
                is to nest arrays within arrays. And the structure would
                actually look very similar, with each inner array being a row,
                and each value in that inner array being a column:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> grades =  [
    ["Name", "Test1", "Test2", "Test3", "Test4"],
    ["Timmy", 80, 90, 100, 95],
    ["Joey", 75, 95, 85, 100], 
    ["Bella", 60, 70, 75, 90]
];
</code></pre>
              <p>
                Now let's say you want to access Timmy's third test grade. You
                would do so like this:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> timmyThirdTest = grades[1][3];
</code></pre>
              <p>
                The first set of brackets corresponds to the outer array - give
                me the item at position #1, which is Timmy's row - then the next
                set of backets corresponds to the inner array.
              </p>
              <p>
                But what if you didn't know Timmy's position in the array, i.e.
                the number in that first bracket pair?
              </p>
              <p>
                What you could do is write a general function to identify a
                "row" number in a 2D array, with the paramaters being an array
                and a search term:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> getPosition(searchTerm, twoDeeArray) {
  <span class=" statement">for</span> (var i = 0; i &lt; twoDeeArray.length; i++) {
    <span class=" statement">if</span> (twoDeeArray[i].indexOf(searchTerm) !== -1) {
      <span class=" statement">return</span> i;
    }
  }
}
</code></pre>
              <p>
                Then you can use the result of that function within the first
                set of brackets:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> timmyThirdTest = grades[getPosition("Timmy",grades)][3];
</code></pre>
            </div>
          </li>

          <li id="general_JS_jaggedArray">
            <div class="question">
              <p>In JavaScript, what is a "jagged array"?</p>
            </div>

            <div class="answer">
              <p>
                A jagged array is a two-dimensional array - also known as an
                "array of arrays" - in which the interior arrays do not have the
                same length. For instance, the below would be a jagged array:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> grades =  [
    [90, 100, 95],
    [85, 95, 85, 100], 
    [60, 70]
];
</code></pre>
            </div>
          </li>

          <li id="methprof_JS_stringextract">
            <div class="question">
              <p>
                What methods are available in JavaScript for extracting a string
                from a larger string?
              </p>
            </div>

            <div class="answer">
              <p>
                There are three methods of the
                <code class="JS object">String</code> object, two of which are
                very similar:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> phrase = "Schuykill-River";
                        
<span class="statement">var</span> sliced = phrase.<span class="method">slice</span>(5,9);
<span class="comment">// Console: Using a 0-based index, start with the character at position 5 (k) and extract all characters up to but not including the character at position 9 (-). 

In the event that either argument is negative, that is interpreted as the string length minus that number. 

Therefore phrase.slice(-5) would equal "River", because it says "start at string length minus 5, and because there isn't a second argument, then just take the rest of the string." This is like the Excel RIGHT function!

(You would think that phrase.slice(-555) would yield an error, since the position (string length minus 555) doesn't exist, but it simply returns the entirety of the string.)

..and phrase.slice(0,-6) would yield "Schuykill", because it means that starting with the first character (position #0), extract all but the last six characters of the string. </span>

<span class="statement">var</span> substringed = phrase.<span class="method">substring</span>(5,9);
<span class="comment">// Console: Same as slice.</span>

<span class="statement">var</span> substred = phrase.<span class="method">substr</span>(5,4);
<span class="comment">// Console: This one is like Excel's MID. Start with character #5 (again, starting at 0) and take the next 4 characters. If the second argument is ommitted then it takes all of the remaining characters. Therefore phrase.substr(5) would equal "kill-River" because it starts at position #5 and then takes the rest of the string.</span>

console.log(sliced); <span class="comment">// Console: kill</span>
console.log(substringed); <span class="comment">// Console: kill</span>
console.log(substred); <span class="comment">// Console: kill</span>
</code></pre>
              What are the differences between
              <code class="JS"><span class="method">slice</span>()</code> and
              <code class="JS"><span class="method">substring</span>()</code>,
              then? Check
              <a href="http://stackoverflow.com/a/2243835"
                >this Stack Overflow post</a
              >.
            </div>
          </li>

          <li id="synprof_JS_stringSortOrder">
            <div class="question">
              <p>How do you compare strings in JS to determine sort order?</p>
            </div>

            <div class="answer">
              <p>
                You would simply use a less than (&lt;) or greater than (&gt;)
                operator. As you might expect, the letter Z is "greater than"
                the letter A. But the quirk about this is that capital letters
                come first in the sort order, then lowercase letters. Therefore
                if you had an array containing strings starting with every
                letter of the alphabet, lower and upper case, then the "A"
                (least) would be at the top and the strings starting with "z"
                (greatest) would be at the bottom.
              </p>
            </div>
          </li>

          <li id="objprof_JS_date">
            <div class="question">
              <p>How do you get JS to return the current date and time?</p>
            </div>

            <div class="answer">
              <p>
                Using the standard built-in
                <code class="JS object">Date</code> object. Using it without any
                parameters returns the current date and time down to the
                millisecond. "Date objects are based on a time value that is the
                number of milliseconds since 1 January, 1970 UTC."
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> today = new Date();

console.log(today);
<span class="comment">// Console: Mon May 15 2017 07:14:38 GMT-0400 (Eastern Daylight Time)</span>
</code></pre>
              <p>
                If you want to create a
                <code class="JS object">Date</code> object with a value other
                than the current date and time, you can feed it a list of
                parameters in the following order:
              </p>
              <pre
                class="code syntax"
              ><code class="JS">new Date(year, month[, date[, hours[, minutes[, seconds[, milliseconds]]]]]);</code></pre>
              <p>
                It's extremely important to note that
                <strong
                  >the month argument is a based on a 0-based index.</strong
                >
                Example below.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> y2k = new Date(2000,0,1);

console.log(y2k);
<span class="comment">// Console: Sat Jan 01 2000 00:00:00 GMT-0500 (Eastern Standard Time)</span>
</code></pre>
              <p>
                Also note that by creating the
                <code class="JS object">Date</code> object using integer values,
                it automatically mapped to my timezone. Watch what happens,
                however, when using a string input for the date only:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> y2k = new Date(<span class="string">"2000-01-01"</span>);

console.log(y2k);
<span class="comment">// Console: Fri Dec 31 1999 19:00:00 GMT-0500 (Eastern Standard Time)</span>
</code></pre>
              <p>
                The date is assumed to be in UTC time, then the console converts
                it to local time. (Note that during daylight savings/warmer
                months we are only 4 hours behind UTC.)
              </p>
              <p>
                But if the time is supplied, then the string is interpreted as
                local time.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> y2k = new Date(<span class="string">"2000-01-01 00:00"</span>);

console.log(y2k);
<span class="comment">// Console: Sat Jan 01 2000 00:00:00 GMT-0500 (Eastern Standard Time)</span>
</code></pre>
            </div>
          </li>

          <li id="methprof_JS_DateMethods_get">
            <div class="question">
              <p>
                What are some of the more useful methods to get certain date
                attribues from a <code class="JS object">Date</code> object?
              </p>
            </div>

            <div class="answer">
              <p>See below:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> rightNow = new Date();
console.log(rightNow);
<span class="comment">// Console: Mon May 15 2017 07:14:38 GMT-0400 (Eastern Daylight Time)</span>

rightNow.<span class="method">getMonth</span>();       <span class="comment">// 4</span>
rightNow.<span class="method">getFullYear</span>();     <span class="comment">// 2017</span>
rightNow.<span class="method">getDate</span>();         <span class="comment">// 15</span>
rightNow.<span class="method">getDay</span>();          <span class="comment">// 1</span>
rightNow.<span class="method">getHours</span>();        <span class="comment">// 7</span>
rightNow.<span class="method">getTime</span>();         <span class="comment">// 1494846878000</span>
</code></pre>
              <p>And here are some notes:</p>
              <ul class="defineCode">
                <li>
                  <code class="JS"><span class="method">getMonth</span>()</code
                  >: This returns the month of the year, range 0-11.
                </li>
                <li>
                  <code class="JS"
                    ><span class="method">getFullYear</span>()</code
                  >: Pretty self explanatory, just remember that you do not want
                  to use
                  <code class="JS"><span class="method">getYear</span>()</code>,
                  which uses a two-digit year for years between 1900-1999, a
                  value 100 or greater for the year 2000+, as well as a negative
                  value for years before 1900. Best to just avoid all that.
                </li>
                <li>
                  <code class="JS"><span class="method">getDate</span>()</code>:
                  This one is not what it seems; it returns
                  <strong>the day of the month</strong>.
                </li>
                <li>
                  <code class="JS"><span class="method">getDay</span>()</code>:
                  This returns the day of the week, range 0-6.
                </li>
                <li>
                  <code class="JS"><span class="method">getHours</span>()</code
                  >: This returns the hour of the given day, range 0-23.
                </li>
                <li>
                  <code class="JS"><span class="method">getTime</span>()</code>:
                  This returns the number of milliseconds elapsed since 1/1/1970
                  UTC.
                </li>
              </ul>
            </div>
          </li>

          <li id="methprof_JS_DateMethods_set">
            <div class="question">
              <p>
                What are some of the more useful methods to set or change the
                properties a <code class="JS object">Date</code> object?
              </p>
            </div>

            <div class="answer">
              <p>
                The set-based methods of the
                <code class="JS object">Date</code> object closely mirror the
                get methods. But there are pitfalls. See below for an example
                how editing a date can go awry. In the example below, we are
                trying to change the value of
                <code class="JS">nextGame</code> from May 31, 2017 to June 7,
                2017 (one week ahead).
              </p>
              <pre
                class="invalid JS code"
              ><code class="JS"><span class="statement">var</span> nextGame = new Date(2017,4,31);

<span class="comment">// Time elapses, nextGame date needs to be updated...</span>

nextGame.<span class="method">setMonth</span>(5);
nextGame.<span class="method">setDate</span>(7);
console.log(nextGame);
<span class="comment">// Console: Fri Jul 07 2017 00:00:00 GMT-0400 (Eastern Daylight Time)</span>
</code></pre>
              <p>
                Why July? After all, we specified month #5, which is June in the
                0-11 scale. Let's take a look at JS's logic here.
              </p>
              <ol>
                <li>
                  The value of <code class="JS">nextGame</code> is set to May
                  31, 2017.
                </li>
                <li>
                  We attempt to set the month of
                  <code class="JS">nextGame</code> to June. But the day value of
                  31 is untouched. JS notes that there is no such date as 6/31,
                  and sets the month to the next month which has 31 days, July.
                </li>
                <li>
                  We then change the date from July 31, 2017 to July 7, 2017 in
                  a separate
                  <code class="JS"><span class="method">setDate</span>()</code>
                  operation.
                </li>
              </ol>
              <p>
                How do we solve this? Luckily, the
                <code class="JS"><span class="method">setMonth</span>()</code>
                method includes an optional second parameter for a day value,
                probably for instances just like these. So here's a corrected
                version below:
              </p>
              <pre
                class="valid JS code"
              ><code class="JS"><span class="statement">var</span> nextGame = new Date(2017,4,31);

<span class="comment">// Time elapses, nextGame date needs to be updated...</span>

nextGame.<span class="method">setMonth</span>(5,7);
console.log(nextGame);
<span class="comment">// Console: Wed Jun 07 2017 00:00:00 GMT-0400 (Eastern Daylight Time)</span>
</code></pre>
            </div>
          </li>

          <li id="synprof_JS_comparingDates">
            <div class="question">
              <p>
                Why is it that JavaScript is recognizing the following date
                objects as unequal in the below example?
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> Date1 = new Date("2000-01-01 00:00");
<span class="statement">var</span> Date2 = new Date("2000-01-01 00:00");

<span class="statement">var</span> result = (Date1 == Date2) ? "equal":"unequal"

console.log(result); <span class="comment">// Console: unequal</span>
</code></pre>
            </div>

            <div class="answer">
              <p>
                The reason for this is that Date1 and Date2 are whole objects,
                not properties. As
                <a
                  href="http://adripofjavascript.com/blog/drips/object-equality-in-javascript"
                  >this informative article states</a
                >, "primitives like strings and numbers are compared by their
                value, while objects like arrays, dates, and plain objects are
                compared by their reference. That comparison by reference
                basically checks to see if the objects given refer to the same
                location in memory."
              </p>
              These two objects occupy different locations in memory, therefore
              they are technically different, even if they are carrying around
              the same date value. It follows that to adequately compare them,
              you need to compare their values - and the most precise way to do
              this is the
              <code class="JS"><span class="method">getTime</span>()</code>
              method:
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> Date1 = new Date("2000-01-01 00:00");
<span class="statement">var</span> Date2 = new Date("2000-01-01 00:00");

<span class="statement">var</span> result = (Date1.<span class="method">getTime</span>() == Date2.<span class="method">getTime</span>()) ? "equal":"unequal"

console.log(result); <span class="comment">// Console: equal</span>
</code></pre>
            </div>
          </li>

          <li id="synprof_JS_object">
            <div class="question">
              <p>What is an object in JavaScript, and how do you create one?</p>
            </div>

            <div class="answer">
              <p>
                Objects are a convenient way to group attributes and behaviors
                of one logical entity - usually a real-world entity like a
                person or product - in order to make code easier to understand
                and maintain.
              </p>

              <p>
                Without objects, you would have a whole bunch of variables
                related to the same real-world entity, but no systemic
                relationship:
              </p>

              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> productName = "Alienware 17";
<span class="statement">var</span> productPrice = 1999.95;
<span class="statement">var</span> productVendor = "Dell";
<span class="statement">var</span> productSpecs = [<span class="comment">/* stuff */</span>];

<span class="statement">function</span> addFeatures(feature) {
  <span class = "comment">/* do stuff */</span>
}
</code></pre>
              If you converted the above into an object, it would look like
              this:
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> alienware17 = {
  name: "Alienware 17",
  price: 1999.95,
  vendor: "Dell",
  specs: [<span class="comment">/* stuff */</span>],
  addFeatures: function () {
    <span class = "comment">/* do stuff */</span>
  }
}
</code></pre>

              <p>
                Objects are the paradigm around which JavaScript is based. "An
                object is a collection of properties, and a property is an
                association between a name (or key) and a value. A property's
                value can be a function, in which case the property is known as
                a method."
              </p>

              <p>
                From Wikipedia: "Object-oriented programming (OOP) is a
                programming paradigm based on the concept of "objects", which
                may contain data, in the form of fields, often known as
                attributes; and code, in the form of procedures, often known as
                methods. A feature of objects is that an object's procedures can
                access and often modify the data fields of the object with which
                they are associated (objects have a notion of "this" or "self").
                In OOP, computer programs are designed by making them out of
                objects that interact with one another." (See my VBA guide for a
                general intro to object-oriented programming.)
              </p>

              <p>
                There
                <a
                  href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"
                  >are all sorts of built-in objects</a
                >, some of which we have covered already. And you can create
                your own as well. See below for an example of an object called
                <code class="JS">player</code>.
              </p>

              <img src="_images/synprof_JS_objects.png" />
              <p>
                Here's how you would create the above object in JavaScript. Note
                the two types of notation available, as well as the pattern of
                colons and commas, not equals signs and semicolons.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// Option 1: Object Literal Notation //</span>

<span class="statement">var</span> player = {
  name: "Fred", 
  score: 10000, 
  rank: 1
}; 
            
<span class="comment">// Option 2: Object Constructor //
                        
// First declare the variable as an Object:</span>                   
<span class="statement">var</span> player = new Object();

<span class="comment">// Then declare and initialize the properties:</span>
player.name = "Fred";
player.score = 10000;
player.rank = 1;
</code></pre>
            </div>
          </li>

          <li id="general_JS_objectPropertyValues">
            <div class="question">
              <p>How do you view the property values of a JavaScript object?</p>
            </div>

            <div class="answer">
              <h3>A. If the Property Names/Keys Are Known</h3>
              <p>
                You would simply use either dot notation or bracket notation to
                access the key of an object. Given the below object...
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> fred = {
  name: "Fred", 
  score: 10000, 
  rank: 1
}; 
</code></pre>
              <p>
                If you wanted to output the score of the fred object, you could
                use either dot notation:
              </p>
              <pre class="JS code"><code class="JS">console.log(fred.score);
</code></pre>
              <p>
                ...or bracket notation, note the quotes (otherwise the JS engine
                would be looking for a global variable named score...
              </p>
              <pre class="JS code"><code class="JS">console.log(fred["score"]);
</code></pre>
              <p>
                Bracket notation can be indispensable and preferable to dot
                notation in certain instances, as you'll see in the next
                section.
              </p>
              <h3 id="synprof_JS_forInLoop">
                B. If the Property Names/Keys Are Unknown
              </h3>
              <p>
                If you want to get the values of an object's properties, but you
                don't know what the properties names/keys are, or if you simply
                want to iterate over all the properties of an object, you can
                use a <code class="JS"><span class="statement">for</span></code
                >...<code class="JS"><span class="statement">in</span></code>
                loop, which "iterates over the enumerable properties of an
                object, in original insertion order. For each distinct property,
                statements can be executed." Here's the syntax:
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><span class="statement">for</span> (variable <span class="statement">in</span> object) { ...
}</code></pre>
              <p>
                Let's take our fred object from earlier. If we wanted to print
                to the console all of that objects property keys followed by
                their respective values, we could write:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">for</span> (<span class="statement">var</span> propName <span class="statement">in</span> fred) {
  console.log(propName + ": " + fred[propName]);
}

<span class = "comment">// Console:

name: Fred
score: 10000
rank: 1</span>
</code></pre>
              <p>
                There is no special significance to the term propName - it is
                just a variable name; I could have used "pork" instead. Whatever
                you choose, the value of that variable will be the string
                property name corresponding to the pass of the loop.
              </p>
              <p>
                The first pass of the loop will assign propName the value of
                "name", because "name" was the first property declared when this
                object was created.
              </p>
              <p>
                Here you can also see how bracket notation can let you do things
                that you simply cannot do with dot notation. fred[propName]
                allows you to use a variable property name; fred.propName would
                fail because there is no property of fred literally named
                "propName".
              </p>
            </div>
          </li>

          <li id="if_in_JS">
            <div class="question toDo">
              <p>Just like for...in, you can do if...in, like the below.....</p>
            </div>
            <div class="answer">
              <pre><code>const str = 'a'
            const lookup = {a: 14}
            if (str in lookup) console.log('arf') /// 'arf' is logged</code></pre>
            </div>
          </li>

          <li id="methprof_JS_hasOwnProperty">
            <div class="question">
              <p>
                There is no specific built-in method which tests if an object
                has a specific property - true or false?
              </p>
            </div>

            <div class="answer">
              <p>
                False. There is a method called
                <code class="JS"
                  ><span class="method">hasOwnProperty</span>()</code
                >
                which does exactly this. Let's take our fred object from
                earlier:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> fred = {
  name: "Fred", 
  score: 10000, 
  rank: 1
}; 
</code></pre>
              <p>
                If we wanted to test whether the fred object had a property
                called rank, we could write code like the below: (Again, because
                keys are strings, they need to be enclosed in quotation marks):
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (fred.<span class="method">hasOwnProperty</span>('rank')) {
  console.log(true);
} else {
  console.log(false);
}

<span class="comment">// Console: true</span>
</code></pre>
              <p>
                One important thing to note is the emphasis on the word "Own" -
                in other words, this method only tests for properties which are
                non-inherited.
              </p>
              <p>
                For instance,
                <code class="JS"
                  ><span class="method">hasOwnProperty</span>()</code
                >
                is itself an inherited property of the fred object. It inherits
                this property from
                <code class="JS object">Object.prototype</code>. Any property
                that inherits from a prototype will not count as the object's
                "own" property.
              </p>
              <div class="sidenote">
                <p>
                  Wait a minute! You just called
                  <code class="JS"
                    ><span class="method">hasOwnProperty</span>()</code
                  >
                  a property. It is obviously a method! Aren't those two things
                  mutually exclusive?
                </p>
                <p>
                  As it turns out, no, they aren't.
                  <strong
                    >In JavaScript, a method is just another object
                    property.</strong
                  >
                  "A property's value can be a function, in which case the
                  property is known as a method." (MDN)
                </p>
              </div>
              <p>Therefore see the below:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (fred.<span class="method">hasOwnProperty</span>('hasOwnProperty')) {
  console.log(true);
} else {
  console.log(false);
}

<span class="comment">// Console: false</span>
</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">if</span> (Object.prototype.<span class="method">hasOwnProperty</span>('hasOwnProperty')) {
  console.log(true);
} else {
  console.log(false);
}

<span class="comment">// Console: true</span>
</code></pre>
            </div>
          </li>

          <li id="general_JS_objectsWithinObjects">
            <div class="question">
              <p>
                Give an example of a legitimate use of objects within objects.
              </p>
            </div>

            <div class="answer">
              <p>
                In the below example, each property of the friends object is
                another object corresponding to an individual friend:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> friends = {
  julian: {
    firstName: "Julian",
    lastName: "Sanchez",
    residesIn: "St. Louis"
  },
  jes: {
    firstName: "Jes",
    lastName: "Gagnon",
    residesIn: "Orlando"
  }
}
</code></pre>
              <p>
                For nested objects, you would simply chain together properties
                to get your final value. For instance, to get the residesIn
                property of the julian object, you could write:
              </p>
              <pre
                class="JS code"
              ><code class="JS">console.log(friends.julian.residesIn);</code></pre>
            </div>
          </li>

          <li id="general_JS_arraysWithinObjects">
            <div class="question">
              <p>
                Give an example of a legitimate use of arrays within objects.
              </p>
            </div>

            <div class="answer">
              <p>See below:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> leBron = {
  firstName: "LeBron",
  lastName: "James",
  sponsors: ["Coca-Cola","Nike","Samsung"],
  championships: [2012, 2013, 2016]
}
</code></pre>
              <p>To access LeBron's first championship, you could write:</p>
              <pre
                class="JS code"
              ><code class="JS">console.log(lebron.championships[0]);</code></pre>
            </div>
          </li>

          <li id="general_JS_objectsWithinArrays">
            <div class="question">
              <p>
                Give an example of a legitimate use of objects within arrays.
              </p>
            </div>

            <div class="answer">
              <p>See below:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> exam1QA = [
  {
    question: "What is the capital of Georgia?",
    answer: "Atlanta"
  },
  {
    question: "What is the state bird of Georgia?",
    answer: "Brown thrasher"
  }
]
</code></pre>
              <p>To access the first question on the exam, you could write:</p>
              <pre
                class="JS code"
              ><code class="JS">console.log(exam1QA[0].question);</code></pre>
            </div>
          </li>

          <li id="general_JS_emptyObjsAndArrays">
            <div class="question">
              <p>
                It is possible to create empty objects and arrays. True or
                False?
              </p>
            </div>

            <div class="answer">
              <p>True. Here's how you would do it:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> emptyArr = [];
<span class="statement">var</span> emptyObj = {};</code></pre>
            </div>
          </li>

          <li id="general_JS_CreatingMethods">
            <div class="question">
              <p>How do you create a method for an object in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                There are several ways to do this. As we know, methods are
                simply functions which belong to objects. The below syntax
                example is from MDN:
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><strong>Option 1: Copy from an existing function:</strong>
objectName.methodname = function_name;

<strong>Option 2: Create it at the same time you define the object:</strong>
<span class="statement">var</span> myObj = {
  methodname: function(params) {
    <span class="comment">// ...do something</span>
  }

  <span class="comment">// OR THIS WORKS TOO</span>

  methodname(params) {
    <span class="comment">// ...do something</span>
  }
};</code></pre>
              <p>Let's see these two ways in practice:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="warning">(Used "cls" instead of "class" because "class" is a JS keyword!)</span>
<strong>Option 1: Copy from an existing function:</strong>
<span class="statement">function</span> concatCVS() {
    <span class="statement">var</span> IPLongSKU = <span class="statement">this</span>.cls + "-" + <span class="statement">this</span>.vendor + "-" + <span class="statement">this</span>.style;
    <span class="statement">return</span> IPLongSKU;
}

<span class="statement">var</span> style = {
  cls: "4110", 
  vendor: "021231", 
  style: "0003124",
  IPStyle: concatCVS
};

style.IPStyle(); <span class="comment">// Returns "4110-021231-0003124"</span>

<strong>Option 2: Create it at the same time you define the object:</strong>
<span class="statement">var</span> style = {
    cls: "4110", 
    vendor: "021231", 
    style: "0003124",
    IPStyle: function() {
        <span class="statement">var</span> IPLongSKU = <span class="statement">this</span>.cls + "-" + <span class="statement">this</span>.vendor + "-" + <span class="statement">this</span>.style;
        <span class="statement">return</span> IPLongSKU;
  }
}

<span class="comment">// 2B. Use "concise methods", which is a new feature of ECMAScript 6.</span>
  
<span class="statement">var</span> style = {
    cls: "4110", 
    vendor: "021231", 
    style: "0003124",
    IPStyle() {
        <span class="statement">var</span> IPLongSKU = <span class="statement">this</span>.cls + "-" + <span class="statement">this</span>.vendor + "-" + <span class="statement">this</span>.style;
        <span class="statement">return</span> IPLongSKU;
  }
}</code></pre>
              <p>
                Notice the use of the keyword
                <code class="JS"><span class="statement">this</span></code
                >, which is used to refer to the calling object. In the case of
                Option 1, this could be a great template function if there were
                several possible objects that had properties called "cls",
                "vendor", and "style". Basically, it negates the need for input
                parameters if those parameters are simply properties of the
                object itself.
              </p>

              <p>
                If you were to omit
                <code class="JS"><span class="statement">this</span></code
                >, then JS would look for global variables outside of the object
                called "cls", "vendor", and "style", rather than within the
                object itself.
              </p>
            </div>
          </li>

          <!--OVERSIMPLIFIES THE THIS KEYWORD
<li id="synprof_JS_thisInObjectCreation">
          <div class="question">
            <p>In the following example, why does ipStyle equal "ined-efined-defined"?</p>
            <pre class="invalid JS code"><code class="JS"><span class="statement">var</span> s4110212313124 = {
    cls: 4110, 
    vendor: 21231, 
    style: 3124,
    ipStyle:
      ("0000" + this.cls).substr(("0000" + this.cls).length - 4) +
      "-" + 
      ("000000" + this.vendor).substr(("000000" + this.vendor).length - 6) + 
      "-" + 
      ("0000000" + this.style).substr(("0000000" + this.style).length - 7)
}</code></pre>
          </div>
          <div class="answer">
            <p>Obviously, the JS engine is taking the substring of the word "undefined". But why are cls, vendor, and style undefined? Are they not defined right above?</p>
            <p>The problem lies with the keyword <code class="JS"><span class="statement">this</span></code>, which as you remember is used to refer to the calling object.</p>
            <p>The calling object is window, because we are defining this variable in the global scope. Therefore the JS engine is looking for global variables called cls, vendor, and style - i.e. variables on the same level as s4110212313124 - which are all undefined.</p>
            <p>If you want to use the <code class="JS"><span class="statement">this</span></code> keyword in the above manner in object creation, you will need to use a constructor function.</p>
          </div>
        </li>
-->
          <li id="general_JS_ifConditionIsAssignment">
            <div class="question">
              <p>
                JavaScript will raise an error if you accidentally use an
                assignment operator (=) rather than a comparison operator (== or
                ===) in the condition clause of an if statement. True or False?
              </p>
            </div>

            <div class="answer">
              <p>
                False. It is perfectly valid to make an assignment in the
                condition clause of an if statement. Remember that an if
                statement evaluates whether a condition is truthy or falsy,
                which can be done without any operators.
              </p>
              <p>
                Therefore the following code block can be legitimately used to
                say: if an element with the id of "post-summary" exists, then
                return its innerHTML:
              </p>
              <pre class="JS code"><code class="JS">function getSummaryHTML() {
                        
    <span class=" statement">if</span> (summary = document.getElementById("post-summary")) {
    	<span class=" statement">return</span> summary.innerHTML;
    }
} 

getSummaryHTML();
</code></pre>
            </div>
          </li>

          <li id="general_JS_AddingNumberToUndefined">
            <div class="question">
              <p>
                What happens when you add a numeric variable to an undefined
                variable?
              </p>
            </div>

            <div class="answer">
              <p>
                You would get the NaN error, because you cannot do math with
                undefined variables.
              </p>
            </div>
          </li>

          <li id="general_JS_debugging">
            <div class="question">
              <p>
                What is "debugging" and what tool do you use to debug in
                JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                "Debugging is the process of finding and resolving of defects
                that prevent correct operation of computer software or a
                system." Basically, if your code is not working as expected, it
                is the process of going through your code to see where the
                problem lies.
              </p>
              <p>
                Debugging is usually done through the browser's developer tools,
                which can be accessed in Chrome and Firefox by pressing the
                keyboard shortcut Ctrl+Shift+I.
              </p>
              <p>
                This is
                <a
                  href="https://developers.google.com/web/tools/chrome-devtools/javascript/reference"
                  >an excellent explanation</a
                >
                of debugging JavaScript using Chrome's developer interface.
              </p>
            </div>
          </li>
          <li id="bestpractice_JS_variableNaming">
            <div class="question">
              <p>
                What is the best practice for naming JavaScript variables and
                functions?
              </p>
            </div>

            <div class="answer">
              <p>
                Use camelCase, do not use underscores (_), do not prefix the
                variable name with the datatype.
              </p>

              <p>
                The only exception to the camelCase rule is when you are
                creating your own <span class="toDo">object constructors</span>.
                The convention with object constructors is to use capital
                letters, i.e. <code class="JS object">Math</code>,
                <code class="JS object">Date</code>,
                <code class="JS object">Array</code>.
              </p>
            </div>
          </li>

          <li id="bestpractice_JS_functionDefining">
            <div class="question">
              <p>
                You should define your functions before you call them. True or
                False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_JS_blockStatement">
            <div class="question">
              <p>What is a "block statement" in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                "A block statement (or compound statement in other languages) is
                used to group zero or more statements. The block is delimited by
                a pair of curly brackets and may optionally be labelled." The
                below is the syntax for one block statement.
              </p>
              <pre class="code syntax"><code class="JS">[label:] {
  statement_1;
  statement_2;
  ...
  statement_n;
}</code></pre>
              <p>
                "This statement is commonly used with control flow statements
                (e.g. if...else, for, while)."
              </p>
              <p>
                Even though my previous definition of the if statement included
                the curly braces in the syntax example, they are actually not
                required, but highly, highly recommended.
              </p>
            </div>
          </li>
          <li id="synprof_returnLocation">
            <div class="question">
              <p>
                The return statement is block-scoped, meaning it can be used
                inside if statements as well as functions. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                False. The return statement is only valid within functions. "The
                return statement ends function execution and specifies a value
                to be returned to the function caller."
              </p>
            </div>
          </li>

          <li id="general_strictMode">
            <div class="question">
              <p>What is "strict mode" with relation to JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                "Strict mode" the equivalent of writing
                <code class="VBA">Option Explicit</code> at the top of a VBA
                module. It binds you to good behavior, most notably declaring
                your variables. The script will fail if you try to assign a
                value to an undeclared variable.
              </p>

              <p>
                "To invoke strict mode for an entire script, put the exact
                statement "use strict"; (or 'use strict';) before any other
                statements."
              </p>

              <p>
                It can also be used on individual functions - for instance, if
                you only want to use strict mode within a certain function, then
                you would write "use strict"; at the top of that specific
                function.
              </p>
            </div>
          </li>

          <li id="general_entireScriptInFunction">
            <div class="question">
              <p>
                You can put your entire script inside of one anonymous function,
                if you like. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True. Here's how your script would look:</p>
              <pre class="JS code"><code class="JS">(function() {
<span class="comment">  //              
  // all the code
  //</span>
})();</code></pre>
              <p>
                This demonstrates you can simultaneously define and call a
                function. Wrap the definition in parentheses, then add an
                additional pair of parentheses and a semicolon to call it.
              </p>
            </div>
          </li>
          <li id="synprof_JS_wrapper" class="toDo">
            <div class="question">
              <p>What is a JS "wrapper"?</p>
            </div>

            <div class="answer">
              <p>[ANSWER UNDER CONSTRUCTION]</p>
            </div>
          </li>

          <li id="synprof_js_eval">
            <div class="question">
              <p>
                What does the eval() function do, and why is its use
                discouraged?
              </p>
            </div>

            <div class="answer">
              <p>
                eval(), which is "a function property of the global object," is
                the equivalent of T-SQL's EXEC keyword. It takes as its argument
                a string which contains JavaScript code, then executes it. For
                instance, from MDN:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> str = 'if ( a ) { 1 + 1; } else { 1 + 2; }';
<span class="statement">var</span> a = true;
<span class="statement">var</span> b = eval(str);  <span class="comment">// returns 2</span></code></pre>
              <p>
                You can see the danger of the eval() function - as with SQL
                injection, malicious parties could insert their own code as an
                argument to that function and cause havoc.
              </p>
            </div>
          </li>

          <li id="general_regularExpression">
            <div class="question">
              <p>
                What is a regular expression, and you do you use them in
                JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                A regular expression is "a sequence of characters that define a
                search pattern". For instance, the below regular expression...
              </p>
              <pre
                class="code syntax"
              ><code class="JS">/^[0-9]{5}(?:-[0-9]{4})?$/</code></pre>
              <p>
                ...checks if a given string is a valid US ZIP code (with option
                4 digit extension). But let's start a bit smaller to explain
                this. There are two steps to using regular expressions in
                JavaScript:
              </p>
              <ol>
                <li>Create the regular expression.</li>
                <li>Apply it to a string to see if the string matches.</li>
              </ol>
              <p>
                Let's say you want to check if the first paragraph in a news
                article contains the word "Trump". First, you have to create a
                regular expression. Luckily, a "contains" regular expression is
                one of the easiest to create. You can do it in two ways:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// A. Define it as a regular variable, but do not wrap it in quotes as you would a string, and also open and close with a forward slash...</span>
<span class="statement">var</span> trumpRegExp = /Trump/;

<span class="comment">// ...or B. Define it using the RegExp constructor function. In this case, you pass the expression between quotation marks as an argument</span>
<span class="statement">var</span> trumpRegExp = new RegExp("Trump");</code></pre>
              <p>
                Now let's say you have your paragraph that you'd like to test.
                We extract the text from it by using a querySelector to get the
                first p element within the the first article element, then grab
                all of its child nodes. We then loop through the child nodes,
                stopping when we encounter a text node, and setting our variable
                equal to its text content (data).
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> testParagraph = document.querySelector("article &gt; p:first-of-type");

<span class=" statement">for</span> (<span class="statement">var</span> i = 0; i &lt; testParagraph.childNodes.length; i++) {
  <span class=" statement">if</span> (testParagraph.childNodes[i].nodeType === 3) {
    <span class="statement">var</span> firstParText = testParagraph.childNodes[i].data;
    break;
  }
}</code></pre>
              <div class="revision">
                <p>
                  Wait! There's a much better way! Rather than looping through
                  all the child nodes to test if one is a text node, just use
                  the textContent property instead. The above code can be
                  shortened to the much smaller and sexier:
                </p>
                <pre
                  class="JS code"
                ><code class="JS"><span class="statement">var</span> testParagraph = document.querySelector("article &gt; p:first-of-type");

<span class="statement">var</span> firstParText = testParagraph.textContent;</code></pre>
                <p>Some notes regarding textContent:</p>
                <ul class="defineCode">
                  <li>
                    <span>Getting</span>: textContent "returns the concatenation
                    of the textContent property value of every child node,
                    excluding comments and processing instruction nodes. This is
                    an empty string if the node has no children."
                  </li>
                  <li>
                    <span>Setting</span>: "Setting this property on a node
                    removes all of its children and replaces them with a single
                    text node with the given value."
                  </li>
                </ul>
              </div>
              <p>
                Now let's use the test() method of the regular expression object
                with that text as an argument. If the testParagraph matches the
                regular expression of trumpRegExp, then the trumpCount variable
                will be incremented by one:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">if</span> (trumpRegExp.test(firstParText)) {
  trumpCount++;
}</code></pre>
              <p>
                There are a lot of codes with special meanings that you can use
                to match a very particular pattern. Below is a table of some of
                these codes. Remember that "expression", for the purposes of
                this example, mean that the match can include one or more
                characters.
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Code</td>
                    <td>Example</td>
                    <td>Example Match(es)</td>
                    <td>Purpose</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>^</td>
                    <td>/^Mc/</td>
                    <td>"McDonald"</td>
                    <td>
                      Matches beginning of input / string must begin with that
                      exact expression.
                    </td>
                  </tr>
                  <tr>
                    <td>$</td>
                    <td>/stein$/</td>
                    <td>"Goldstein"</td>
                    <td>
                      Matches end of input / string must end in that exact
                      expression.
                    </td>
                  </tr>
                  <tr>
                    <td>*</td>
                    <td>/hel*o/</td>
                    <td>"heo","helo","hello","helllllllo"</td>
                    <td>Preceding character can appear 0 or more times.</td>
                  </tr>
                  <tr>
                    <td>+</td>
                    <td>/z+/</td>
                    <td>"La Paz","buzz"</td>
                    <td>Preceding character must appear 1 or more times.</td>
                  </tr>
                  <tr>
                    <td>?</td>
                    <td>/html?/</td>
                    <td>"htm","html"</td>
                    <td>Preceding character must appear 0 or 1 times.</td>
                  </tr>
                  <tr>
                    <td>.</td>
                    <td>/.n/</td>
                    <td>"an","in","on"</td>
                    <td>
                      Signifies a wildcard character - one single character, any
                      character but newline.
                    </td>
                  </tr>
                  <tr>
                    <td>\w</td>
                    <td>/b\w\wbs/</td>
                    <td>"boobs","b00bs","b__bs"</td>
                    <td>
                      Matches any alphanumeric character i.e. A-Z, 0-9, with the
                      only symbol included being the underscore.
                    </td>
                  </tr>
                  <tr>
                    <td>|</td>
                    <td>/fire|terminate/</td>
                    <td>"fired","terminated"</td>
                    <td>
                      Your standard OR pipe, which will count a match if either
                      expression matches.
                    </td>
                  </tr>
                  <tr>
                    <td>\b</td>
                    <td>/\bass\b/</td>
                    <td>"ass"</td>
                    <td>
                      Matches a word boundary - a space or a line break. In this
                      example, we are testing a string for the word "ass". If we
                      did not put \b on either side, then this would match
                      "bass", "assign", etc.
                    </td>
                  </tr>
                  <tr>
                    <td>{ }</td>
                    <td>/A{3}/</td>
                    <td>"AAA"</td>
                    <td>
                      Matches exactly N occurrences of the preceding expression.
                      N must be a positive integer. Will still match if there
                      are more characters, but the match corresponds to only
                      those specific characters.
                    </td>
                  </tr>
                  <tr>
                    <td>[ ]</td>
                    <td>/[crnd]ope/</td>
                    <td>"cope","rope","nope","dope"</td>
                    <td>
                      Character set - can match any one of the characters within
                      the brackets.
                    </td>
                  </tr>
                  <tr>
                    <td>[ - ]</td>
                    <td>/[A-Z][0-9]/</td>
                    <td>"A1","ffK4","Y2aa","aR9a"</td>
                    <td>
                      Character set - you can use a hyphen between two
                      characters to specify a range.
                    </td>
                  </tr>
                  <tr>
                    <td>\d</td>
                    <td>/\d\d\d\d\d\d/</td>
                    <td>"234111","22135561212",113122</td>
                    <td>Digit. Equivalent to [0-9].</td>
                  </tr>
                </tbody>
              </table>
              <p>
                Note that in the final example of the character set with a
                range, the expression is case sensitive. If you want to make the
                search case-insensitive, you can use the letter i after the
                expression. Codes typed after the expression are referred to as
                "flags". There are four other flags: global search (g),
                multi-line search (m), unicode (u), and sticky (y). Here's an
                example of how you would implement this using both regular
                expression definition methods.
                <span class="toDo"
                  >I don't fully understand global search and multiple matches
                  vs. one match. I think it's that global returns all matches
                  while by default you'd only get the first match. But check to
                  be sure.</span
                >
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><span class="statement">var</span> re = /pattern/flags;</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> re = /[A-Z][0-9]/i;</code></pre>
              <pre
                class="code syntax"
              ><code class="JS"><span class="statement">var</span> re = new RegExp('pattern', 'flags');</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> re = new RegExp('[A-Z][0-9]', 'i');</code></pre>
              <p>
                Also, you should note one important difference between these two
                methods of declaring and initializing a regular expression
                variable: "do not forget to escape \ itself while using the
                RegExp("pattern") notation because \ is also an escape character
                in strings."
              </p>
              <p>
                This means that the following regular expression literal, using
                the \w code...
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> re = /b\w\wbs/;</code></pre>
              <p>
                ...would have to be expressed like this, using the RegExp
                constructor.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> re = new RegExp('b\\w\\wbs');</code></pre>
            </div>
          </li>
          <li id="general_windowWidthHeightJS">
            <div class="question">
              <p>
                How do you use JavaScript to find the width and height of a
                user's window in pixels?
              </p>
            </div>

            <div class="answer">
              <p>
                If you mean the area of the window dedicated to displaying the
                document (i.e. not including the URL bar, bookmark bar, scroll
                bar, developer console, etc.), then there are two suitable
                methods:
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Language</td>
                    <td>Method</td>
                    <td>Live Output</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>JavaScript</td>
                    <td>document.documentElement.clientWidth</td>
                    <td id="exJSwindowWidthContent"></td>
                  </tr>
                  <tr>
                    <td>jQuery</td>
                    <td>$(window).width()</td>
                    <td id="exJQwindowWidthContent"></td>
                  </tr>
                </tbody>
              </table>
              <p>
                The height methods are the exact same, save for the word
                "height":
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Language</td>
                    <td>Method</td>
                    <td>Live Output</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>JavaScript</td>
                    <td>document.documentElement.clientHeight</td>
                    <td id="exJSwindowHeightContent"></td>
                  </tr>
                  <tr>
                    <td>jQuery</td>
                    <td>$(window).height()</td>
                    <td id="exJQwindowHeightContent"></td>
                  </tr>
                </tbody>
              </table>
              <p>
                If you want to get the width and height of the actual
                application window, including toolbars, scrollbars, etc, then
                you can use the following JavaScript methods:
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Language</td>
                    <td>Method</td>
                    <td>Live Output</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>JavaScript</td>
                    <td>document.documentElement.clientHeight</td>
                    <td id="exJSwindowWidthAll">window.outerWidth</td>
                  </tr>
                  <tr>
                    <td>jQuery</td>
                    <td>$(window).height()</td>
                    <td id="exJSwindowHeightAll">window.outerHeight</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>
          <li id="general_stringPropsOnStringLiterals">
            <div class="question">
              <p>
                You can use string properties, like length, on string literals -
                i.e. <code class="JS">"bonkers".length;</code> is a valid
                statement. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                True. "You can call any of the methods of the String object on a
                string literal value—JavaScript automatically converts the
                string literal to a temporary String object, calls the method,
                then discards the temporary String object."
              </p>
            </div>
          </li>
          <li id="test_jsAdditionWithNonNumbers">
            <div class="question">
              <p>
                Provide the results to these three math problems as interpreted
                by JavaScript:
              </p>
              <ul>
                <li><code class="JS">2 + undefined</code></li>
                <li><code class="JS">2 + null</code></li>
                <li><code class="JS">2 + false</code></li>
              </ul>
            </div>

            <div class="answer">
              <ul>
                <li>
                  <code class="JS">2 + undefined</code> equals
                  <code class="JS">NaN</code>.
                </li>
                <li>
                  <code class="JS">2 + null</code> equals
                  <code class="JS">2</code>.
                </li>
                <li>
                  <code class="JS">2 + false</code> equals
                  <code class="JS">2</code>.
                </li>
              </ul>
            </div>
          </li>
          <li id="synprof_variablesAsPropOfGlobalObject">
            <div class="question">
              <p>
                Global variables are technically just properties of the global
                object, which in browsers, is the
                <code class="JS object">window</code> object. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True. These variables are said to be in the "global scope".</p>
            </div>
          </li>
          <li id="test_arrayWithExtraCommas">
            <div class="question">
              <p>What is the length of this array?</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> test = ["timmy","sally","bill",,,];</code></pre>
            </div>

            <div class="answer">
              <p>
                The length is 5. "timmy","sally","bill" are the first three
                elements. Then there are two more empty strings, which are
                recorded if they are surrounded on each side by a comma. But the
                final comma is ignored, because it is not followed by any value.
              </p>
            </div>
          </li>

          <li id="general_jsFunctionsByValOrRef">
            <div class="question">
              <p>
                If you pass a variable to a function as an argument, the
                function can change the value of that variable. True or False?
              </p>
            </div>

            <div class="answer">
              <p>
                It depends on the type of variable you pass into the function.
              </p>
              <p>
                If the variable you are passing is a
                <a href="#synprof_jsPrimitive">primitive</a>, then the answer is
                <strong>false</strong>. When you pass a variable to a function
                as an argument, it essentially copies that variable's value into
                the value of its own local variable, which is the parameter
                given in the function definition. For example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> score = 3;

function increment(x) {
  x += 2;
}

console.log(score); <span class="comment">// 3</span>
increment(score);
console.log(score); <span class="comment">// still 3!</span></code></pre>
              <p>
                However, if the variable you are passing is an
                <a href="#synprof_JS_object">object</a>, then its value
                <em>will</em> reflect any changes made to it by a function;
                therefore the answer is <strong>true</strong>. Let's modify the
                above example so that score is an object with a property of
                value set to 3:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> score = {
  value: 3
};

function increment(x) {
  x.value += 2;
}

console.log(score.value); <span class="comment">// 3</span>
increment(score);
console.log(score.value); <span class="comment">// now 5!</span></code></pre>
            </div>
          </li>
          <li id="general_jsFunctionCallItself">
            <div class="question">
              <p>A JavaScript function can call itself. True or False?</p>
            </div>

            <div class="answer">
              <p>
                True. This is called recursion, though it may take awhile to
                wrap your head around. The <i>wrong</i> way to think about it is
                a loop with "passes". Instead remember the call stack, and
                remember that the calling function cannot resolve itself /
                evaulate until the nested function(s) are finished. Here's an
                example from MDN - a function that returns the factorial of a
                number.
              </p>
              <pre class="JS code"><code class="JS">function factorial(n) {
  if ((n === 0) || (n === 1))
    <span class=" statement">return</span> 1;
  else
    <span class=" statement">return</span> (n * factorial(n - 1));
}</code></pre>
              <p>
                Let's look at a sample call stack for factorial(3), which
                returns 6 (3 * 2 * 1). Remember that as soon as one function
                calls another, it is essentially frozen in time, waiting for the
                callee to finish what it is doing. It is no longer the top of
                the call stack.
              </p>
              <pre class="JS code"><code class="JS">factorial(3);

<span class="comment">// BTM STACK - FIRST CALL:    factorial(3), which in turn calls...

  // MID STACK - SECOND CALL:   factorial(2), which in turn calls...
  
    // TOP STACK - THIRD CALL:    factorial(1)
    
    // TOP STACK - THIRD CALL'S RETURN:  1
    
  // MID STACK - SECOND CALL'S RETURN: 2 (2 * first return)
  
// BTM STACK - FIRST CALL'S RETURN:  6 (3 * second return)</span>
</code></pre>
              <p>
                Because recursion is a difficult but important concept, let's
                look at another, more complicated example in order to try to
                hammer this thing home.
              </p>
              <p>
                The challenge: write a function that will sum all the numbers in
                an array. The problem: the arrays could be deeply nested, in an
                unpredictable manner, like so:
              </p>
              <pre class="JS code"><code class="JS">[1, [2, [3, 4]]]
</code></pre>
              <p>This recursive function does this trick nicely:</p>
              <pre
                class="JS code"
              ><code class="JS">function multiArraySum(arr) {
  let sum = 0;
  for (let i = 0; i &lt; arr.length; i++) {
    if (Array.isArray(arr[i])) {
      sum += multiArraySum(arr[i]);
    } else {
      sum += arr[i];
    }
  }
  return sum;
}
</code></pre>
              <p>Let's step through the code for this function's execution:</p>
              <pre
                class="JS code"
              ><code class="JS">multiArraySum([1, [2, [3, 4]]]);

<span style="color:brown">// F1: multiArraySum([<span class = "hghlt">1</span>, [2, [3, 4]]]).
i = 0. arr[i] is highlighted.
arr[i] is not an array. <span class = "statement">else</span> block is executed.
sum = sum (0) + 1
sum = 1
    
// F1: multiArraySum([1, <span class = "hghlt">[2, [3, 4]]</span>]).
i = 1. arr[i] is highlighted.
arr[i] is an array. <span class = "statement">if</span> block is executed.
sum = sum (1) + multiArraySum([2, [3, 4]])

<span class = "nest" style = "color:darkblue">// F2: multiArraySum([<span class = "hghlt">2</span>, [3, 4]]).
i = 0. arr[i] is highlighted.
arr[i] is not an array. <span class = "statement">else</span> block is executed.
sum = sum (0) + 2
sum = 2

// F2: multiArraySum([2, <span class = "hghlt">[3, 4]</span>]).
i = 1. arr[i] is highlighted.
arr[i] is an array. <span class = "statement">if</span> block is executed.
sum = sum (2) + multiArraySum([3, 4])

<span class= "nest" style = "color:darkgreen">// F3: multiArraySum([<span class = "hghlt">3</span>, 4]).
i = 0. arr[i] is highlighted.
arr[i] is not an array. <span class = "statement">else</span> block is executed.
sum = sum (0) + 3
sum = 3

// F3: multiArraySum([3, <span class = "hghlt">4</span>]).
i = 1. arr[i] is highlighted.
arr[i] is not an array. <span class = "statement">else</span> block is executed.
sum = sum (3) + 4
sum = 7

<b>// Last item in F3 loop (4) completed.</b>
<b>// F3 Return: 7</b>
</span>
sum = sum (2) + F3 Return (7)
sum = 9

<b>// Last item in F2 loop ([3, 4]) completed.</b>
<b>// F2 Return: 9 </b>
</span>
sum = sum (1) + F2 Return (9)
sum = 10

<b>// Last item in F1 loop ([2, [3, 4]]) completed.</b>
<b>// F1 Return: 10 </b>
</span></code></pre>
            </div>
          </li>

          <li id="general_jsFnCallW&amp;WOParentheses">
            <div class="question">
              <p>Given the following function...</p>
              <pre class="JS code"><code class="JS">function giveMeFive() {
  <span class=" statement">return</span> 5; 
}</code></pre>
              <p>...what is the difference between these two statements?</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> whatUp = giveMeFive();</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> whatUp = giveMeFive;</code></pre>
            </div>

            <div class="answer">
              <p>Here is the difference:</p>
              <ul>
                <li>The first statement assigns the value of 5 to whatUp.</li>
                <li>
                  The second statement assigns the value of the function itself
                  to whatUp. That means that whatUp(); would return 5.
                </li>
              </ul>
              <p>
                This demonstrates the importance of the parentheses when calling
                a function - parentheses signify that you want the function to
                execute, and if the function returns a value, then it will be
                returned. If your function returns another function which itself
                returns a value, then you can provide multiple sets of
                parentheses after the first function call for each nested
                function whose return statement you would like to be executed.
              </p>
            </div>
          </li>

          <li id="general_jsNestedParameters">
            <div class="question">
              <p>
                Is it possible to provide parameters for nested functions in
                JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes. You would provide the parameters in an extra set of
                parentheses in the calling order of the functions. This only
                works if the nested function itself is returned, i.e., without
                the parentheses, which would signify the nested function's
                result. In a sense the parentheses to signal execution of the
                internal function are just in a different place. Below is a
                wrong way to do this, followed by a correct way.
              </p>
              <pre
                class="invalid JS code"
              ><code class="JS">function calcFinalGrade(baseGrade) {
  function extraCredit(maxExtraCredit) {
    <span class=" statement">return</span> Math.floor(Math.random() * maxExtraCredit);
  }
  <span class=" statement">return</span> extraCredit + baseGrade;
}

<span class="hghlt">var result = calcFinalGrade(80)(10);</span>
console.log(result);</code></pre>
              <p>
                The above does not work because the return statement is
                attempting to add a primitive number to a function object. The
                JS engine's best solution is the concatenate the text of the
                function with the baseGrade parameter.
              </p>
              <pre
                class="valid JS code"
              ><code class="JS">function calcFinalGrade(baseGrade) {
  function extraCredit(maxExtraCredit) {
    <span class=" statement">return</span> baseGrade + (Math.floor(Math.random() * maxExtraCredit));
  }
  <span class=" statement">return</span> extraCredit;
}

<span class="hghlt">var result = calcFinalGrade(80)(10);</span>
console.log(result);</code></pre>
              <p>
                The above works because
                <code class="JS">return extraCredit;</code> -- the sole
                executable statement in the outer calcFinalGrade function -- is
                combined with the second parameter supplied -- (10) -- so that
                in essence the calcFinalGrade function is saying return
                extraCredit(10);
              </p>
            </div>
          </li>

          <li id="test_stringArrayNotation">
            <div class="question">
              <p>What is the result of the below?</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> jeff = "Jeff";
console.log(jeff[1]);</code></pre>
            </div>

            <div class="answer">
              <p>
                The console will print "e", the letter at position 1. Array
                notation works on strings because a string is just an array of
                characters.
              </p>
            </div>
          </li>

          <li id="#synprof_JS_switch">
            <div class="question">
              <p>What is the JavaScript equivalent of a CASE statement?</p>
            </div>

            <div class="answer">
              <p>
                This is the
                <code class="JS"><span class="statement">switch</span></code>
                statement. In the example below, the customer order distribution
                center is based off of where they live:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> customerDC;
<span class="statement">var</span> customerCountry = prompt("Where do you live?");
                
<span class="statement">switch</span> (customerCountry) {

  <span class="statement">case</span> "France":
  <span class="statement">case</span> "Denmark":
  <span class="statement">case</span> "Ireland":
  <span class="statement">case</span> "UK":
    customerDC = "GBC";
    break;
  <span class="statement">case</span> "Canada":
  <span class="statement">case</span> "Brazil":
  <span class="statement">case</span> "USA":
  <span class="statement">case</span> "Mexico":
    customerDC = "USC";
    break;
  <span class="statement">default</span>:
    customerDC = "SOL";
}</code></pre>
              <p>There are a few things going on here:</p>
              <ul>
                <li>
                  <p>
                    Note how the
                    <code class="JS"
                      ><span class="statement">switch</span></code
                    >
                    statement is like an
                    <code class="JS"><span class="statement">if</span></code>
                    statement in its structure - something in parentheses
                    followed by a statement block.
                  </p>
                </li>
                <li>
                  <p>
                    The variable in the parentheses is the variable to be
                    tested.
                  </p>
                </li>
                <li>
                  <p>
                    Note that you cannot use the OR double pipes (||) in a
                    switch statement - the below is invalid JavaScript and will
                    error out:
                  </p>
                  <pre
                    class="invalid JS code"
                  ><code class="JS"><span class="statement">switch</span> (customerCountry) {
  <span class="statement">case</span> "France" || "Denmark":
    <span class = "comment">// (statements)</span>
}</code></pre>
                  <p>
                    Instead, you put "<strong>fall-through</strong>" to work for
                    you, which happens to look a lot cleaner too.
                  </p>
                  <pre
                    class="valid JS code"
                  ><code class="JS"><span class="statement">switch</span> (customerCountry) {
  <span class="statement">case</span> "France":
  <span class="statement">case</span> "Denmark":
    <span class = "comment">// (statements)</span>
  ...
}</code></pre>
                  <p>
                    Let's say your country is Ireland. The
                    <code class="JS"
                      ><span class="statement">switch</span></code
                    >
                    statement first tests to see if your country is France. It
                    is not, but there is no
                    <code class="JS"
                      ><span class="statement">break;</span></code
                    >
                    keyword to signify that the
                    <code class="JS"
                      ><span class="statement">switch</span></code
                    >
                    statement should end. So the test "falls through" to the
                    next case. Denmark? No. Fall through. Ireland? Yes!
                  </p>
                  <p>
                    It will now execute the next statements it encounters, which
                    are housed under the UK case. In other words, the
                    instructions for Ireland are: "do whatever you would do if
                    the customer were in the UK."
                  </p>
                </li>
                <li>
                  Fall-through can also work against you if you forget to put in
                  a
                  <code class="JS"><span class="statement">break</span></code>
                  statement! If you want the
                  <code class="JS"><span class="statement">switch</span></code>
                  statement to stop executing after a certain condition is met,
                  then you need the
                  <code class="JS"><span class="statement">break;</span></code>
                  keyword at the end of the case block.
                </li>
                <li>
                  Note the
                  <code class="JS"><span class="statement">default</span></code>
                  keyword, which is equivalent to ELSE/Case Else. This is the
                  catch-all for any other values of customerCountry.
                </li>
              </ul>
            </div>
          </li>

          <li id="general_JS_accessingPrivateProperties">
            <div class="question toDo">
              <p>
                How does one access an object's private properties in
                JavaScript? [incomplete]
              </p>
            </div>

            <div class="answer">
              <p>
                One must go through a gatekeeper of sorts, a public method known
                as either a "getter" (to retrieve a private value) or a "setter"
                (to set a private value). Often, these functions can do both.
              </p>
              <p>Let's take a look at our person constructor from earlier.</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> Person (first, last) {
  <span class="statement">this</span>.firstName = first;
  <span class="statement">this</span>.lastName = last;
  <span class="statement">var</span> bankBalance = 1000;
  <span class="statement">var</span> getBalance = function () {
    <span class="statement">return</span> bankBalance;
  }
}</code></pre>
              <p>
                The getBalance method is private. We can create a public method
                which returns the result of that private method, but with one
                added parameter - a password.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> Person (first, last) {
  <span class="statement">this</span>.firstName = first;
  <span class="statement">this</span>.lastName = last;
  <span class="statement">var</span> bankBalance = 1000;
  <span class="statement">var</span> password = 9199;
  <span class="statement">var</span> getBalance = function () {
    <span class="statement">return</span> bankBalance;
  }
  <span class="statement">this</span>.askTeller = function (pin) {
    if (pin === password) {
      <span class="statement">return</span> getBalance;
    }
  }
}</code></pre>
              <p>Let's instantiate this class into an object:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> jeff = <span class="operator">new</span> Person('Jeff','Gore');</code></pre>
              <p>And now we can call the askTeller method:</p>
              <pre
                class="JS code"
              ><code class="JS">jeff.askTeller(9199)();</code></pre>
              <p>
                As explained earlier, the two sets of parentheses signify that
                the first and second functions called should both execute their
                return statements.
              </p>
              <p>
                But why define it that way in the first place? Defining
                askTeller as returning only the function getBalance rather than
                the result of the getBalance's execution gives us the
                flexibility to do either, but if we hard-coded parentheses at
                the end of return getBalance, then we'd be bound to that one
                solution.
              </p>
            </div>
          </li>

          <li id="synprof_JS_objectVsObject">
            <div class="question">
              <p>
                In JavaScript, what is the difference between an object and an
                Object?
              </p>
            </div>

            <div class="answer">
              <p>
                An Object - the class, or technically, prototype - is a type of
                object. In general, a lowercase-o object refers to any
                collection of key-value pairs known as properties. Any object
                created in object literal notation becomes an Object object.
              </p>
            </div>
          </li>

          <li id="synprof_JS_descendFromObject">
            <div class="question">
              <p>
                All objects in JavaScript are descended from Object; all objects
                inherit methods and properties from Object.prototype, although
                they may be overridden. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_JS_lineBreakInString">
            <div class="question">
              <p>
                In JavaScript, how do you place a line break inside a string?
              </p>
            </div>

            <div class="answer">
              <p>You would use the \n character.</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> jeff = "Jeff\nGore";
console.log(jeff);
<span class = "comment">/*
Console:
Jeff
Gore
*/</span></code></pre>
            </div>
          </li>

          <li id="general_JS_scientificNotation">
            <div class="question">
              <p>
                JavaScript allows you to create number variables using
                scientific notation. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True. The following is valid JavaScript:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> numberOfAtomsOnEarth = 1.33e+105;
console.log(numberOfAtomsOnEarth/2);

<span class = "comment">// Console: 6.65e+104</span></code></pre>
            </div>
          </li>

          <li id="general_JS_returnMultipleValues">
            <div class="question">
              <p>
                In a JS function, you can
                <code class="JS"><span class="statement">return</span></code>
                multiple values. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                False. "...don't be fooled by the fact that ECMAScript allows
                you to <code>return 1, 2, ...</code>. What really happens there
                is not what it might seem. An expression in return statement —
                <code>1, 2, 3</code> — is nothing but a comma operator applied
                to numeric literals (<code>1</code> , <code>2</code>, and
                <code>3</code>) sequentially, which eventually evaluates to the
                value of its last expression — <code>3</code>. That's why
                <code>return 1, 2, 3</code> is functionally identical to nothing
                more but <code>return 3</code>":
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">return</span> 1, 2, 3;
<span class = "comment">// becomes</span>
<span class="statement">return</span> 2, 3;
<span class = "comment">// becomes</span>
<span class="statement">return</span> 3;</code></pre>
            </div>
          </li>

          <li id="keyprof_JS_throwTryCatch">
            <div class="question">
              <p>How do you throw and catch an error in JavaScript?</p>
            </div>

            <div class="answer">
              <p>
                You would use the
                <code class="JS"><span class="statement">throw</span></code>
                keyword, followed either by a primitive value or by an object.
                If using an object, this would also require the
                <code class="JS"><span class="statement">new</span></code>
                keyword in order to instantiate the object. There is a standard
                built-in
                <code class="JS"><span class="object">Error</span></code>
                object, so you could do the following:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> nameArray = [];
            
<span class=" statement">if</span> (nameArray.indexOf('Jeff') === -1) {
    <span class = "statement">throw</span> <span class = "statement">new</span> Error('Jeff not found!');
} </code></pre>
              <p>
                As you can see, however, this does not catch the error and
                attempt to rectify it. If you were to run the above in the
                console, you will see this "Uncaught" error message:
              </p>
              <img src="_images/keyprof_JS_throwTryCatch.PNG" />
              <p>
                This is where we will use a
                <code class="JS"
                  ><span class="statement">try...catch</span></code
                >
                statement:
              </p>
              <pre class="JS code"><code class="JS">try {
  <span class=" statement">if</span> (nameArray.indexOf('Jeff') === -1) {
    throw new Error('Jeff not found, adding to array');
  } 
} catch (e) {
  errors.push(e);
  nameArray.push('Jeff');
}</code></pre>
              <p>
                As you can see, not only is the thrown error added to a
                dedicated errors array, but the problem is also rectified by
                adding 'Jeff' to the nameArray.
              </p>
              <p>
                As MDN puts it: "The
                <code class="JS"
                  ><span class="statement">try...catch</span></code
                >
                statement marks a block of statements to try, and specifies a
                response, should an exception be thrown."
              </p>
              <p>
                "The
                <code class="JS"><span class="statement">catch</span></code>
                block specifies an identifier (e in the example above) that
                holds the value specified by the
                <code class="JS"><span class="statement">throw</span></code>
                statement. The
                <code class="JS"><span class="statement">catch</span></code>
                block is unique in that JavaScript creates this identifier when
                the
                <code class="JS"><span class="statement">catch</span></code>
                block is entered and it adds it to the current scope; the
                identifier lasts only for the duration of the
                <code class="JS"><span class="statement">catch</span></code>
                block; after the
                <code class="JS"><span class="statement">catch</span></code>
                block finishes executing, the identifier is no longer
                available."
              </p>
            </div>
          </li>

          <li id="general_JS_variableReferencesPointers">
            <div class="question">
              <p>Consider this JavaScript code:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> bar = function () { alert("A"); };
<span class="statement">var</span> foo = bar;
bar = function () { alert("B"); };
foo();</code></pre>
              <p>
                Why is the result of calling foo() still the letter "A"? If foo
                is equal to bar, and bar was edited to alert "B", then shouldn't
                foo() also alert "B"?
              </p>
            </div>

            <div class="answer">
              <p>
                All variables which hold non-primitive datatypes in JavaScript -
                in other words, objects - are holding <i>references</i> to the
                object, not the object itself.
              </p>
              <p>
                A variable that holds a function - which is an object - is
                holding a reference to a function.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> bar = function () { alert("A"); }; <span class = "comment">
// bar is a pointer to function1</span>

<span class="statement">var</span> foo = bar; <span class = "comment">
// pointer copied; foo is now also a pointer to function1</span>

bar = function () { alert("B"); }; <span class = "comment">
// bar now points to function2</span>

foo(); <span class = "comment">
// foo is still a pointer to function1</span></code></pre>
              <p>
                This is why it is not as simple as you may think to "copy" an
                object. This well-meaning code below fails because it belies a
                misunderstanding of how references work:
              </p>
              <pre
                class="invalid JS code"
              ><code class="JS">function Person(name){
  this.name = name
}

<span class="statement">var</span> john = new Person("John");
<span class="statement">var</span> johnBackup = john;

console.log(johnBackup.name); <span class = "comment">// John</span>
john.name = "Jack";
console.log(johnBackup.name); <span class = "comment">// Jack, NOT John</span></code></pre>
              <p>
                Let's examine what is happening in the above code block through
                some basic infographics provided in this
                <a href="https://stackoverflow.com/a/8318405"
                  >excellent Stack Overflow post</a
                >
                regarding references.
              </p>
              <ol>
                <li>
                  <p>
                    An object is created, and the variable "john" is used to
                    store the reference to that object in memory.
                  </p>
                  <pre class="syntax code"><code class="JS">john
 \
  \
   { name: "John"}
</code></pre>
                </li>
                <li>
                  <p>
                    When johnBackup is assigned to the value john, it is
                    receiving a copy of the reference to that object. It is
                    important to note that johnBackup only equals the value of
                    the reference that john was holding at that moment of
                    assignment.
                  </p>
                  <pre class="syntax code"><code class="JS">john
 \
  \
   { name: "John"}
  /
 /
johnBackup</code></pre>
                </li>
                <li>
                  <p>
                    Therefore when john's name property is changed to "Jack",
                    johnBackup reflects that change as well, because both are
                    ultimately pointers to that same single object in memory.
                  </p>
                  <pre class="syntax code"><code class="JS">john
 \
  \
   { name: "Jack"}
  /
 /
johnBackup</code></pre>
                </li>
              </ol>
            </div>
          </li>

          <li id="synprof_JS_letAndConst">
            <div class="question">
              <p>
                What are two other statements used for declaring a variable
                besides
                <code class="JS"><span class="statement">var</span></code
                >, and what are their respective purposes?
              </p>
            </div>

            <div class="answer">
              <p>
                They are
                <code class="JS"><span class="statement">const</span></code> and
                <code class="JS"><span class="statement">let</span></code
                >. Before going into the particulars of each, it should be noted
                that both, unlike
                <code class="JS"><span class="statement">var</span></code
                >, are block-scoped.
              </p>
              <p>
                What is block scope? It means that the variable is valid within
                only within its containing
                <a href="#general_JS_blockStatement">block statement</a>. The
                example below is completely valid code:
              </p>
              <pre class="JS code"><code class="JS">function doWork (system) {
  const scale = 10;
  <span class=" statement">if</span> (system === "grade") {
    const scale = 5;
  }
}
</code></pre>
              <p>
                Two completely different variables with the same exact name
                exist simultaneously and independently, because they are limited
                in scope to different blocks.
              </p>
              <h3>
                <code class="JS"><span class="statement">const</span></code>
              </h3>
              <p>
                <code class="JS"><span class="statement">const</span></code> is
                short for "constant". "An initializer for a constant is
                required; that is, you must specify its value in the same
                statement in which it's declared (which makes sense, given that
                it can't be changed later)."
              </p>

              <p>
                "The
                <code class="JS"><span class="statement">const</span></code>
                declaration creates a read-only reference to a value. It does
                not mean the value it holds is immutable, just that the variable
                identifier cannot be reassigned. For instance, in the case where
                the content is an object, this means the object's contents
                (e.g., its parameters) can be altered."
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class = "comment invalid">// this will throw an error; constants require initialization:</span>
<span class = "statement">const</span> timeout;

<span class = "comment">// normal healthy const declaration:</span>
<span class = "statement">const</span> timeout = 100000;

<span class = "comment invalid">// will throw an error; constants cannot be reassigned:</span>
timeout = 200000;

<span class = "comment invalid">// will throw an error; constants cannot be redeclared:</span>
<span class = "statement">const</span> timeout = 200000;

<span class = "comment">// the 'timeout' constant still equals 100000.</span>
</code></pre>
              <p>
                Remember that
                <code class="JS"><span class="statement">const</span></code> is
                a "read-only reference" - when it comes to objects, that means
                its name and keys are read-only, but those keys' values can
                still be changed. This is why the MDN definition says
                <code class="JS"><span class="statement">const</span></code>
                "does not mean the value it holds is immutable." Take for
                example the below:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class = "statement">const</span> jeff = {
  age: 31,
  race: 'white',
  jobTitle: 'Business Analyst'
}

<span class = "comment">// totally valid changes:</span>
jeff.age = 32;
jeff.jobTitle = 'Web Developer';

<span class = "comment">// also valid to add a new property:</span>
jeff.car = 'Porsche';

<span class = "comment invalid">// but attempt to overwrite object with new definition will throw an error - "Assignment to constant variable":</span>
jeff = {
  age: 40,
  race: 'white',
  jobTitle: 'Talk Show Host'
}

<span class = "comment invalid">// and redeclaring with const will not work either - "Identifier 'jeff' has already been declared":</span>
<span class = "statement">const</span> jeff = {
  age: 40,
  race: 'white',
  jobTitle: 'Talk Show Host'
}
</code></pre>
              <p>The same goes for arrays:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class = "statement">const</span> lebronRings = [2012, 2013, 2016];

<span class = "comment">// after the initial declaration...</span>

<span class = "comment">// ...this works:</span>
lebronRings.push(2018);

<span class = "comment invalid">// ...but neither of these will work:</span>
lebronRings = [2012, 2013, 2016, 2018];
<span class = "statement">const</span> lebronRings = [2012, 2013, 2016, 2018];
</code></pre>

              <h3>
                <code class="JS"><span class="statement">let</span></code>
              </h3>
              <p>
                <code class="JS"><span class="statement">let</span></code
                >, named after the mathematical let expression, is useful
                because you can use it to create a variable that lives only
                within a specific block scope. The below is a good example from
                MDN:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> a = 1;
<span class="statement">var</span> b = 2;

<span class=" statement">if</span> (a === 1) {
  <span class="statement">var</span> a = 11; // the scope is global
  let b = 22; // the scope is inside the if-block

  console.log(a);  // 11
  console.log(b);  // 22
} 

console.log(a); // 11
console.log(b); // 2</code></pre>
              <p>
                One of the biggest problems that let solves is the preservation
                of the counter values if you wish to create new functions for
                each value of the counter.
              </p>
              <p>
                For instance, let's say we want to create a game of some kind
                where the player must complete their tasks within 60 seconds,
                and we want the background color of the page to gradually change
                to red as time is running out. We come up with a clever little
                loop:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">for</span> (<span class="statement">var</span> i = 1; i &lt;= 60; i++) {
  <span class="statement">var</span> r = 0 + (i*4);
  <span class="statement">var</span> b = 255 - (i*4);
  window.setTimeout(function() {
    document.getElementsByTagName('html')[0].style.backgroundColor =
    "rgb(" + r + ",0," + b + ")";
  }, (i*1000));
}</code></pre>
              <p>
                Yet when we run it, we are sorely disappointed. The color
                changes to bright red, and nothing else happens. The background
                was supposed to start at blue and fade to red. What is going on?
              </p>
              <ul>
                <li>
                  When defining a function with variables (in this case the
                  setTimeout callback function), the function stores
                  <i>references</i> to those variables, not the <i>value</i> of
                  the variable at the time it was created. Therefore instead of
                  creating 60 different setTimeout functions with 60 different
                  RGB values, we have created 60 identical setTimeout functions,
                  because all are live references to the current values of i, r,
                  and b.
                </li>
                <li>
                  With these 60 timeout callback functions all pointing to the
                  same variables, the background ends up being red because it
                  reflects the final value of r and b after the loop is finished
                  incrementing.
                </li>
                <li>
                  On the bright side, (i*1000) does work properly in creating
                  separate timeouts at 1, 2, 3, 4, etc. seconds. This is because
                  i is found outside the callback function and is supplied as
                  the second parameter of setTimeout, which expects a numeric
                  value.
                </li>
              </ul>
              <p>
                How, then, do we create 60 separate timeouts which reflect 60
                different versions of the variables i, r, and b? With the
                <code class="JS"><span class="statement">let</span></code>
                keyword:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">for</span> (<span class = "statement">let</span> i = 1; i &lt;= 60; i++) {
  <span class = "statement">let</span> r = 0 + (i*4);
  <span class = "statement">let</span> b = 255 - (i*4);
  window.setTimeout(function() {
    document.getElementsByTagName('html')[0].style.backgroundColor =
    "rgb(" + r + ",0," + b + ")";
  }, (i*1000));
}</code></pre>
              <p>
                Again, each time the loop runs, it creates a different version
                of r and b, because those variables are block-scoped with
                <code class="JS"><span class="statement">let</span></code
                >, and we are constantly exiting and re-entering that block.
                Also, even though i is outside of the block, it too gets a fresh
                binding for each iteration - why? Because the ECMAScript
                specification says so (I think).
              </p>
              <p>
                "Having one binding per iteration is very helpful whenever you
                create functions via a loop (e.g. to add event listeners).You
                also get per-iteration bindings in for loops (via
                <code class="JS"><span class="statement">let</span></code
                >) and for-in loops (via
                <code class="JS"><span class="statement">const</span></code> or
                <code class="JS"><span class="statement">let</span></code
                >)."
              </p>
              <p>
                A few points about
                <code class="JS"><span class="statement">let</span></code> (all
                are direct quotes):
              </p>
              <ul>
                <li>
                  A variable declared using
                  <code class="JS"><span class="statement">let</span></code>
                  cannot be used before its declaration or an error will
                  result...<code class="JS"
                    ><span class="statement">let</span></code
                  >
                  bindings are not subject to Variable Hoisting, which means
                  that
                  <code class="JS"><span class="statement">let</span></code>
                  declarations do not move to the top of the current execution
                  context....This period when the variable is in scope, but
                  uninitialized, is called the temporal dead zone.
                </li>
                <li>
                  If you do not initialize your variable in the
                  <code class="JS"><span class="statement">let</span></code>
                  statement, it is automatically assigned the JavaScript value
                  undefined.
                </li>
                <li>
                  At the top level of programs and functions,
                  <code class="JS"><span class="statement">let</span></code
                  >, unlike var, does not create a property on the global
                  object.
                </li>
                <li>
                  Loops of the form for (<code class="JS"
                    ><span class="statement">let</span></code
                  >
                  x...) create a fresh binding for x in each iteration.
                </li>
                <li>
                  Redeclaring the same variable within the same function or
                  block scope [with
                  <code class="JS"><span class="statement">let</span></code
                  >] raises a SyntaxError.
                </li>
              </ul>
            </div>
          </li>

          <li id="general_JS_arrowSyntax">
            <div class="question toComplete">
              <p>
                With regard to JavaScript functions, what is "arrow syntax" /
                what is an "arrow function"? (MUST ADD EXAMPLE OF WHY `THIS`
                CONTEXT) IS IMPORTANT)
              </p>
            </div>

            <div class="answer">
              <p>
                "An arrow function expression has a shorter syntax than a
                function expression and does not bind its own this, arguments,
                super, or new.target. These function expressions are best suited
                for non-method functions, and they cannot be used as
                constructors."
              </p>
              <p>
                To provide an example of arrow syntax, I'll revisit a previous
                example of ways to create a function, with arrow version tacked
                on at the end:
              </p>
              <p>
                The syntax is pretty simple - as you can tell from the brackets,
                function arguments are completely optional:
              </p>
              <pre
                class="code syntax"
              ><code class="JS"><span class="comment">// Option A. Function Declaration</span>
<span class="statement">function</span> exampleFunction ([parameter1], [parameter2], etc.) {
    [statements];
}

<span class="comment">// Option B. Function Expression</span>
<span class="statement">var</span> exampleFunction = <span class="statement">function</span> [optionalName] ([param1], [param2], etc.) {
    [statements];
};

<span class="comment">// Option C. Arrow Function Expression / Arrow Syntax</span>
([param1], [param2], etc.) =&gt; {
    [statements];
};</code></pre>
              <p>
                Let's practice with a simple function that returns your
                initials.
              </p>
              <pre
                class="JS code"
              ><code class="JS">const getInitials = (inputName) =&gt; {
  const fullName = inputName.trim();
  const nameComponents = fullName.split(" ");
  if (nameComponents.length === 1) {
    return false;
  }
  const initialArr = [];
  for (let i = 0; i &lt; nameComponents.length; i++) {
    if (nameComponents[i] !== "") {
      initialArr.push(nameComponents[i].substr(0,1).toUpperCase());
    }
  }  
  const initialStr = initialArr.join("");
  return initialStr;
}
</code></pre>
              <p>
                If that weren't concise enough, the parameter parentheses are
                optional when there is only one parameter name. So the first
                line of the above could have been written as:
              </p>
              <pre
                class="JS code"
              ><code class="JS">const getInitials = inputName =&gt; {
</code></pre>
              <p>
                ...but a function with no parameters should be written with a
                pair of parentheses, i.e.:
              </p>
              <pre class="JS code"><code class="JS">const getDate = () =&gt; {
  var today = new Date();
  return today;
}
</code></pre>
              <p>
                One more thing: in an arrow function expression, "a single
                expression requires no brackets. The expression is also the
                implicit return value of the function." Therefore, in the
                following example...
              </p>
              <pre
                class="JS code"
              ><code class="JS">const square = x =&gt; x * x;</code></pre>
              <p>
                x * x, the sole expression, will also be returned. Keep in mind
                this does not work for the other function declaration methods.
              </p>
            </div>
          </li>

          <li id="general_JS_funcReturnAssignment">
            <div class="question">
              <p>Why does ESLint complain when I return an assignment?</p>
            </div>

            <div class="answer">
              <p>
                "One of the interesting, and sometimes confusing, aspects of
                JavaScript is that assignment can happen at almost any point.
                Because of this, an errant equals sign can end up causing
                assignment when the true intent was to do a comparison. This is
                especially true when using a return statement. For example:"
              </p>
              <pre class="JS code"><code class="JS">function doSomething() {
    return foo = bar + 2;
}

<span class="comment">// for the record, if `bar` equalled 2, then this would return 4.
// foo = bar + 2 is an expression that evaluates/resolves to 4.
// That resolved expression is then returned.</span>
</code></pre>
              <p>
                "It is difficult to tell the intent of the return statement
                here. It’s possible that the function is meant to return the
                result of bar + 2, but then why is it assigning to foo? It’s
                also possible that the intent was to use a comparison operator
                such as == and that this code is an error."
              </p>

              <p>
                "Because of this ambiguity, it’s considered a best practice to
                not use assignment in return statements."
              </p>
            </div>
          </li>

          <li id="methprof_JS_map">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="JS"
                  >Array.prototype.<span class="method">map</span>()</code
                >
                method?
              </p>
            </div>

            <div class="answer">
              <p>
                "The
                <code class="JS"><span class="method">map</span>()</code> method
                creates a new array with the results of calling a provided
                function on every element in the calling array...[it] calls a
                provided callback function once for each element in an array, in
                order, and constructs a new array from the results." Can't be
                said any more concisely than that. See below for an example.
                Let's say we have an array and we want to double every member of
                the array:
              </p>

              <pre
                class="JS code"
              ><code class="JS">var numbers = [1, 5, 10, 15];
var doubles = numbers.<span class="method">map</span>(function(x) {
   return x * 2;
});

<span class="comment">// doubles is now [2, 10, 20, 30]
// numbers is still [1, 5, 10, 15]</span></code></pre>
              <p>
                Because the above function is an extremely simple one-line, one
                parameter function, it can be rewritten in a much more concise
                <a href="#general_JS_arrowSyntax">arrow syntax form</a>:
              </p>
              <pre
                class="JS code"
              ><code class="JS">var numbers = [1, 5, 10, 15];
var doubles = numbers.<span class="method">map</span>(x =&gt; x * 2);
</code></pre>
              <p>Note below the syntax of this method:</p>
              <pre
                class="JS code syntax"
              ><code class="JS">var new_array = arr.<span class="method">map</span>(function callback(currentValue, index, array) {
    <span class="comment">// Return element for new_array</span>
}[, thisArg])
</code></pre>
              <p>
                Note the three parameters taken by the callback function. That
                means
                <code class="JS"><span class="method">map</span>()</code> is
                passing those three values to whatever the callback function may
                be.
              </p>

              <p>
                So in the example above, we have defined x as the parameter that
                will be taking the <code class="JS">currentValue</code> of each
                array member passed by
                <code class="JS"><span class="method">map</span>()</code>. Since
                the callback only has that one paramater, then the index and
                array are irrelevant.
              </p>

              <p>
                In fact, the parameters are not necessary at all if you are
                using a predefined function, like any of the built-in Math
                methods:
              </p>

              <pre class="JS code"><code class="JS">var numbers = [1, 4, 9];
var roots = numbers.<span class="method">map</span>(Math.sqrt);

<span class="comment">// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]</span>
</code></pre>

              <p>
                Why not Math.sqrt(x)? Because Math.sqrt has already been defined
                - you know it accepts only one parameter, and you know that map
                will be passing it the current array value as that first
                parameter.
              </p>

              <p>
                It becomes a problem, however, if your callback function expects
                more than one argument, and the second parameter doesn't
                correspond to the index of an array.
                <a href="http://www.wirfs-brock.com/allen/posts/166"
                  >See this link</a
                >
                for an example of what happens when you use parseInt as a
                callback function with map.
              </p>
            </div>
          </li>

          <li id="methprof_JS_forEach" class="">
            <div class="question">
              <p>
                What is the purpose of the
                <code class="JS"
                  >Array.prototype.<span class="method">forEach</span>()</code
                >
                method?
              </p>
            </div>

            <div class="answer">
              <p>
                The
                <code class="JS"><span class="method">forEach</span>()</code>
                method has a simple job - it "executes [a] provided callback
                [function] once for each element present in the array in
                ascending order."
              </p>

              <p>
                In the below example, forEach is employed to log the value of
                each array element to the console.
              </p>

              <pre
                class="JS code"
              ><code class="JS"><span class = "comment">// define array and callback function</span>
            
var praise = ['LeBron','is','the','king'];
            
function logArrayElements(element, index) {
  console.log('a[' + index + '] = ' + element);
}

<span class = "comment">// execute forEach on array with callback</span>

praise.forEach(logArrayElements);

<span class = "comment">// logs:
// a[0] = LeBron
// a[1] = is
// a[2] = the
// a[3] = king</span>

</code></pre>

              <p>
                Remember, forEach "executes [a] provided callback [function]
                once <em>for each element present</em> in the array." If an
                array is defined with a position unfilled, such as in the below
                example...
              </p>
              <pre
                class="JS code"
              ><code class="JS">var praise = ['LeBron','is', ,'king'];</code></pre>
              <p>...then the above forEach example would yield:</p>

              <pre
                class="JS code"
              ><code class="JS"><span class = "comment">// a[0] = LeBron
// a[1] = is
// a[3] = king</span>
</code></pre>
              <p>
                The length of the array is still 4, but as MDN says, forEach "is
                not invoked for index properties that have been deleted or are
                uninitialized."
              </p>
              <p>Note below the syntax of this method:</p>
              <pre
                class="JS code syntax"
              ><code class="JS">arr.<span class="method">forEach</span>(function callback(currentValue, index, array) {
    <span class="comment">// function body</span>
}[, thisArg])
</code></pre>
              <p>
                Note the three parameters taken by the callback function. That
                means
                <code class="JS"><span class="method">forEach</span>()</code> is
                passing those three values to whatever the callback function may
                be. A quick explanation of the three parameters:
              </p>
              <ol>
                <li>currentValue: the array element value, i.e. 'LeBron'</li>
                <li>index: the array element index, i.e. 0</li>
                <li>array: the array itself, i.e. praise</li>
              </ol>
              <p>
                Also note the extra parameter taken by forEach besides the
                callback function:
              </p>
              <ol>
                <li>
                  thisArg: "If a thisArg parameter is provided to forEach(), it
                  will be used as callback's this value. Otherwise, the value
                  undefined will be used as its this value."
                </li>
              </ol>
              <p>
                Another important note about this function: "unlike map() or
                reduce() [, forEach] always returns the value undefined and is
                not chainable. The typical use case is to execute
                <span class="toDo">side effects</span> at the end of a chain."
              </p>
              <p>
                Also: "There is no way to stop or break a forEach() loop other
                than by throwing an exception. If you need such behavior, the
                forEach() method is the wrong tool. Use a plain loop instead."
              </p>
            </div>
          </li>

          <li id="general_JS_reverseAString">
            <div class="question">
              <p>In JavaScript, what is the easiest way to reverse a string?</p>
            </div>

            <div class="answer">
              <p>
                There is no <code class="JS">reverse</code> method for strings,
                but there is for arrays (<code class="JS"
                  >Array.prototype.<span class="method">reverse</span>()</code
                >). Therefore the solution is split the string into an array,
                reverse that array, then join the array members back into a
                string. Thanks to <span class="todo">method chaining</span>,
                this can all be done in one line:
              </p>
              <pre class="JS code"><code class="JS">var ms = 'mississippi';
var msFlip = ms.split('').reverse().join('');
</code></pre>
            </div>
          </li>

          <li id="general_JS_addingBooleans">
            <div class="question">
              <p>
                What does the following expression evaluate to in JavaScript?
              </p>
              <pre
                class="JS code"
              ><code class="JS"><code class = "JS"><span class = "value">true</span></code> + <code class = "JS"><span class = "value">true</span></code> + <code class = "JS"><span class = "value">false</span></code>
</code></pre>
              <ol type="A">
                <li>'truetruefalse'</li>
                <li>2</li>
              </ol>
            </div>

            <div class="answer">
              <p>
                The correct answer is B. This expression evaluates to 2 because
                Booleans are coerced into numbers when they are added together,
                even when no Number types are present in the expression.
              </p>
            </div>
          </li>

          <li id="general_JS_conditionalReturn">
            <div class="question">
              <p>
                How can a function conditionally return
                <code class="JS"><span class="value">true</span></code> or
                <code class="JS"><span class="value">false</span></code> without
                an
                <code class="JS"><span class="statement">if</span></code>
                statement or ternary operator in the body of the function?
              </p>
            </div>

            <div class="answer">
              <p>
                You can put the conditional expression directly in the return
                statement. If using a comparison operator, then the expression
                will evaluate to
                <code class="JS"><span class="value">true</span></code> or
                <code class="JS"><span class="value">false</span></code> before
                being returned. For instance, below is a function that returns
                true if a student will be admitted to a university, and false if
                they won't, purely based on a GPA of 3.75 or above.
              </p>
              <pre class="JS code"><code class="JS">function bigDecision(GPA) {
  return GPA &gt;= 3.75;
}</code></pre>
            </div>
          </li>

          <li id="general_JS_doubleNOT">
            <div class="question">
              <p>
                What is the purpose of the use of two NOT operators sequentially
                (!!)? Wouldn't that double negative return the same exact value?
              </p>
            </div>

            <div class="answer">
              <p>
                You are INCORRECT. The logical NOT only can return
                <code class="JS"><span class="value">true</span></code> or
                <code class="JS"><span class="value">false</span></code
                >, depending on the truthiness of the operand with which it is
                paired.
              </p>
              <p>
                In short, the double NOT, referred to by some as the
                'cast-to-bool' operator, is another way to convert any datatype
                into a Boolean value. The first ! does the heavy lifting by
                converting the operand to true or false (based on the rules of
                truthiness and falsiness), then negating it. The second ! simply
                inverts that. The following two expressions are functionally
                identical:
              </p>
              <pre class="JS code"><code class="JS">var myAge = 31;

var doIExistA = !!myAge;  <span class = "comment">// true, because 31 is truthy</span>
var doIExistB = Boolean(myAge);  <span class = "comment">// ditto</span></code></pre>
              <p>
                Here's another example: the following function takes three
                arguments and returns
                <code class="JS"><span class="value">true</span></code> if
                exactly one of the three are truthy (from the Fullstack Academy
                prep course):
              </p>
              <pre class="JS code"><code class="JS">function onlyOne(x, y, z) {
  return !!x + !!y + !!z === 1;
}</code></pre>
            </div>
          </li>

          <li id="methprof_JS_replace" class="toDo">
            <div class="question">
              <p>
                The String.prototype.replace() method exists
                [str.replace(regexp|substr, newSubstr|function)]. Get to this
                later.
              </p>
            </div>

            <div class="answer">
              <p>[Under construction]</p>
            </div>
          </li>

          <li id="methprof_JS_arraySort">
            <div class="question">
              <p>How does the Array.prototype.sort() method sort arrays?</p>
            </div>

            <div class="answer">
              <p>
                The .sort() method takes one optional argument, a callback
                function which we'll get to in a second. But if no argument is
                supplied, then "the array is sorted according to each
                character's Unicode code point value, according to the string
                conversion of each element."
              </p>
              <p>
                Emphasis on "string conversion...in a numeric sort, 9 comes
                before 80, but because numbers are converted to strings, "80"
                comes before "9" in Unicode order."
              </p>
              <pre class="JS code"><code class="JS">[20, 4, 8, 1].sort();
// returns [1, 20, 4, 8]
</code></pre>
              <p>
                Keep in mind that at its core, sort() is just comparing two
                elements at a time, and either switching their positions, or
                leaving them unchanged. It compares arr[0] and arr[1], switching
                their positions if necessary, moving along to arr[1] vs. arr[2],
                and so on.
              </p>
              <p>
                Therefore the ideal callback function will take (a,b) as
                arguments...but then what?
              </p>
              <p>
                This is where sort() gets interesting - it has specific
                expectations of its callback function, which we'll call
                compareFunction. Per MDN: "If compareFunction is supplied, the
                array elements are sorted according to the return value of the
                compare function. If a and b are two elements being compared,
                then:"
              </p>
              <ul>
                <li>
                  If compareFunction(a, b) is <strong>less than 0</strong>, sort
                  a to an index lower than b, i.e.
                  <strong>a comes first</strong>.
                </li>
                <li>
                  If compareFunction(a, b) is <strong>greater than 0</strong>,
                  sort b to an index lower than a, i.e.
                  <strong>b comes first</strong>.
                </li>
                <li>
                  If compareFunction(a, b) returns 0, leave a and b unchanged
                  with respect to each other, but sorted with respect to all
                  different elements.
                </li>
              </ul>
              <p>
                That means the compare/callback function could have the
                following form:
              </p>
              <pre
                class="JS code syntax"
              ><code class="JS">function compare(a, b) {
  if (a is less than b by some ordering criterion) {
    return something less than 0, say, -1;
  }
  if (a is greater than b by the ordering criterion) {
    return something less than 0, say, 1;
  }
  // a must be equal to b
  return 0;
}
</code></pre>
              <p>
                So how do we solve that issue from earlier where numbers are
                being treated as strings? Well, "the compare function can simply
                subtract b from a. The following function will sort the array
                ascending:"
              </p>
              <pre class="JS code"><code class="JS">function ascending(a, b) {
  return a - b;
}

var arr = [3.4, 1.2, 2.3, 4.5];

arr.sort(ascending);

<span class = "comment">// FIRST PASS - arr[0] (a) vs. arr[1] (b)
.sort()
  ascending(3.4, 1.2)
  3.4 - 1.2 = 2.2
  2.2 is greater than 0
result is greater than 0, switch arr[0] (a) and arr[1] (b) positions

arr now equals [1.2, 3.4, 2.3, 4.5]


// SECOND PASS - arr[1] (a) vs. arr[2] (b)
.sort()
  ascending(3.4, 2.3)
  3.4 - 2.3 = 1.1
  1.1 is greater than 0
result is greater than 0, switch arr[1] (a) and arr[2] (b) positions

arr now equals [1.2, 2.3, 3.4, 4.5]

// YOU SEE WHAT's UP</span>
</code></pre>
              <p>
                Note that Array.prototype.sort() sorts the array
                <em>in place!</em> That means that the array is mutated and
                permanently changed as a result. It does not return a new sorted
                array, like .map() returns a new transformed array.
              </p>
              <p>
                Note also that the (a, b) relationship doesn't just apply to
                adjacent elements - it applies to all elements where a's index
                is less than b's index, i.e. a comes before b in the original
                unsorted order.
              </p>
            </div>
          </li>

          <li id="methprof_JS_arrSplice" class="toDo">
            <div class="question">
              <p>
                The Array.prototype.splice() method exists. Get to this later.
              </p>
            </div>

            <div class="answer">
              <p>[Under construction]</p>
            </div>
          </li>

          <li id="methprof_JS_strMatch" class="toDo">
            <div class="question">
              <p>
                The String.prototype.match() method exists. "The match() method
                retrieves the matches when matching a string against a regular
                expression." More on this later.
              </p>
            </div>

            <div class="answer">
              <p>[Under construction]</p>
            </div>
          </li>

          <li id="opprof_JS_delete" class="toDo">
            <div class="question">
              <p>The <code>delete</code> operator exists. Get to this later.</p>
            </div>

            <div class="answer">
              <p>[Under construction]</p>
            </div>
          </li>

          <li id="jsHasNoDirectMemoryManagement">
            <div class="question">
              <p>
                JavaScript is a very high-level langauge with almost no direct
                memory management. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="grapheme_clusters">
            <div class="question toComplete">
              <p>
                What is a "grapheme cluster" and how does it relate to the
                problem of split().reverse().join() not working for words with
                accents?
              </p>
            </div>

            <div class="answer">
              <p>
                'résumé'.split('').reverse().join('');<br />
                '́emuśer'<br />

                The é is actually two Unicode characters combined into one:<br />

                It is important to recognize that what the user thinks of as a
                “character”—a basic unit of a writing system for a language—may
                not be just a single Unicode code point. Instead, that basic
                unit may be made up of multiple Unicode code points. To avoid
                ambiguity with the computer use of the term character, this is
                called a user-perceived character. For example, “G” +
                grave-accent is a user-perceived character: users think of it as
                a single character, yet is actually represented by two Unicode
                code points. These user-perceived characters are approximated by
                what is called a grapheme cluster, which can be determined
                programmatically.
                http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
              </p>
              <p>
                ...and the tool to handle this:
                https://github.com/mathiasbynens/esrever
              </p>
            </div>
          </li>

          <h4>JS and the Prototype Chain, Prototypical Inheritance</h4>
          <li id="synprof_JS_constructor">
            <div class="question">
              <p>What is a JS "constructor function"?</p>
            </div>

            <div class="answer">
              <p>
                A "constructor function" is not really a noun, it is a verb - it
                is the use of the new operator to make a function behave as a
                template for an object. It essentially the way you define
                classes in JavaScript. Let's take a previous example:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> s4110212313124 = {
    cls: 4110, 
    vendor: 21231, 
    style: 3124,
    author: "Jeff Gore"
}

s4110212313124.ipStyle = 
("0000" + s4110212313124.cls).substr(("0000" + s4110212313124.cls).length - 4) 
+ "-" 
+ ("000000" + s4110212313124.vendor).substr(("000000" + s4110212313124.vendor).length - 6) 
+ "-" 
+ ("0000000" + s4110212313124.style).substr(("0000000" + s4110212313124.style).length - 7);
</code></pre>
              <p>
                If you're working in retail, you would obviously be working with
                more than one individual style - you would be working with
                thousands. So you can see how tedious it would be to create
                every single style in this way.
              </p>
              <p>
                If you're going to create a whole bunch of objects with the same
                properties and methods, then you can define a constructor.
                Here's how a constructor would look for the above object. We are
                basically saying: "if you can supply the class, vendor, and
                style numbers, I can do the rest and create a legit IP style".
                The parameters are the building blocks of the object, and often
                will be assigned to properties of the exact same name:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> Style (cls,vendor,style) {
  <span class="statement">this</span>.cls = cls;
  <span class="statement">this</span>.vendor = vendor;
  <span class="statement">this</span>.style = style;
  <span class="statement">this</span>.author = "Jeff Gore";
  <span class="statement">this</span>.ipStyle = 
    ("0000" + this.cls).substr(("0000" + this.cls).length - 4) +
    "-" + 
    ("000000" + this.vendor).substr(("000000" + this.vendor).length - 6) + 
    "-" + 
    ("0000000" + this.style).substr(("0000000" + this.style).length - 7)
  ;
}</code></pre>
              <div class="sidenote">
                <p>
                  See what I did there in getting all the numbers to carry the
                  appropriate number of leading zeroes? Unfortunately there
                  isn't something as simple as Excel's =FORMAT(cell, "0000000").
                </p>
                <ol>
                  <li>
                    <p>
                      Concatenate the number of the digits in the field with the
                      data entered itself.
                    </p>
                    ("0000" + this.cls)<br />
                    "0000" + 4110 = "00004110"<br />
                  </li>
                  <li>
                    <p>
                      Then supply the length of the string minus the desired
                      number of digits to the substr() function.
                    </p>
                    "00004110".substr(("0000" + this.cls).length - 4)<br />
                    "00004110".substr("00004110".length - 4)<br />
                    "00004110".substr(8 - 4)<br />
                    "00004110".substr(4)
                    <br />
                  </li>
                </ol>
                <p>
                  If given only one argument, which is the starting position,
                  the substr() function will return the remainder of the string.
                </p>
              </div>
              <p>
                ...and here's how you could create new objects using that
                constructor. Let's assume the the components are in a 2D array
                called raw, in which each outer array element corresponds to a
                full style, and then each inner array contains three members
                corresponding to the class, vendor, and style number:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> raw =  [
    [4110, 92021, 5100],
    [4112, 9532, 85], 
    [4131, 44270, 675]
];

<span class="statement">var</span> styles = [];

<span class="statement">for</span> (var i = 0; i &lt; raw.length; i++) {
    styles[i] = <span class="statement">new</span> Style (raw[i][0], raw[i][1], raw[i][2]);
}
</code></pre>
              <p>Here's how it looks in the Google Developer Console:</p>
              <img src="_images/synprof_js_constructor.PNG" />
              <p>
                As you can see after we prompt the console for the value of the
                styles array, it gives us the result: 3 members, all of the
                Style class, based off the Object prototype. (Also note how the
                console will list the object's properties in alphabetical
                order.)
              </p>
              <p>A few things to note about using constructors:</p>
              <ul>
                <li>
                  The
                  <code class="JS"><span class="statement">new</span></code>
                  operator is critical; it is what creates a new instance of an
                  object. If omitted then Style would be treated like a regular
                  function, and because there is no return value in the
                  function, it would yield an array of 3 undefined members.
                </li>
                <li>
                  Also note that the object names are capitalized - this is a
                  standard convention which should be adhered to. This allows
                  you more easily identify classes.
                </li>
                <li>
                  Note that author: "Jeff Gore" is hard-coded into the
                  constructor.
                </li>
              </ul>
            </div>
          </li>

          <li id="general_JS_constructorMisleading">
            <div class="question">
              <p>Why could the term "constructor function" be misleading?</p>
            </div>

            <div class="answer">
              <p>
                Because "any function can be used as a constructor function.
                Constructors are just functions that happen to be called with
                the new operator in front of them; they are not special types of
                functions; they’re just regular functions that are, in essence,
                simply hijacked by the use of the new operator in their
                invocation....there’s no such thing as ‘constructor functions’,
                but rather construction <em>calls</em> of functions.”
              </p>
            </div>
          </li>

          <li id="general_JS_newOperator">
            <div class="question">
              <p>What does the new operator do, exactly?</p>
            </div>

            <div class="answer">
              <p>
                "The new operator essentially endows a function with the power
                to construct an object." Let's look a little deeper into what
                happens when we create a constructor function:
              </p>
              <pre
                class="JS code"
              ><code class="JS">function Person (first, last) {
    this.first = first;
    this.last = last;
}</code></pre>
              <p>
                Here's what happens when we use --new-- to instantiate the above
                function into an object, which is represented below with {}.
              </p>
              <pre
                class="JS code syntax"
              ><code class="JS">var jeff = new Person ('Jeff', 'Gore') {
    1. {}.__proto__ = Person.prototype;
    2. this = {};
    3. this.first = 'Jeff';
       this.last = 'Gore';
    4. return this;
}</code></pre>
              <p>Let's go through each of the numbered steps:</p>
              <ol>
                <li>
                  The empty object, also referred to an "instance" of the
                  constructor function, is created. The new object's internal
                  prototype ([[Prototype]]) is set to the Person function's
                  prototype property. The object's internal prototype is
                  private, the constructor function's prototype property is
                  public, and they are both one in the same in that they point
                  to the same object in memory. (Remember that only functions
                  have the --prototype-- property, ALL functions have the
                  prototype property, and that this property is itself an
                  object!)
                </li>
                <li>The --this-- keyword is bound to the new Person object.</li>
                <li>
                  Now that --this-- is bound, the code block within the
                  constructor is executed, assigning all properties attached to
                  --this-- to the newly created object.
                </li>
                <li>
                  The --this-- keyword is returned, which means the new object
                  is returned (unless the constructor function returns a
                  non-primitive value (i.e. unless it returns its own alternate
                  object). In this case, that non-primitive value will be
                  returned.).
                </li>
              </ol>
              <div class="sidenote">
                <p>
                  When using a function as a constructor with --new--, it's OK
                  to omit function parentheses if it has no parameters. For
                  instance:
                </p>
                <pre class="JS code"><code class="JS">function Person () {
  this.species = 'human';
};

var jeff = new Person;</code></pre>
              </div>
            </div>
          </li>

          <li id="general_JS_internalProto">
            <div class="question">
              <p>
                What is the difference between Javascript's prototypical
                inheritance and the class-based inheritance of languages like
                Java?
              </p>
            </div>

            <div class="answer">
              <p>
                In a class-based language, such as Java, there are classes
                (abstract) and instances (concrete).
              </p>
              <p>
                Prototype-based languages such as JavaScript, however, do not
                make this distinction: JavaScript simply has objects. One object
                is merely a template for another object's creation.
              </p>
              <p>
                "Objects inherit from other objects[, rather than classes]. You
                take an object that you’d like to reuse and then you create a
                second object that gets its functionality from the first one."
              </p>
            </div>
          </li>

          <li id="general_JS_prototype">
            <div class="question">
              <p>
                Whenever you create a function, it gets a `prototype` property.
                True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                This is only true if you use the function keyword; arrow
                functions cannot be used as constructors because they use the
                lexical `this`.
              </p>
            </div>
          </li>

          <li id="general_JS_internalProtoDetail">
            <div class="question">
              <p>Tell me more about the internal prototype of an object.</p>
            </div>

            <div class="answer">
              <p>
                All JavaScript objects have a private property that is a link to
                another object - this is what is called an object's "internal
                prototype", internal meaning private, which is why it is
                referred to as [[Prototype]]. This private property, however,
                can be accessed (both get and set) through the __proto__
                property.
              </p>

              <p>
                Each internal prototype object has an internal prototype object
                of its own until it reaches the last step in the chain,
                --null--. If you create an array, for instance, it's internal
                prototype is set to Array.prototype, and Array.prototype's OWN
                internal prototype is equal to Object.prototype, which is the
                grand daddy and has a null internal prototype.
              </p>
              <p>
                --null--, by definition, has no prototype, and acts as the final
                link in the chain.
              </p>
              <p>Here's an example of the prototype chain:</p>
              <pre
                class="JS code"
              ><code class="JS">var toppings = ['chik','pep'];
toppings.pop();

// remember that arrays are just objects. Let's take a
look at toppings in object notation:

{
0: 'chik',
1: 'pep',
length: 2,
__proto__: Array.prototype
}

// .pop() is not found on this object, so it looks at the 
// __proto__ property, which is itself an object.

// The object pointed to by toppings.__proto__ is
// the same object in memory as Array.prototype.
// Which makes sense. toppings is a type of array.

// .pop() is found on Array.prototype.
</code></pre>
              <p>
                Just restating what you saw above: "When a property or method is
                called on an object: first, the object checks itself for the
                property. If it isn't present, it looks at its internal
                prototype."
              </p>
              <p>This is the prototype chain for the above array toppings.</p>
              <pre class="JS code syntax"><code class="JS">Object
--Array
----toppings
</code></pre>
              <pre
                class="JS code"
              ><code class="JS">toppings.__proto__ === Array.prototype // true
Array.prototype.__proto__ === Object.prototype // true
</code></pre>
              <p>
                As you can see, this is the basis of inheritance in JavaScript.
              </p>
            </div>
          </li>

          <li id="general_JS_internalProtoAccess">
            <div class="question">
              <p>
                What is the preferred method of accessing/getting an object's
                internal prototype?
              </p>
            </div>

            <div class="answer">
              <p>That would be Object.getPrototypeOf:</p>
              <pre
                class="JS code"
              ><code class="JS">Object.getPrototypeOf(jeff) // returns the following:
                                    
{
    constructor: ƒ Baller(pts, rebs, asst)
    __proto__: Object
}
</code></pre>
              <p>
                As we can see, the variable jeff was created with the Baller
                constructor function. You could also use jeff.__proto__ -
                __proto__ was standardized in ES 2015.
              </p>
            </div>
          </li>

          <li id="general_JS_constructorNesting">
            <div class="question">
              <p>
                Can constructors be nested? In other words, when constructing
                one object, can I construct an object based off a more general
                template?
              </p>
            </div>

            <div class="answer">
              <p>
                YES! You can nest broader constructors inside of more specific
                constructors so that the specific one first calls the broad
                constructor to make the base object, then tacks on its pet
                properties.
              </p>
              <p>
                This is the closest we get to classical inheritance in
                Javascript...."‘Classical Inheritance’ in JavaScript refers to a
                host of methods by which programmers combine functions with the
                new operator in order to make object A’s functionality available
                to object B."
              </p>
              <p>Let's look at a specific example below:</p>
              <pre class="JS code"><code class="JS">function TwitterUser(name) {
    this.name = name;
    this.handle = "@" + this.name;
}

TwitterUser.prototype.tweet = function(message) {
    return message.slice(0,140);
}

function AdminUser(name) {
    TwitterUser.call(<span class = "hghlt">this</span>,name);
    this.admin = true;
}</code></pre>
              <p>
                Deeper into <span class="hghlt">this</span>.
                <span class="hghlt">this</span> refers to an instance object of
                AdminUser. So when AdminUser is called, it first binds --this--
                to the new empty object, then TwitterUser is called with .call()
                rather than new, because we are not dealing with a new object -
                it is already created!
              </p>
              <p>
                The empty AdminUser object is immediately fed into
                CreateTwitterUser, which tacks on its base properties. The
                function completes and returns control to AdminUser. Because
                AdminUser is trained to look at --this--, then it just tacks on
                the admin property to --this--.
              </p>
              <p>We still have a problem, though:</p>
              <pre
                class="JS code"
              ><code class="JS">var jeff = new AdminUser('jeff');
jeff.tweet();
<span class = "error">Uncaught TypeError: jeff.tweet is not a function</span>
</code></pre>
              <p>
                Why is that? Well, just because we used a nested TwitterUser
                constructor to populate the interior of an instance object,
                doesn't mean that the object has any link to TwitterUser's
                prototype. In the above example, AdminUser.prototype.__proto__
                === Object.prototype. We need to break that link and replace it
                with a link to TwitterUser.prototype.
              </p>
            </div>
          </li>

          <li id="general_JS_objectDotCreate">
            <div class="question">
              <p>
                Explain Object.create() and how it can be used to create the
                links between objects required for prototypical inheritance.
              </p>
            </div>

            <div class="answer">
              <p>
                The solution to problem posed at the end of the answer to the
                previous question is not as obvious as it seems. We're not going
                to simply set one function's prototype equal to the other...
              </p>
              <pre
                class="JS invalid code"
              ><code class="JS">AdminUser.prototype = TwitterUser.prototype;
</code></pre>
              <p>
                ...because they need to be different in some ways - for
                instance, they both will have different --constructor--
                properties on that object, and AdminUser will need space for its
                own methods as well.
              </p>
              <p>
                How can we have both? How can we have both an active link to the
                TwitterUser.prototype object, so that AdminUser instances can
                have access, yet with the constructor of an AdminUser and the
                freedom for addition of new properties?
              </p>
              <p>
                <em
                  >The answer is: make AdminUser.prototype a brand new object
                  whose internal prototype (__proto__) is equal to
                  TwitterUser.prototype.</em
                >
                That way the object itself is a blank slate in which AdminUser
                can be expressed, while in the background it is linked to the
                TwitterUser object.
              </p>
              <p>
                There is a method designed expressly for this purpose -
                Object.create(), which "creates a new object with the specified
                prototype object." In other words, the new object will be empty,
                save for a __proto__ which is exactly equal to the prototype
                object passed as an argument to Object.create. This is how it
                differs from the new keyword in creating objects, because the
                new operator also executes the constructor function while
                Object.create() does not. Therefore, we would do:
              </p>
              <pre
                class="JS valid code"
              ><code class="JS">AdminUser.prototype = Object.create(TwitterUser.prototype);
                      
<span class = "comment">/*
AdminUser.prototype === 
  {
    __proto__: TwitterUser.prototype
  }
*/</span>
</code></pre>
              <p>
                Our AdminUser prototype is now an empty object whose internal
                prototype is now the same object in memory as
                TwitterUser.prototype.
              </p>
              <pre
                class="JS valid code"
              ><code class="JS">AdminUser.prototype = Object.create(TwitterUser.prototype);
                      
AdminUser.prototype.__proto__ === TwitterUser.prototype<span class = "comment"> // true</span>
</code></pre>
              <p>
                Now that the foundation of inheritance has been laid, we can add
                properties to AdminUser.prototype.
              </p>
              <p>
                We can start my restoring the constructor property. Because
                we've replaced the existing prototype object with a brand new
                one by using Object.create(), we've wiped out
                AdminUser.prototype's existing constructor property.
              </p>
              <p>
                What is customary when using Object.create (which should be the
                first step in defining an object's inheritance, all other steps
                build on this because Object.create wipes out everything before
                it) is to restore/re-add the constructor property. So here's the
                above edited to show you a more realisitic one-two punch:
              </p>
              <pre
                class="JS code"
              ><code class="JS">AdminUser.prototype = Object.create(TwitterUser.prototype);
<span class = "comment">// New object, clean slate, constructor needs to be re-added:</span>
AdminUser.prototype.constructor = AdminUser;

<span class = "comment">/*
AdminUser.prototype === 
  {
    __proto__: TwitterUser.prototype
    constructor: ƒ AdminUser(name)
  }
*/</span>
</code></pre>
              <p>
                Referencing the function itself makes sense, since that's what
                the constructor is - the function used to create the objects.
              </p>
              <span class="toDo"
                >The second, optional argument to Object.create() is an object
                that sets properties typically fed to
                Object.defineProperties().</span
              >
            </div>
          </li>
          <h4>JS and Scope, Closures, this</h4>
          <li id="synprof_variableScope">
            <div class="question">
              <p>What is variable "scope"?</p>
            </div>

            <div class="answer">
              <p>
                "In computer programming, the scope of a name binding – an
                association of a name to an entity, such as a variable – is the
                region of a computer program where the binding is valid: where
                the name can be used to refer to the entity."
              </p>
              <p>
                When it comes to JavaScript and variables, scope refers to the
                context in which that variable is valid. As already explained in
                the
                <a href="#synprof_JS_functions">question regarding functions</a
                >, a variable declared within a function is only valid within
                that function. If you tried to access it from outside the
                function, then it would come up as undefined - unless you have
                an identically named variable in the global scope, which is,
                outside of any function body. See below for an example of how
                two variables with the same exact name can coexist, because of
                scoping:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> cheese = "Muenster";

function getCheese() {
  var cheese = "Pepper Jack";
  console.log(cheese);
}	

getCheese();            <span class="comment">// The console logs "Pepper Jack".</span>  
console.log(cheese);    <span class="comment">// The console logs "Muenster".</span></code></pre>
              <p>
                Keep in mind that if you define a parameter to a function with
                the same name as a global variable, then references to that name
                will modify the value of the local parameter. For instance:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> score = 3;

function increment(score) {
<span class="comment">// Increments the score parameter local to this function, 
// not the score global variable:</span>
  score += 2;   
}

console.log(score); <span class="comment">// 3 </span>
increment(score);
console.log(score); <span class="comment">// still 3 </span></code></pre>
            </div>
          </li>
          <li id="general_fnScopeRun">
            <div class="question">
              <p>
                "Functions run in the scope in which they are defined, not the
                scope from which they are executed." True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>
          <li>
            <div class="question">
              <p>
                With regards to functions, what is the difference between
                lexical context and invocation context?
              </p>
            </div>

            <div class="answer">
              <ul>
                <li>
                  Lexical context refers to where a function is DECLARED. (see:
                  lexical scope)
                </li>
                <li>
                  Invocation context refers to where/how a function is CALLED.
                  (the value of "this" is wholly dependent on invocation
                  context)
                </li>
              </ul>
            </div>
          </li>

          <li>
            <div class="question">
              <p>
                Because the this keyword can be bound in multiple different
                ways, what is the priority order for this binding [keywords:
                this priority, this order]?
              </p>
            </div>

            <div class="answer">
              <p>Courtesy of Fullstack:</p>
              <p>
                "Four rules govern the value that the invocation context assigns
                to THIS. We’ve listed these rules in order of precedence (that
                is, new binding overrides explicit/hard binding which overrides
                implicit binding which overrides default binding). Keep in mind,
                though, that you’ll most frequently encounter 3 and 4, which are
                implicit and default binding, respectively. Here are 4 the
                rules:"
              </p>
              <ol>
                <li>
                  <u>NEW BINDING: Is the function called with new? </u>If so,
                  THIS is the newly constructed object.
                </li>
                <li>
                  <u
                    >EXPLICIT BINDING: Is the function called with call(),
                    apply() or bind()?</u
                  >
                  If so, THIS is the explicitly specified object. We use
                  explicit binding when we want to force a function call to use
                  a particular object for the THIS binding without putting a
                  property function reference on the object. NOTE: call(),
                  apply() and bind() are built-in JavaScript methods that
                  explicitly set the object to which THIS points.
                </li>
                <li>
                  <u
                    >IMPLICIT BINDING: Is the function called with a context,
                    otherwise known as an owning or containing object?</u
                  >
                  If so, THIS is that context object. With implicit binding,
                  most of the time, THIS is set by whatever object appears
                  before the dot (obj1 in this example).
                </li>
                <li>
                  <u>DEFAULT BINDING:</u> Otherwise, default the THIS (default
                  binding). If in strict mode, the default THIS is set to
                  undefined; if not in strict mode, the default THIS is set to
                  the global object.
                </li>
              </ol>
              <p>
                Below is a good example from MDN about the trickiness of
                --this--:
              </p>
              <pre class="JS code"><code class="JS">x = 9;
var module = {
  x: 81,
  getX: function() { return this.x; }
};

module.getX(); <span class = "comment">// 81</span>

var retrieveX = module.getX;
retrieveX();   
<span class = "comment">// returns 9 because the function gets invoked at the global scope
<span class = "toDo">// would this be different if I used get: / a getter?</span></span>

<span class = "comment">// Create a new function with 'this' bound to module</span>
var boundGetX = retrieveX.bind(module);
boundGetX(); // 81</code></pre>
            </div>
          </li>

          <li id="methprof_JS_bind">
            <div class="question">
              <p>How does the JavaScript .bind() function work?</p>
            </div>

            <div class="answer">
              <p>
                Bind is a method of Function.prototype, meaning it is available
                on all functions. Its chief purpose is to make a copy of a
                function but with a specific --this-- binding.
              </p>
              <pre
                class="JS code"
              ><code class="JS">var jeff = {first: 'Jeff', last: 'Gore'};
var joe = {first: 'Joe', last: 'Trocino'};
                            
function greet (greeting = "Hello") {
    console.log(greeting + ' ' + this.first + ' ' + this.last + '!');
}

greet.bind(jeff); <span class = "comment">// Nothing happens because the returned copy of greet bound to jeff is not stored anywhere. Remember, .bind() does not mutate the original function! Instead, it returns a copy.</span>

var greetJeff = greet.bind(jeff);
var greetJoe = greet.bind(joe);

greet(); <span class = "comment">// Hello undefined undefined!</span>
greetJeff(); <span class = "comment">// Hello Jeff Gore!</span>
greetJoe(); <span class = "comment">// Hello Joe Trocino!</span>
</code></pre>
              <p class="toDo">
                Get deeper into this: "The bind() function creates a new bound
                function (BF). A BF is an exotic function object (a term from
                ECMAScript 2015) that wraps the original function object.
                Calling a BF generally results in the execution of its wrapped
                function."
              </p>
            </div>
          </li>

          <li id="methprof_JS_call">
            <div class="question">
              <p>How does the JavaScript .call() function work?</p>
            </div>

            <div class="answer">
              <p>
                "The call() method calls a function with a given this value and
                arguments provided individually."
              </p>

              <pre
                class="JS code syntax"
              ><code class="JS">function.call(thisArg, arg1, arg2, ...)</code></pre>
              <p>Take the following example:</p>
              <pre class="JS code"><code class="JS">function label(adjective) {
    return this.name +' is a ' + adjective + ' ' + this.occupation;
}

var jeff = {name:'jeff',occupation:'boytoy'};

label.call(jeff, 'needy'); 
<span class = "comment">// First argument jeff is for call to set the value of --this-- to the jeff object.
// Arguments that follow satisfy the arguments required by the label() function.

// RESULT: 'jeff is a needy boytoy'.</span>
</code></pre>

              <p>
                The following example illustrates the change in `this` context:
              </p>
              <pre
                class="JS code"
              ><code class="JS">const setter = function(mood) {
  this.mood = mood;
  console.log(this)
};

let jeff = new Person('Jeff', 'Gore')

setter('mad'); <span class = "comment">// global {...</span>
setter.call(jeff, 'mad'); <span class = "comment">// Person {...</span>
</code></pre>
              <p>So, when is this actually useful?</p>
              <ol>
                <li>
                  <p>
                    Enacting
                    <a href="general_JS_constructorNesting"
                      >inheritance in JavaScript</a
                    >:
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS">function AdminUser(name) {
    <span class = "comment">// this = {} = new AdminUser instance, assuming called with `new`</span> 
    TwitterUser.call(<span class = "hghlt">this</span>,name);
    <span class = "comment">// this = { ...all the properties of the TwitterUser constructor}</span> 
    this.admin = true;
}</code></pre>
                </li>
                <li>
                  <p>
                    <a href="#funcArgumentsKeyword"
                      >Using array methods on "array-like objects"</a
                    >
                    which are not actually arrays and therefore do not have
                    access to Array.prototype.[whatever method]:
                  </p>
                </li>
                <li>
                  <p>
                    When creating "private methods" which need to access
                    instance properties. Without call(), `this` referenced
                    within those functions would be undefined because they are
                    not technically object methods. Therefore if you wanted to
                    access object properties via a private method you would have
                    to use .call, like so:
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS">function Person(name, willingnessToShare) {
    this.name = name;
    this.willingnessToShare = willingnessToShare;
    this.hintAtSecretCrush = function() 
      <span class = "comment">// return spillSecretCrush() is a bad idea! See below:</span>
      return spillSecretCrush.call(this);
    }
    function spillSecretCrush() {
      const crushDescription = 'A large black man who is famous. His name is LeBron James.'
      <span class = "comment">// Without .call(), `this` is undefined, meaning the whole crush is spilled!</span>
      return crushDescription.slice(0, this.willingnessToShare);
    }
}</code></pre>
                  <div class="sidenote">
                    <p>
                      But then again, with ES6, you could make that private
                      method an arrow function; "an arrow function does not have
                      its own this; the this value of the enclosing execution
                      context is used."
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">function Person(name, willingnessToShare) {
    this.name = name;
    this.willingnessToShare = willingnessToShare;
    this.hintAtSecretCrush = function() {
      <span class = "comment">// We can safely call this without .call, knowing it's an arrow function.</span>
      return spillSecretCrush();
    }
    const spillSecretCrush = () =&gt; {
      const crushDescription = 'A large black man who is famous. His name is LeBron James.'
      return crushDescription.slice(0, this.willingnessToShare);
    }
}
}</code></pre>
                  </div>
                </li>
              </ol>
            </div>
          </li>

          <li id="methprof_JS_apply">
            <div class="question toComplete">
              <p>How does the JavaScript .apply() function work?</p>
            </div>

            <div class="answer">
              <p>
                Apply does the same exact thing that .call() does, with one
                exception - you pass .apply() the function arguments in an
                array, rather than one by one. Using .call() can be difficult
                with variadic functions, where you don't know how many
                parameters will be passed. For instance:
              </p>
              <pre class="JS code"><code class="JS">function hello() {
    var greetees = [];
    for (let i = 0; i &lt; arguments.length; i++) {
        greetees.push(arguments[i])
    }
    return `Welcome to ${this.name},` + greetees.join(', ');
}

const attendees = ['John','Brad','Rob','Bae'];
const venue = {name: 'The Meat Pit'}
</code></pre>
            </div>
          </li>
          <h4>JS and the DOM</h4>
          <li id="general_DOMdefinition">
            <div class="question">
              <p>What is "the DOM"?</p>
            </div>

            <div class="answer">
              <p>
                DOM stands for Document Object Model. It is "a structural
                representation of all elements in an HTML document, often used
                by browsers and scripts to traverse through the document's
                elements and retrieve content or apply behaviors." (Williamson)
              </p>
              <p>
                "The DOM provides a representation of the document as a
                structured group of nodes and objects that have properties and
                methods. Essentially, it connects web pages to scripts or
                programming languages." (MDN)
              </p>
              <p>
                "The DOM is an agreed upon set of terms that describes exactly
                how to interact with the pieces of a webpage." (S. Allardice)
              </p>
              <img
                src="_images/general_DOMdefinition.png"
                style="width: 400px"
              />
            </div>
          </li>

          <li id="general_DOM_Node">
            <div class="question">
              <p>Within the DOM, what is a "node"?</p>
            </div>

            <div class="answer">
              <p>
                From this
                <a href="http://stackoverflow.com/a/9979779"
                  >excellent explanation on Stack Overflow</a
                >:
              </p>
              <blockquote>
                <p>
                  A node is the generic name for any type of object in the DOM
                  hierarchy. A node could be one of the built-in DOM elements
                  such as document or document.body, it could be an HTML tag
                  specified in the HTML such as &lt;input&gt; or &lt;p&gt; or it
                  could be a text node that is created by the system to hold a
                  block of text inside another element. So, in a nutshell, a
                  node is any DOM object.
                </p>

                <p>
                  An element is one specific type of node as there are many
                  other types of nodes (text nodes, comment nodes, document
                  nodes, etc...).
                </p>

                <p>
                  The DOM consists of a hierarchy of nodes where each node can
                  have a parent, a list of child nodes and a nextSibling and
                  previousSibling. That structure forms a tree-like hierarchy.
                  The document node would have its list of child nodes (the head
                  node and the body node). The body node would have its list of
                  child nodes (the top level elements in your HTML page) and so
                  on.
                </p>
              </blockquote>
              <p>
                Each node has a type, specified by the
                <code class="DOM"><span class="property">nodeType</span></code>
                property. Below are the current node type constants (the gaps in
                integer values are due to constants that have been deprecated):
              </p>
              <table class="directcopy" id="nodeTypeConstantsTable">
                <thead>
                  <tr>
                    <th scope="col">Constant</th>
                    <th scope="col">Value</th>
                    <th scope="col">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code>Node.ELEMENT_NODE</code></td>
                    <td><code>1</code></td>
                    <td>
                      An
                      <a href="/en-US/docs/Web/API/Element"
                        ><code>Element</code></a
                      >
                      node such as
                      <a href="/en-US/docs/Web/HTML/Element/p"
                        ><code>&lt;p&gt;</code></a
                      >
                      or
                      <a href="/en-US/docs/Web/HTML/Element/div"
                        ><code>&lt;div&gt;</code></a
                      ><code>.</code>
                    </td>
                  </tr>
                  <tr>
                    <td><code>Node.TEXT_NODE</code></td>
                    <td><code>3</code></td>
                    <td>
                      The actual
                      <a href="/en-US/docs/Web/API/Text"><code>Text</code></a>
                      of
                      <a href="/en-US/docs/Web/API/Element"
                        ><code>Element</code></a
                      >
                      or <a href="/en-US/docs/Web/API/Attr"><code>Attr</code></a
                      >.
                    </td>
                  </tr>
                  <tr>
                    <td><code>Node.PROCESSING_INSTRUCTION_NODE</code></td>
                    <td><code>7</code></td>
                    <td>
                      A
                      <a href="/en-US/docs/Web/API/ProcessingInstruction"
                        ><code>ProcessingInstruction</code></a
                      >
                      of an XML document such as
                      <code>&lt;?xml-stylesheet ... ?&gt;</code> declaration.
                    </td>
                  </tr>
                  <tr>
                    <td><code>Node.COMMENT_NODE</code></td>
                    <td><code>8</code></td>
                    <td>
                      A
                      <a href="/en-US/docs/Web/API/Comment"
                        ><code>Comment</code></a
                      >
                      node.
                    </td>
                  </tr>
                  <tr>
                    <td><code>Node.DOCUMENT_NODE</code></td>
                    <td><code>9</code></td>
                    <td>
                      A
                      <a href="/en-US/docs/Web/API/Document"
                        ><code>Document</code></a
                      >
                      node.
                    </td>
                  </tr>
                  <tr>
                    <td><code>Node.DOCUMENT_TYPE_NODE</code></td>
                    <td><code>10</code></td>
                    <td>
                      A
                      <a href="/en-US/docs/Web/API/DocumentType"
                        ><code>DocumentType</code></a
                      >
                      node e.g. <code>&lt;!DOCTYPE html&gt;</code> for HTML5
                      documents.
                    </td>
                  </tr>
                  <tr>
                    <td><code>Node.DOCUMENT_FRAGMENT_NODE</code></td>
                    <td><code>11</code></td>
                    <td>
                      A
                      <a href="/en-US/docs/Web/API/DocumentFragment"
                        ><code>DocumentFragment</code></a
                      >
                      node.
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>
          <li id="general_JS_docAsPropOfWindow">
            <div class="question">
              <p>
                The
                <code class="JS"
                  ><span class="DOM interface">document</span></code
                >
                interface, when instantiated into a
                <code class="JS"><span class="DOM object">document</span></code>
                object on the web, is a property of the
                <code class="JS"><span class="DOM object">window</span></code>
                object. True or False?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_JS_getCurrentAddress">
            <div class="question">
              <p>
                How do you get the full URL of the currently open browsing
                context using JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the href property of the location property of the
                window object, or in other words, window.location.href.
              </p>
            </div>
          </li>

          <li id="methprof_JS_getElementByX">
            <div class="question">
              <p>
                How can you view page elements and their metadata using
                JavaScript to target them by their
                <code class="HTML"><span class="attribute">id</span></code> or
                <code class="HTML"><span class="attribute">class</span></code
                >?
              </p>
            </div>

            <div class="answer">
              <p>
                There are separate methods to "get" an element by its
                <code class="HTML"><span class="attribute">id</span></code
                >, and by its
                <code class="HTML"><span class="attribute">class</span></code
                >. You can also get an element by its tag name (i.e., grab all
                <code class="HTML"><span class="element2">h2</span></code
                >s in the document). These are all methods of the
                <code class="JS"
                  ><span class="DOM interface">document</span></code
                >
                interface.
              </p>

              <p>
                What does "get" mean, exactly? It is returning a an
                <code class="JS object">element</code> object (technically, a
                <em>reference</em> to an element object); and in the case of
                getting multiple elements, this is an array of such
                <code class="JS object">element</code> objects. The method names
                below are pretty self explanatory.
              </p>

              <ul>
                <li>
                  <code class="JS"
                    ><span class="method">getElementById</span>()</code
                  >
                </li>
                <li>
                  <code class="JS"
                    ><span class="method">getElementsByClassName</span>()</code
                  >
                </li>
                <li>
                  <code class="JS"
                    ><span class="method">getElementsByTagName</span>()</code
                  >
                </li>
              </ul>

              <p>
                Let's look at an example. The
                <code class="HTML"><span class="attribute">id</span></code> of
                the main header on this page is, naturally,
                <code class="HTML"><span class="value">mainheader</span></code
                >. Since this is a very simple element, we can easily explore
                some of the methods to get some metadata about this element.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// First let's "get" the element:</span>                   
<span class="statement">var</span> mainHeader = document.<span class="method">getElementById</span>("mainheader");
<span class="comment">// mainHeader is now an Element object, referencing the &lt;h1&gt; at the top of the page:</span>

console.log(mainHeader.<span class="DOM property">nodeType</span>); 
<span class="comment">// Console: 1 

    // Which means element. See <a href="#nodeTypeConstantsTable">this table</a> for all the node type codes. </span>

console.log(mainHeader.<span class="DOM property">innerHTML</span>);
<span class="comment">// Console: Jeff's Web Development Reference Page</span>
    <span class="comment nest">// This returns whatever is between the opening and closing tags of the given element object, i.e., raw HTML.</span>
console.log(mainHeader.<span class="DOM property">childNodes</span>);
<span class="comment">// Console: [text] </span>
    <span class="comment nest"> // Returns a NodeList object, which is a live collection* of the child nodes under the #mainheader &lt;h1&gt;. Because this is such a simple element it has only one child node, a text node.  Note that even line breaks within your code are counted as text nodes.<span class="comment nest">
// "Live collection" means that changes in the DOM are reflected in the collection. It is not a static snapshot of the child nodes of a parent node a certain point in time, but an always-accurate representation of the child nodes as they exist now.

// Also, note that the NodeList object is not technically an Array. "...[but] it is possible to iterate on it using forEach()." </span></span>
console.log(mainHeader.<span class="DOM property">childNodes</span>.<span class="property">length</span>);
<span class="comment">// Console: 1</span>
    <span class="comment nest"> // A count of the members of the array of child nodes under the #mainheader &lt;h1&gt;. </span>
</code></pre>
              <p>
                Note that an element like
                <code class="HTML"><span class="element2">h1</span></code> is a
                node in the DOM, and then the text it contains is actually a
                separate child node, because text nodes (type 3) are distinct
                from element nodes (type 1).
              </p>
            </div>
          </li>

          <li id="general_JS_querySelector">
            <div class="question">
              <p>
                How do you use JS to retrieve an element or elements based on a
                CSS selector?
              </p>
            </div>

            <div class="answer">
              <p>
                You can use one of the below methods of the document object:
              </p>
              <ul>
                <li>
                  <code class="JS"
                    ><span class="method">querySelector</span>()</code
                  >
                </li>
                <li>
                  <code class="JS"
                    ><span class="method">querySelectorAll</span>()</code
                  >
                </li>
              </ul>
              What is the difference between the two?
              <ul>
                <li>
                  <code class="JS"
                    ><span class="method">querySelector</span>("li")</code
                  >
                  would return the first li on the page. It returns the first
                  element that matches the selector.
                </li>
                <li>
                  <code class="JS"
                    ><span class="method">querySelectorAll</span>("li")</code
                  >
                  would return a HTMLCollection of all lis on the page. An
                  HTMLCollection is a live representation of its corresponding
                  elements.
                </li>
              </ul>
            </div>
          </li>

          <li id="methprof_JS_getAttribute">
            <div class="question">
              <p>
                How do you use JS to retrieve the value of an HTML element's
                attribute?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the
                <code class="JS"
                  ><span class="method">getAttribute</span>()</code
                >
                method of the
                <code class="DOM interface">element</code> interface. Note that
                this can only be applied to a single
                <code class="JS object">element</code> object at a time - this
                method would not work if the variable were an array of elements.
              </p>
              <p>
                For example, let's say we would like to get the
                <code class="HTML"><span class="attribute">id</span></code> of
                every
                <code class="HTML"><span class="element2">li</span></code> on
                the page which has an
                <code class="HTML"><span class="attribute">id</span></code
                >. The way this particular website is set up is that every
                question-answer exchange is held within an
                <code class="HTML"><span class="element2">li</span> </code>with
                an
                <code class="HTML"><span class="attribute">id</span></code>
                describing its purpose.
              </p>
              <p>
                We want this operation to return the list of
                <code class="HTML"><span class="attribute">id</span></code>
                values in a comma separated format. Here's how we would do it.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> allTheLis = document.getElementsByTagName("li");
<span class="statement">var</span> allTheLisNames = new Array();
<span class="statement">var</span> allTheLisCSV;
<span class="statement">var</span> validLiCounter = 0;

<span class="statement">for</span> (i = 0; i &lt; allTheLis.length; i++) {

    <span class="statement">if</span> (allTheLis[i].<span class="method">getAttribute</span>("id") !== null) {
    
        allTheLisNames[i] = allTheLis[i].<span class="method">getAttribute</span>("id");
        validLiCounter++;
        
        <span class="statement">if</span> (validLiCounter == 1) {
            allTheLisCSV = allTheLisNames[i];
        } <span class="statement">else</span> {
            allTheLisCSV += (", " + allTheLisNames[i]);
        }
        
    }
    
}

console.log(allTheLisCSV);
</code></pre>
              <p>
                Note that <code class="JS">validLiCounter</code> is explicitly
                set to <code class="JS"><span class="value">0</span></code
                >; this is not like VBA where a declared but uninitialized
                variable is implicitly equal to 0. If you were to not assign a
                value to <code class="JS">validLiCounter</code>, then its value
                is <code class="JS"><span class="value">undefined</span></code
                >.
              </p>
              <span class="toDo">
                <p>
                  Revisit: when you change
                  <code class="JS">if (validLiCounter == 1)</code> to
                  <code class="JS">if (i == 0)</code>, why does the procedure
                  malfunction as it does? (produces the list twice).
                </p>
              </span>
            </div>
          </li>

          <li id="methprof_JS_setAttribute">
            <div class="question">
              <p>
                How do you use JS to <em>change</em> the value of an HTML
                element's attribute?
              </p>
            </div>

            <div class="answer">
              <p>
                Let's say, in the example above, that you discover that there
                are a handful of
                <code class="HTML"><span class="element2">li</span></code>
                elements which have an
                <code class="HTML"><span class="attribute">id</span></code>
                value equal to an empty string. You want to change the value to
                the phrase "FIXTHIS", followed by a counter, so the final result
                would be, for the first such
                <code class="HTML"><span class="element2">li</span></code
                >, a new
                <code class="HTML"><span class="attribute">id</span></code> of
                <code class="HTML"><span class="value">FIXTHIS1</span></code
                >.
              </p>
              <p>
                In this case you would use the
                <code class="JS"
                  ><span class="method">setAttribute</span>()</code
                >
                method of the
                <code class="DOM interface">Element</code> interface. Below is
                the syntax.
              </p>
              <pre
                class="code syntax"
              ><code class="JS">Element.<span class="method">setAttribute</span>(name, value);</code></pre>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> allTheLis = document.getElementsByTagName("li");
<span class="statement">var</span> allTheLisNames = new Array();
<span class="statement">var</span> allTheLisCSV;
<span class="statement">var</span> blankLiCount = 0;

<span class="statement">for</span> (i = 0; i &lt; allTheLis.length; i++) {

    <span class="statement">if</span> (allTheLis[i].getAttribute("id") === "") {
        blankLiCount++;
        allTheLis[i].setAttribute("id", ("FIXTHIS" + blankLiCount));
    }
    
}

console.log(blankLiCount);
</code></pre>
            </div>
          </li>

          <li id="propprof_JS_innerHTML">
            <div class="question">
              <p>
                How do you use JS to change the HTML between an element's
                opening and closing tags?
              </p>
            </div>

            <div class="answer">
              <p>
                Earlier in this document there was an example of using the
                <code class="DOM"><span class="property">innerHTML</span></code>
                property of the
                <code class="DOM interface">Element</code> interface to see what
                value existed between the opening and closing tag of a given
                element.
              </p>
              <p>
                That property is not read-only - you can assign it to a new
                value, that being the new HTML between the opening and closing
                tags. For example:
                <code class="DOM"><span class="property">innerHTML</span></code>
                is used to populated the Last Updated date at the top of this
                page:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> refreshPageLastUpdated() {
    <span class="statement">var</span> pageLastUpdatedDate = document.lastModified;
    <span class="statement">var</span> pageLastUpdatedField = document.getElementById("pageLastModifiedDateTime");
    pageLastUpdatedField.<span class="property hghlt">innerHTML</span> = pageLastUpdatedDate;
} 

refreshPageLastUpdated();
</code></pre>
              <p>
                Keep in mind that if you want to create new elements, you should
                not use this method - instead see below.
              </p>
            </div>
          </li>

          <li id="methprof_JS_createElement,createTextNode,appendChild">
            <div class="question">
              <p>
                How do you use JS to add a new child element after the existing
                children within a parent element?
              </p>
            </div>

            <div class="answer">
              <p>
                Let's take for example a
                <code class="HTML"><span class="element2">ul</span></code> with
                the list of members of an improv troupe. You are adding new
                members as they sign up, so new members will be tacked onto the
                end of the list:
              </p>
              <pre
                class="HTML code"
                id="testTextContent"
              ><code class="HTML"><span class="element2">ul <span class="attribute">id</span> = <span class="value">"improvTroupe"</span></span>
    <code class="HTML"><span class="element2">li</span>Jimmy<span class="element2 closetag">li</span></code>
    <code class="HTML"><span class="element2">li</span>John<span class="element2 closetag">li</span></code>
    <code class="HTML"><span class="element2">li</span>Bertha<span class="element2 closetag">li</span></code>
    <code class="HTML"><span class="element2">li</span>Mike<span class="element2 closetag">li</span></code>
<span class="element2 closetag">ul</span></code></pre>
              <samp>
                <ul id="improvTroupe">
                  <li>Jimmy</li>
                  <li>John</li>
                  <li>Bertha</li>
                  <li id="exMikey">Mike</li>
                </ul>
              </samp>
              <p>
                Now a fifth person, Leslie, is joining the troupe. You would
                tack her onto the end of the list by...
              </p>
              <ol>
                <li>
                  Creating a variable to represent the
                  <code class="HTML"><span class="element2">ul</span></code>
                  which holds all the names
                </li>
                <li>
                  Then, using the
                  <code class="JS"
                    >document.<span class="method">createElement</span>()</code
                  >
                  method, creating a brand new
                  <code class="DOM node">Element</code> node to represent the
                  new <code class="HTML"><span class="element2">li</span></code
                  >. At this point it is empty i.e. contains no text.
                </li>
                <li>
                  Then, using the
                  <code class="JS"
                    >document.<span class="method">createTextNode</span>()</code
                  >
                  method, creating a brand new
                  <code class="DOM node">Text</code> node with the value of
                  "Leslie".
                </li>
                <li>
                  You "append" that new <code class="DOM node">Text</code> node
                  as a child of the new
                  <code class="HTML"><span class="element2">li</span></code
                  >, using the
                  <code class="JS"
                    >node.<span class="method">appendChild</span>()</code
                  >
                  method.
                </li>
                <li>
                  You "append" that
                  <code class="HTML"><span class="element2">li</span></code> to
                  the parent
                  <code class="HTML"><span class="element2">ul</span></code>
                  once again by using the
                  <code class="JS"
                    >node.<span class="method">appendChild</span>()</code
                  >
                  method.
                </li>
              </ol>
              <p>
                If you run this in the console, "Leslie" will be added to the
                above list.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> improvTroupe = document.<span class="method">getElementById</span>("improvTroupe");
<span class="statement">var</span> newMember = document.<span class="method">createElement</span>("li");
<span class="statement">var</span> newMemberName = document.<span class="method">createTextNode</span>("Leslie");

newMember.<span class="method">appendChild</span>(newMemberName);
improvTroupe.<span class="method">appendChild</span>(newMember);</code></pre>
            </div>
          </li>

          <li id="methprof_JS_insertBefore">
            <div class="question">
              <p>
                How do you use JS to add a new child element at a specific place
                within a parent element, i.e., before one of the existing
                children?
              </p>
            </div>

            <div class="answer">
              <p>
                In this case we would use the
                <code class="JS"
                  >node.<span class="method">insertBefore</span>()</code
                >
                method, which has the following syntax:
              </p>
              <pre
                class="code syntax"
              ><code class="JS">var insertedNode = parentNode.insertBefore(newNode, referenceNode);</code></pre>
              <p>
                referenceNode refers to the existing child node before which you
                would like to insert the new node. Let's say this time that we
                want to insert Dario Saric into the top five on an NBA roster,
                suggesting that he will be added to the starting squad.
                Therefore we want to add him before the fifth
                <code class="HTML"><span class="element2">li</span></code> of
                the below list, which will push Aaron Gordon to spot number 6
                and Dario would then occupy spot number 5.
              </p>
              <samp>
                <ol id="OrlandoMagicRoster">
                  <li>Bismack Biyombo</li>
                  <li>Evan Fournier</li>
                  <li>Elfrid Payton</li>
                  <li>Terrence Ross</li>
                  <li>Aaron Gordon</li>
                  <li>Mario Hezonja</li>
                  <li>Jeff Green</li>
                  <li>D.J. Augustin</li>
                  <li>C.J. Watson</li>
                  <li>Damjan Rudez</li>
                  <li>Nikola Vucevic</li>
                  <li>Stephen Zimmerman</li>
                </ol>
              </samp>
              Here's how we would do it:
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> magicRoster = document.<span class="method">getElementById</span>("OrlandoMagicRoster");
<span class="comment">// Equals the &lt;ul&gt; holding the players.</span>
                        
<span class="statement">var</span> newPlayer = document.<span class="method">createElement</span>("li");
<span class="comment">// Equals the &lt;li&gt; element node which will be the parent node to the text node that will hold Dario's name.</span>

<span class="statement">var</span> newPlayerName = document.<span class="method">createTextNode</span>("Dario Saric");
<span class="comment">// Equals the text node of Dario's name.</span>

<span class="statement">var</span> fifthSlot = magicRoster.<span class="method">getElementsByTagName</span>("li")[4];
<span class="comment">// Equals the fifth &lt;li&gt; element under the magicRoster &lt;ul&gt;.</span>

newPlayer.<span class="method">appendChild</span>(newPlayerName);
OrlandoMagicRoster.<span class="method">insertBefore</span>(newPlayer,fifthSlot);</code></pre>
              <p>
                Note how the
                <code class="JS"
                  >document.<span class="method">getElementsBy...</span></code
                >
                methods below can grab a single element just by specifiying an
                array position immediately afterwards. For instance
                <code class="JS"
                  >document.<span class="method">getElementsByClassName</span
                  >("question")[0]</code
                >
                returns the first element in the document with the class of
                question.
              </p>
            </div>
          </li>

          <li id="general_DOM_events">
            <div class="question">
              <p>
                How do events exist in the DOM structure? For example, when a
                user scrolls, how is this captured or represented in the DOM?
              </p>
            </div>

            <div class="answer">
              <p>
                In the DOM, "each event is represented by an object which is
                based on the
                <code class="DOM interface">Event</code> interface...<code
                  class="DOM interface"
                  >Event</code
                >
                itself contains the properties and methods which are common to
                all events."
              </p>
              <p>
                Scrolling is represented by the
                <code class="JS event">scroll</code> event, which inherits its
                properties/methods from the
                <code class="DOM interface">MouseEvent</code> interface, which
                in turn inherits from the
                <code class="DOM interface">UIEvent</code> interface, which in
                turn inherits from the
                <code class="DOM interface">Event</code> interface.
              </p>
              <p>
                Unlike methods or property names, which often use camelCase,
                event names are almost always fully lowercase.
                <a href="https://developer.mozilla.org/en-US/docs/Web/Events"
                  >This page has an exhaustive list of them.</a
                >
              </p>
            </div>
          </li>

          <li id="synprof_JS_eventhandling">
            <div class="question">
              <p>
                How do you write code in JavaScript that executes when an event
                occurs?
              </p>
            </div>

            <div class="answer">
              <p>
                There are three ways to write event handlers in JavaScript. We
                will use a simple example - when the below button is clicked, a
                pop-up window will state the obvious: "You have clicked the
                button."
              </p>
              <samp
                ><button id="captainObviousButton">
                  Click this button for a message from Captain Obvious
                </button></samp
              >
              <p>
                First, let's identify the fundamentals. What is the event? That
                would be <code class="JS event">click</code>. But we don't want
                to react to any click in the document - we want to react only
                when the button is click. Therefore we are only
                <code class="JS event">click</code> event when it relates to the
                <code class="HTML"><span class="element2">button</span></code>
                object.
              </p>
              <p>
                In the first two of these three examples, we will prefix the
                event name with the word <code class="JS event">on</code>, so
                <code class="JS event">click</code> becomes
                <code class="JS event">onclick</code>.
              </p>
              <ol>
                <li>
                  <p>
                    <strong
                      >Embed the event handler directly into the HTML.</strong
                    >
                    This is frowned upon for the same reason that inline CSS is
                    discouraged, but it is possible. Here's the code for the
                    above functionality using this technique:
                  </p>
                  <pre
                    class="HTML code"
                  ><code class="HTML"><span class="element2">button <span class="event">onclick</span> = <span class="value">"alert('You have clicked the button.');"</span></span>Click this button for a message from Captain Obvious<span class="element2 closetag">button</span></code></pre>
                </li>
                <li>
                  <p>
                    <strong
                      >Assign the "value" of the event to an anonymous
                      function.</strong
                    >
                    An anonymous function has no name, so it cannot be called
                    outside of the context of its assignment. Here's the syntax
                    for such an operation:
                  </p>
                  <pre
                    class="code syntax"
                  ><code class="JS">element.event = function() {
    /* do stuff */
}; </code></pre>
                  <p>
                    Note the semicolon after the function closing brace - we
                    need this because the anonymous function is part of an
                    assignment <em>statement</em>, and statements should end in
                    semicolons. Here's the actual code for this operation.
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS"><span class="statement">var</span> captainObviousButton = document.getElementById("captainObviousButton");

captainObviousButton.<span class="event">onclick</span> = function() {
    alert('You have clicked the button.');
};</code></pre>
                  <p>
                    Also, "note that each object can have
                    <em>only one</em> on-event handler for a given event." And
                    by object, we mean the actual object on the page, not a
                    variable. For instance, if you were to declare two separate
                    variables referring to the same object on the page, and
                    assign different
                    <code class="JS"><span class="event">onclick</span></code>
                    handlers to both, then that object on the page would only
                    have the one assigned to the second variable.
                  </p>
                </li>

                <li>
                  <p>
                    <strong
                      >Use the
                      <code class="JS"
                        >EventTarget.<span class="method">addEventListener</span
                        >()</code
                      >
                      method.</strong
                    >
                    "<code class="DOM interface">EventTarget</code> is an
                    interface implemented by objects that can receive events and
                    may have listeners for them." A 'listener' is technically
                    'the object which receives a notification (an object that
                    implements the Event interface) when an event of the
                    specified type occurs. This must be an object implementing
                    the EventListener interface,
                    <strong>or a JavaScript function.</strong>'
                  </p>
                  <p>
                    We're going to focus on the latter approach, designating a
                    callback function as the 'listener'. When the event fires on
                    that object (or on a descendant object bubbling up to it?),
                    the callback function will execute.
                    <strong
                      >Very important to note is that the callback function will
                      be passed an Event object as its first parameter.</strong
                    >
                    Often times you will see event handlers take a parameter
                    called "e"; this simply refers to the event that it is going
                    to be passed as a result of being invoked as an event
                    callback. <span class="toDo">Provide example.</span>
                  </p>
                  <p>
                    The chief advantage of this approach is that you can add
                    multiple handlers for the same event. Here's the syntax:
                  </p>
                  <pre
                    class="code syntax"
                  ><code class="JS">target.addEventListener(type, listener[, options]);
<b>target.addEventListener(type, listener[, useCapture]);</b></code></pre>

                  <p>
                    We've already defined the
                    <code class="JS">listener</code> parameter, but what is
                    'type'? That's the event type we wish to listen for. It
                    "could be any of the standard DOM events (click, mousedown,
                    touchstart, transitionEnd, etc.) or even your own custom
                    event name."
                  </p>
                  <p>
                    <span class="toDo"
                      >Finally, I won't get into [,options], since there are
                      several parameters within that umbrella</span
                    >...let's explore [,useCapture]. What is useCapture? That is
                    whether to use the "capture" version of the event activation
                    rather than the "bubble" version. "Events can be activated
                    at two occasions: At the beginning ("capture"), and at the
                    end ("bubble")." Therefore by setting this parameter to
                    false, we are saying "execute this after the event has
                    completed."
                    <a href="http://stackoverflow.com/a/7398447"
                      >This is an excellent example of capture vs. bubble</a
                    >.
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS"><span class="statement">var</span> captainObviousButton = document.getElementById("captainObviousButton");
                            
function stateTheObvious() {
    alert('You have clicked the button.');
}

captainObviousButton.<span class="method">addEventListener</span>('<span class="event">click</span>',stateTheObvious,false);</code></pre>
                  <p>
                    Note that you can use the
                    <code class="JS"
                      >EventTarget.<span class="method"
                        >removeEventListener</span
                      >()</code
                    >
                    method, using the same arguments to remove events previously
                    registered through the
                    <code class="JS"
                      ><span class="method">addEventListener</span>()</code
                    >
                    method. "But removeEventListener has one catch: You must
                    have a reference to the callback function that was
                    originally bound. Simply calling
                    element.removeEventListener(‘click’); will not
                    work....Essentially, if we have any interest in removing
                    event listeners (which we should in “long-lived”
                    applications), then we need to keep a handle on our
                    callbacks. This means we cannot use anonymous functions."
                  </p>
                </li>
              </ol>
            </div>
          </li>

          <li id="eventprof_JS_onload">
            <div class="question">
              <p>
                Why is the
                <code class="JS"
                  >GlobalEventHandlers.<span class="event">onload</span></code
                >
                property so useful?
              </p>
            </div>

            <div class="answer">
              <p>
                Using the
                <code class="JS"><span class="event">onload</span></code> event
                handler is useful if your
                <code class="HTML"><span class="element2">script</span></code>
                tag is for some reason in the
                <code class="HTML"><span class="element2">head</span></code> of
                the document, but requires elements in the
                <code class="HTML"><span class="element2">body</span></code> to
                be loaded first in order to work properly.
              </p>
              <p>
                This is done in conjunction with the
                <code class="JS object">window</code> object, so the syntax
                would be:
              </p>
              <pre
                class="code syntax"
              ><code class="JS">window.onload = function() {
    /* do stuff */
}; </code></pre>
              <p>
                Translation: "execute this anonymous function only after the
                window has fully loaded." What does load mean? "The
                <code class="JS"><span class="event">load</span></code> event
                fires at the end of the document loading process. At this point,
                all of the objects in the document are in the DOM, and all the
                images, scripts, links and sub-frames have finished loading."
              </p>
            </div>
          </li>

          <li id="eventprof_JS_focus,blur">
            <div class="question">
              <p>
                Describe the purpose of the
                <code class="JS"><span class="event">focus</span></code> and
                <code class="JS"><span class="event">blur</span></code> events.
              </p>
            </div>

            <div class="answer">
              <p>
                The <code class="JS"><span class="event">focus</span></code> and
                <code class="JS"><span class="event">blur</span></code> events
                mainly pertain to web forms, such as text entry boxes that can
                be clicked into i.e. "receive focus." Therefore
                <code class="JS"><span class="event">focus</span></code> is
                pretty self explanatory - "when an element has received focus."
              </p>

              <p>
                The
                <code class="JS"><span class="event">blur</span></code> event,
                on the other hand, "is fired when an element has lost focus."
                Therefore
                <code class="JS"><span class="event">blur</span></code> can only
                occur after
                <code class="JS"><span class="event">focus</span></code> has
                occurred.
              </p>
              <p>
                In the below example, clicking into the below text box will
                cause the background color of the text box's to turn dark blue.
                Clicking out of it will cause its background to turn purple.
              </p>
              <samp id="focusblurtestContainer"
                ><input id="focusblurtest"
              /></samp>
              <p>Here's the code:</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> container = document.getElementById("focusblurtestContainer");
<span class="statement">var</span> textbox = document.getElementById("focusblurtest");

function changeBGcolorBlue() {
    container.style = "background-color:#0046b7";
}

function changeBGcolorPurple() {
    container.style = "background-color:#7c0099";
}

textbox.addEventListener("focus", changeBGcolorBlue, false);
textbox.addEventListener("blur", changeBGcolorPurple, false);
</code></pre>
              <p>
                A more practical example also using forms involves
                auto-populating a form with a message to fill it in. The below
                input element has a default value of "your email." On
                <code class="JS"><span class="event">focus</span></code
                >, the text box clears, but if the user has clicked out of the
                box (<code class="JS"><span class="event">blur</span></code
                >) without filling anything in, then the template "your email"
                text repopulates.
              </p>
              <samp><input id="focusblurtest2" value="your email" /></samp>
              <pre
                class="JS code"
              ><code class="JS">var emailField = document.getElementById("focusblurtest2");

emailField.onfocus = function() {
    <span class=" statement">if</span> (emailField.value === "your email") {
        emailField.value = "";
    }
};

emailField.onblur = function() {
    <span class=" statement">if</span> (emailField.value === "") {
        emailField.value = "your email";
    }
};
</code></pre>
              <p>
                Note the use of the
                <code class="JS"><span class="property">value</span></code>
                property, which belongs to the
                <code class="DOM interface">HTMLInputElement</code> interface
                and applies to any type of
                <code class="HTML"><span class="element2">input</span></code>
                element that is not hidden.
              </p>
            </div>
          </li>

          <li id="methprof_JS_setTimeout,setInterval">
            <div class="question">
              <p>
                How can I write JavaScript that executes only after a certain
                amount of time has passed, or executes at regular intervals of
                time?
              </p>
            </div>

            <div class="answer">
              <p>
                There are two methods of the
                <code class="DOM mixin">WindowOrWorkerGlobalScope</code> mixin
                which accomplish these tasks respectively.
              </p>
              <ul class="defineCode">
                <li>
                  <code class="JS"
                    ><span class="method">setTimeout</span>()</code
                  >
                  - "sets a timer which executes a function or specified piece
                  of code once after the timer expires."
                </li>
                <li>
                  <code class="JS"
                    ><span class="method">setInterval</span>()</code
                  >
                  - "repeatedly calls a function or executes a code snippet,
                  with a fixed time delay between each call. "
                </li>
              </ul>
              <p>
                Each has a
                <code class="JS"><span class="method">clear...</span></code>
                counterpart that clears/deletes the timeout.
              </p>
              <pre
                class="code syntax"
              ><code class="JS">var timeoutID = scope.<span class="method">setTimeout</span>(function[, delay, param1, param2, ...]);
var intervalID = scope.<span class="method">setInterval</span>(function, delay[, param1, param2, ...]);

scope.<span class="method">clearTimeout</span>(timeoutID);
scope.<span class="method">clearInterval</span>(intervalID);
</code></pre>
              <p>
                In both functions, the delay parameter - i.e. the amount of time
                - is specified in milliseconds.
              </p>
              <p>
                As you can see, part of the purpose of assigning these timers to
                a variable is the capability to clear them later. Below is a
                snippet from a larger piece of code where the timer methods have
                been extracted.
              </p>
              <pre
                class="valid JS code"
              ><code class="JS"><span class="statement">var</span> introTimeout = window.<span class="method">setTimeout</span>(setSlideTimer,2500);
<span class="comment">// Execute the "setSlideTimer" function after 2.5 seconds have elapsed.</span>

<span class="statement">var</span> slideshowTimer = window.<span class="method">setInterval</span>(changeImage, 2000, animalImageCollection);
<span class="comment">// Execute the "changeImage" function every 2 seconds. This function requires an input parameter - it is expecting an array of image file paths - so animalImageCollection is supplied at the end.</span>
</code></pre>
              <p>
                For the second example involving the function with the
                parameter, you may wonder - why are the function an its
                parameter split up, with the timer in between? Why not:
              </p>
              <pre
                class="invalid JS code"
              ><code class="JS"><span class="statement">var</span> slideshowTimer = window.<span class="method">setInterval</span>(changeImage(animalImageCollection), 2000);</code></pre>
              <p>
                The reason is explained
                <a
                  href="https://stackoverflow.com/questions/15410384/javascript-setinterval-function-with-arguments"
                  >in this Stack Overflow thread</a
                >, with my function name replacing the one asked about: "Your
                code... calls <code class="JS">changeImage()</code> with an
                argument, takes the return value, tries to treat it as a
                function, and sets the interval for that return value. Unless
                <code class="JS">changeImage()</code> is a function which
                returns another function, this will fail, as you can only treat
                functions as functions. Numbers/strings/objects can't be
                typecast to a function."
              </p>
              <p>
                Using an anonymous function to call
                <code class="JS">changeImage(animalImageCollection)</code> would
                also have been a valid way to set the interval. Line breaks
                added for clarity:
              </p>
              <pre
                class="valid JS code"
              ><code class="JS">slideshowTimer = window.<span class="method">setInterval</span>(
    function() {
        changeImage(animalImageCollection)
    }
    ,2500
);
</code></pre>
              <p>
                Now that we've established the purpose of those two methods,
                let's look at the below game which was created by using both of
                these methods.
              </p>
              <p style="text-align: center; font-size: 2em">
                <a href="_pages/Examples/JSClickTheHyena.htm" target="_blank"
                  >FIND THE HYENA</a
                >
              </p>
              <p>
                The game sets a timeout of 2.5 seconds on the intro slide, then
                kicks off a slideshow which changes images every 2 seconds.
                Below is the code:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> slideshowImageFrame = document.getElementById("animalSlideshowIntroImage");
                        
<span class="statement">var</span> animalImageCollection = [
  "../../../_images/examples/animals/raccoon.jpg",
  "../../../_images/examples/animals/squirrel.jpg",
  "../../../_images/examples/animals/hyena.jpg",
  "../../../_images/examples/animals/tiger.jpg"
];

<span class="statement">var</span> imageIndex = 0;
<span class="statement">var</span> introTimeout;
<span class="statement">var</span> slideshowTimer;

function changeImage(imageArray) {
    slideshowImageFrame.setAttribute("src", imageArray[imageIndex]);
    imageIndex++;
    <span class=" statement">if</span> (imageIndex &gt;= imageArray.length) {
        imageIndex = 0;
    }
}

function setSlideTimer() {
    slideshowTimer = window.setInterval(changeImage,2000,animalImageCollection);
}

function setIntroSlideTimeout() {	
    introTimeout = window.setTimeout(setSlideTimer,2500);
}

slideshowImageFrame.onclick = function() {

    clearInterval(slideshowTimer);
    
    <span class=" statement">if</span> (slideshowImageFrame.getAttribute("src") === "../../../_images/examples/animals/hyena.jpg") {
        alert("That's correct! I LUBB U");
    } else {
        alert("Sorry, that's not a hyena, stupidy.");
        setSlideTimer();
    }
};

setIntroSlideTimeout();
</code></pre>
            </div>
          </li>

          <li id="propprof_JS_HTMLelement.style">
            <div class="question">
              <p>
                How do you get or set the inline style of an HTML element using
                JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                In the below example, the yellow box below will turn red if you
                click on it - its font also turns white and bold. When you click
                it again, it changes back:
              </p>
              <samp style="background-color: yellow" id="JSstyleexample"
                >I LOVE CHEESE</samp
              >
              <p>
                There are several different ways you could go about this. You
                could simply use the
                <code class="JS"
                  ><span class="method">setAttribute</span>();</code
                >
                method, which is discussed earlier.
              </p>
              <p>
                But you could also use the
                <code class="JS"><span class="property">style</span></code>
                property, which belongs to the
                <code class="DOM interface">HTMLElement</code> interface.
                Remember, this applies only to the <em>inline</em> style of the
                element.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> colorBox = document.getElementById("JSstyleexample");
    
colorBox.onclick = function() {
    <span class="comment">// Get the current value of the background-color inline styling. If it's yellow, then use the same style property to set new values.</span>
    <span class=" statement">if</span> (colorBox.style.backgroundColor == "yellow") { 
        colorBox.style.backgroundColor = "red";
        colorBox.style.color = "white";
        colorBox.style.fontWeight = "bold"; 
    } else {
        colorBox.style.backgroundColor = "yellow";
        colorBox.style.color = "black";
        colorBox.style.fontWeight = "normal";    
    }
};
    </code></pre>
              <p>
                Note that the values assigned to the style.color property are
                strings - even if they are CSS "keywords".
              </p>
              <p>
                You could also use the keyword this instead. Remember, "when a
                function is called as a method of an object, its this is set to
                the object the method is called on."
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> colorBox = document.getElementById("JSstyleexample");
      
colorBox.onclick = function() {
    <span class=" statement">if</span> (this.style.backgroundColor === "yellow") { 
        this.style.backgroundColor = "red";
        this.style.color = "white";
        this.style.fontWeight = "bold"; 
    } else {
        this.style.backgroundColor = "yellow";
        this.style.color = "black";
        this.style.fontWeight = "normal";    
    }
};
    </code></pre>

              <p>
                Note that JavaScript equivalent of a hyphenated CSS property is
                camelCase. For example, background-color becomes
                backgroundColor. This is so that JavaScript does not think you
                are trying to do any subtraction.
              </p>
              <p>
                Also note that if we were to use
                <code class="JS"><span class="property">style</span></code>
                alone, without the actual CSS property after it, then we would
                be either getting or setting to the string used in the HTML
                attribute, such as
                <code class="HTML"
                  ><span class="value"
                    >"background-color:yellow; color:black;
                    font-weight:normal"</span
                  ></code
                >
                - as you can see the final semicolon is unncessary.
              </p>
              <p>
                Because the
                <code class="JS"><span class="property">style</span></code>
                property only corresponds to the value of the style attribute of
                an element - i.e. an inline style - then you cannot use it to
                find out how a given element is styled by an external
                stylesheet. This is why
                <code class="JS"><span class="property">style</span></code> is
                used predominantly as a setter, not a getter.
              </p>
            </div>
          </li>

          <li id="getset_JS_elementClass">
            <div class="question">
              <p>
                How do you get and/or set the class of an element using
                JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                You have a couple options here. If you are thinking of getting
                or setting the entire string of class names you would see
                between quotes as an HTML attribute value, then you would use
                <code class="JS"><span class="property">className</span></code
                >. For instance, the below
                <code class="HTML"><span class="element2">pre</span></code
                >, which we've given an
                <code class="HTML"><span class="attribute">id</span></code> of
                <code class="HTML"
                  ><span class="value">classGetSetTest</span></code
                >, has three classes:
              </p>
              <pre
                class="JS code invalid"
                id="classGetSetTest"
              ><code class="JS"></code></pre>
              <ol class="defineCode">
                <li>
                  <code class="HTML"><span class="value">code</span></code
                  >: To signify that what is inside is code and is used as a
                  styling hook for the font.
                </li>
                <li>
                  <code class="HTML"><span class="value">JS</span></code
                  >: To signify that this is JavaScript code which is used as a
                  styling hook to make the background pink.
                </li>
                <li>
                  <code class="HTML"><span class="value">invalid</span></code
                  >: To signify that this JS code is invalid which is used as a
                  styling hook to make the border red.
                </li>
              </ol>
              <p>
                Let's see what happens when we use
                <code class="JS"><span class="property">className</span></code>
                to get the actual HTML class assignment string:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> test = document.getElementById("classGetSetTest").className
console.log(test);

<span class="comment">// Console:

invalid JS  code</span></code></pre>
              <p>
                As you can see the
                <code class="JS"><span class="property">className</span></code>
                property has returned the class attribute value exactly as it
                was written in the HTML, including the extra space between "JS"
                and "code". Therefore this property is not the best for getting
                individual classes of an element.
              </p>
              <p>
                That job is best left to the
                <code class="JS"><span class="property">classList</span></code>
                property, "which returns a live DOMTokenList collection of the
                class attributes of the element."
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> test = document.getElementById("classGetSetTest").classList

<span class=" statement">for</span> (i = 0; i &lt; test.length; i++) {
    console.log(test[i]);
}

<span class="comment">// Console:

invalid
JS
code</span></code></pre>
              <p>
                What's best about
                <code class="JS"><span class="property">classList</span></code>
                is the methods it has to add, remove, toggle (add if it isn't on
                the element, remove if it is on the element), and see if a given
                class exists within the string. See below for MDN's examples
                demonstrating these methods:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// div is an object reference to a &lt;div&gt; element with class="foo bar"</span>
div.classList.remove("foo");
div.classList.add("anotherclass");

<span class="comment">// if visible is set remove it, otherwise add it</span>
div.classList.toggle("visible");

<span class="comment">// add/remove visible, depending on test conditional, i less than 10</span>
div.classList.toggle("visible", i &lt; 10 );

<span class="comment">// pop-up window will say "true"</span>
alert(div.classList.contains("foo"));

<span class="comment">// add or remove multiple classes</span>
div.classList.add("foo", "bar");
div.classList.remove("foo", "bar");</code></pre>
            </div>
          </li>

          <li id="general_JS_minification">
            <div class="question">
              <p>
                What does the term "minification" mean and how is short-circuit
                logic applied in JS minification?
              </p>
            </div>

            <div class="answer">
              <p>
                Minification "is the process of removing all unnecessary
                characters from source code without changing its functionality."
                For instance, the below code, pre-minification...
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> emailField = document.getElementById("focusblurtest2");

// If field value equals "your email", then clear to allow entry.
emailField.onfocus = function() {
    <span class=" statement">if</span> (emailField.value === "your email") {
        emailField.value = "";
    }
};

// If field value is blank after user leaves field, then re-populate with "your email".
emailField.onblur = function() {
    <span class=" statement">if</span> (emailField.value === "") {
        emailField.value = "your email";
    }
};
</code></pre>
              <p>...would look like the below after minification:</p>
              <pre
                class="JS code"
              ><code class="JS">var a=document.getElementById("focusblurtest2");a.onfocus=function() {"your email"===a.value&amp;&amp;(a.value="")};a.onblur=function(){""===a.value&amp;&amp;(a.value="your email")};</code></pre>
              <p>Note what has happened:</p>
              <ol>
                <li>
                  <p>
                    All unnecessary white space has been removed*, including
                    line breaks. (*I re-added one space because the Interactive
                    Linter Brackets extension for some reason is going crazy
                    with errors otherwise.)
                  </p>
                </li>
                <li>
                  <p>All code comments have been removed.</p>
                </li>
                <li>
                  <p>
                    All variable names have been changed to the shortest name
                    possible, i.e. one character. In this case there is only one
                    variable, but if there were a second it would be named "b".
                  </p>
                </li>
                <li>
                  <p>
                    Last but certainly not least,
                    <strong>the code has actually been changed</strong>! The if
                    statements have been thrown out entirely. Let's re-add the
                    white spaces and convert the variable names back to get a
                    better look:
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS"><span class="statement">var</span> emailField = document.getElementById("focusblurtest2");
                            
emailField.onfocus = function() {
    "your email" === emailField.value &amp;&amp; (emailField.value="")
};

emailField.onblur = function() {
    "" === emailField.value &amp;&amp; (emailField.value="your email")
};</code></pre>
                  <p>
                    This trick is explained in detail in this document's
                    <a href="#synprof_JS_AndOr"
                      >description of the AND/OR logical operators</a
                    >.
                  </p>
                </li>
              </ol>
              <p>
                Although it may seem that the purpose of minification may be to
                scramble/obfuscate the code, the true purpose is to decrease
                file size. In the above example, the minification cut the
                uncompressed size of the code by nearly half.
              </p>
              <p>
                So, how do you do it? Obviously you're not going to do this
                manually. You can just Google "minifier" and plug in your text.
                Another good tool is the
                <a href="http://closure-compiler.appspot.com/home"
                  >Google Closure Compiler</a
                >
                service. The default setting is Simple, but that does not rename
                variables or change your code - in which case you would choose
                Advanced.
              </p>
            </div>
          </li>

          <li id="general_JS_DocumentNotDefined">
            <div class="question">
              <p>
                When I use JS code with the document object, such as
                document.getElementById, some linters will say "'document' not
                defined" or "undeclared 'document'". Why is that?
              </p>
            </div>

            <div class="answer">
              <p>
                Technically, the Document object is a DOM interface, not a
                JavaScript object, and JavaScript is not solely a
                browser-specific language. Therefore if the JS were being
                executed by some other program, then "document" would be a
                foreign term.
              </p>
              <p>
                The way to turn off these warnings in JSLint and other linters
                is to check the box which says something to the effect of
                "assume a browser".
              </p>
            </div>
          </li>
          <li id="event_onLowercase">
            <div class="question">
              <p>
                Keywords like onclick, onblur, onfocus are actually properties
                that return the respective event handler code on the current
                element. True or False?
              </p>
            </div>

            <div class="answer">
              <p>
                True. These on____ event handlers are properties of the
                GlobalEventHandlers <span class="toDo">mixin</span>. The events
                themselves are not prefixed with the word "on".
              </p>
            </div>
          </li>

          <li id="general_JSbrowserdetection">
            <div class="question">
              <p>
                Part of web development is making sure your site works on a
                variety of browsers. Why is it better, when writing JavaScript,
                to try and detect which features (i.e. 3D transforms,
                geolocation) the user's browser has, rather than trying to
                figure out what browser the user has (i.e. "browser sniffing")?
              </p>
            </div>

            <div class="answer">
              <p>
                Microsoft has a
                <a
                  href="https://msdn.microsoft.com/en-us/library/hh273397(v=vs.85).aspx"
                  >good explanation of this</a
                >. "As typically implemented, browser detection has several
                drawbacks, including but not limited to the following:
              </p>
              <ul>
                <li>
                  When a new browser is released or an existing browser is
                  updated, you must factor the new browser into your browser
                  detection code. Updated browsers may support standards and
                  features that were not supported when the browser detection
                  code was designed.
                </li>
                <li>
                  Conclusions about feature support may not be correct or
                  appropriate.
                </li>
                <li>
                  As new devices become available, they frequently include new
                  versions of browsers; consequently, browser detection code
                  must be reviewed and potentially modified to support the new
                  browsers. In some cases it becomes more complicated to create
                  customized implementations for each browser.
                </li>
                <li>
                  A browser detection technique may not accurately identify a
                  given browser. For example, many browsers support the ability
                  to modify the user-agent string."
                </li>
              </ul>
              <p>
                Even though you shouldn't use browser sniffing, here's what
                sample browser detection looks like in JS code:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">if</span> (navigator.userAgent.indexOf("Netscape")) {}
<span class="comment">// or</span>
<span class=" statement">if</span> (navigator.appName == "Microsoft Internet Explorer") {}</code></pre>
            </div>
          </li>

          <li id="general_JSfeaturedetection">
            <div class="question">
              <p>
                What is an easy way to detect whether the user's browser
                supports a given feature?
              </p>
            </div>

            <div class="answer">
              <p>
                You can simply use the feature in the condition of an if
                statement, by itself. If the feature exists, the condition will
                be true. For instance, if you wanted to check if the user's
                browser supported the activeElement property of the document
                object, you could do the following:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> activeElementSupport = (function () {
    <span class=" statement">if</span> (document.activeElement) {
        <span class=" statement">return</span> true;
    } else {
        <span class=" statement">return</span> false;
    }
})();</code></pre>
              <p>
                If the browser recognizes document.activeElement, then
                activeElementSupport will be true, otherwise it will be false.
                Note the wrapping of the function in parentheses, then the extra
                set of parentheses at the end. This means we are calling the
                function immediately after declaring it. If we did not do this,
                then activeElementSupport would hold the function itself but not
                the result of the function.
              </p>
            </div>
          </li>
          <li id="general_documentWrite">
            <div class="question">
              <p>
                What does the document.write() method do, and why is its use
                discouraged?
              </p>
            </div>

            <div class="answer">
              <p>
                The write method of the document object is designed to insert
                markup into the document. For example,
                document.write(&lt;h1&gt;HELLO THERE&lt;/h1&gt;); will create an
                &lt;h1&gt; with the value of "HELLO THERE" on the page.
              </p>
              <p>
                But there's one problem. When a document is loaded, it is also
                consered closed. In order to write to a document, it needs to be
                open. If you call document.write() after the page has loaded,
                then it implicitly calls document.open(), which clears the
                contents of the page.
              </p>
            </div>
          </li>

          <li id="general_JS_library">
            <div class="question">
              <p>What is a JavaScript "library"?</p>
            </div>

            <div class="answer">
              <p>
                In a sense a library is just a bunch of pre-written code that
                packages complex operations into objects and functions that are
                easier to use and understand. The most popular JS library is
                jQuery. You would incorporate a jQuery library into your code by
                referring to the latest jQuery release (<a
                  href="https://developers.google.com/speed/libraries/"
                  >Google Hosted Libraries</a
                >
                is great for this) in a script tag, then your own code.
              </p>
              <code class="block HTML">
                <span class="element2"
                  >script
                  <span class="attribute">src</span>
                  =
                  <span class="value"
                    >"//ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"</span
                  ></span
                ><span class="element2 closetag">script</span><br />
                <span class="element2"
                  >script
                  <span class="attribute">src</span>
                  =
                  <span class="value">"_scripts/JGWebReference.js"</span></span
                ><span class="element2 closetag">script</span>
              </code>
              <p>
                Obviously order matters here. If you were to invoke your own
                code before the jQuery code, then it would fail because you are
                referring to objects in your code that have not yet been loaded.
              </p>
              <p>
                Also, note that there is no protocol (http, https) listed in the
                URI for the jQuery file. This signals to the browser that it can
                use whichever protocol it likes.
              </p>
              <p>
                Google Hosted Libraries would be considered a "content delivery
                network or content distribution network (CDN)", which is a "is a
                globally distributed network of proxy servers deployed in
                multiple data centers. The goal of a CDN is to serve content to
                end-users with high availability and high performance."
              </p>
            </div>
          </li>

          <h4>jQuery</h4>

          <li id="synprof_JQ_JQuery$">
            <div class="question">
              <p>
                How do you create a reference to a specific page element in
                jQuery?
              </p>
            </div>

            <div class="answer">
              <p>
                One of the beautiful things about jQuery is the function also
                named jQuery. It is such a commonly used function that you can
                also just use the dollar sign ($) to refer to it.
              </p>

              <p>
                The jQuery function "returns a collection of matched elements
                either found in the DOM based on passed argument(s) or created
                by passing an HTML string." The argument can be a CSS selector
                of any kind. See below the code for creating an array of all
                divs on the page in both standard JavaScript and jQuery:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// Standard:</span>
<span class="statement">var</span> allDivs = document.getElementsByTagName("div");

<span class="comment">// jQuery:</span>
<span class="statement">var</span> allDivs = $("div");
</code></pre>
              <p>
                The advantage of using the jQuery/$ object is that it is not
                only shorter, but bundles the functionality of getElementById,
                getElementsByClassName, getElementsByTagName, and much more into
                one function. Below is an example of how to return an object
                based on its id in both standard JS and jQuery:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="comment">// Standard:</span>
<span class="statement">var</span> mainHeader = document.getElementById("mainHeader");

<span class="comment">// jQuery:</span>
<span class="statement">var</span> mainHeader = $("#mainHeader");
</code></pre>
            </div>
          </li>

          <li id="selprof_JQ_contains">
            <div class="question">
              <p>
                How can you use jQuery to find specific text within the page?
              </p>
            </div>

            <div class="answer">
              <p>
                You would do this using jQuery's :contains selector in
                conjunction with the jQuery/$ function. For instance, if you
                wanted to create an array of every paragraph that contained the
                word "kill", you could do the following:
              </p>

              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> scary = $("p:contains('kill')");
</code></pre>
              <p>
                Note, however, that this is case sensitive. This would not, for
                instance, return paragraphs which contained "Kill" and not
                "kill".
              </p>
            </div>
          </li>

          <li id="funcprof_JQ_hide">
            <div class="question">
              <p>
                How can you use jQuery to gradually fade an element off the
                page?
              </p>
            </div>

            <div class="answer">
              <p>
                It depends on the kind of fade you want. In either case, you can
                call the method with a parameter of the number of milliseconds
                that the fade-out should last.
              </p>
              <ul>
                <li>
                  If you want the fade to simultaneously decrease in size and
                  opacity, then use the .hide() method.
                </li>
                <li>
                  If you want the fade to strictly reduce the opacity, then use
                  the .fadeOut() method.
                </li>
              </ul>
              <p>
                See below examples. In both cases, when you click the picture of
                LeBron James, he gradually fades away, then once completely
                faded the image is essentially display:none and the content
                below moves up to occupy the space left behind.
              </p>
              <img src="_images/funcprof_JQ_hide.jpeg" id="lebronHide" />
              <p>Here's the code used to execute the above effect:</p>
              <pre
                class="JS code"
              ><code class="JS">$("#lebronHide").click(function() {
    $(this).hide(4000);
});
</code></pre>
              <img src="_images/funcprof_JQ_hide.jpeg" id="lebronFade" />
              <p>Here's the code used to execute the above effect:</p>
              <pre
                class="JS code"
              ><code class="JS">$("#lebronFade").click(function() {
    $(this).fadeOut(4000);
});
</code></pre>
              <p>Note that:</p>
              <ul>
                <li>
                  jQuery's 'click' method, which is a shorthand for
                  .on('click',...)d
                </li>
                <li>
                  the anonymous function which performs the event handling falls
                  within parentheses, rather than after an assignment (=)
                  operator
                </li>
              </ul>
            </div>
          </li>

          <h4>Other JS Libraries</h4>
          <li id="general_Modernizr">
            <div class="question">
              <p>What is Modernizr?</p>
            </div>

            <div class="answer">
              <p>
                "Modernizr is a is a JavaScript library which is designed to
                detect HTML5 and CSS3 features in various
                browsers."..."Modernizr offers tests for more than 250 features,
                then creates a JavaScript object (named "Modernizr") that
                contains the results of these tests as boolean properties."
              </p>
              <p>
                Nowadays, there is no standard Modernizr which contains all of
                those tests. Instead, you create a custom version with all of
                the "detects" (i.e. tests) you want. So let's say, for instance,
                we want to test the user's browser for support of the
                Geolocation API (which provides the users' location) as well as
                CSS Transforms 3D. After "building" and downloading this custom
                version of Modernizr on its website, we link to the script. Once
                we load the page, we can look at the Modernizr object:
              </p>
              <img src="_images/modernizrObject.PNG" />
              <p>
                ...But more realistically, we would be using it in a conditional
                statement like this:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class=" statement">if</span> (Modernizr.geolocation) {
    <span class="comment">// do the geolocation stuff</span>
} else {
    <span class="comment">// skip the geolocation stuff</span>
}</code></pre>
            </div>
          </li>

          <h4>Server-Side JS</h4>
          <li id="synprof_node">
            <div class="question toComplete">
              <p>What is Node, and why do we use it?</p>
            </div>

            <div class="answer">
              <p>
                "a machine process that executes JavaScript and provides
                filesystem / network APIs"...Node.js combined Google's V8
                JavaScript engine, an event loop, and a low-level I/O API."
              </p>
            </div>
          </li>

          <li id="synprof_express">
            <div class="question toComplete">
              <p>What is Express?</p>
            </div>

            <div class="answer">
              <p>
                "A server framework (which is in itself a "way to more easily
                handle HTTP requests and reponses") for Node.js.
              </p>
            </div>
          </li>

          <li id="synprof_middleware">
            <div class="question toComplete">
              <p>What is "middleware"?</p>
            </div>

            <div class="answer">
              <p>
                "Middleware are functions applied to a request object, one at a
                time in order, only passing control to the next middleware
                function in the chain when an explicit next call is made."
              </p>
            </div>
          </li>

          <li id="general_fullstackApplication">
            <div class="question toComplete">
              <p>
                Give a high-level view of how to construct a full-stack
                application using Node, Express, Sequelize, PostgreSQL. (UNDER
                CONSTRUCTION)
              </p>
            </div>

            <div class="answer">
              <ol>
                <li>
                  <p>
                    Create an app.js file. Your entire application will be run
                    through this one app.js file, because it will link to all
                    the necessary components. When all the connections are in
                    place, we will simply run <code>node app.js</code> from the
                    command line to start a node process based off the code in
                    the app.js file. This ongoing process will essentially
                    become our server, always on, listening for requests.
                  </p>
                </li>
                <li>
                  <p>First let's fill out app.js.</p>
                  <p>
                    Node has an http module which implements the http protocol.
                    You could do this:
                  </p>
                  <pre
                    class="invalid SSJS code"
                  ><code class="JS">const http = require('http');

const server = http.createServer((request, response) =&gt; {
  // do stuff
});</code></pre>
                  <p>But instead, we will implement a library called...</p>
                </li>
                <li>
                  <p>
                    Express, which is "an abstraction on top of HTTP", a wrapper
                    for the node http module. It is a node library for HTTP
                    request handling.
                  </p>
                  <pre
                    class="valid SSJS code"
                  ><code class="JS">const express = require('express');
const app = express();</code></pre>
                  <p>
                    From then on the app object will represent our application.
                  </p>
                </li>
                <li>
                  <p>
                    What must a web application do? It must respond to the basic
                    HTTP requests. In order to respond, it must be listening:
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">const server = app.listen(1337, function(){
  console.log('listening on port 1337');
});</code></pre>
                  <p>
                    Why 1337? Tradition, it's "leet", and usually available.
                  </p>
                </li>

                <li>
                  <p>
                    Now that the server is listening, it must be prepared to
                    deal with the core HTTP requests:
                  </p>
                  <ul>
                    <li>GET i.e. read, retrieve</li>
                    <li>POST i.e. do something</li>
                    <li>PUT i.e. update specific data</li>
                    <li>DELETE i.e. delete specific data</li>
                  </ul>
                  <p>
                    These methods are available on Express's app object, i.e.
                    app.get, app.post. In these methods you define the route,
                    then the callback function to be executed in the event that
                    a given route is entered. We also have app.use(), which
                    fires a given callback for ANY request of a given route.
                  </p>

                  <p>
                    But, in the spirit of SoC (spearation of concerns), we don't
                    want all of our routing functionality to be piled in with
                    the base application functionality. Let's create a new
                    folder called "routes", in the same directory as app.js. In
                    routes, we will create a new file called index.js. In this
                    file, we will have require express in order to create an
                    Express router.
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">////////// ROUTES/INDEX.js //////////
                    
const express = require('express');
const router = express.Router();

<span class = "comment">// all the routing code i.e. router.use, router.get
// we'll worry about this later</span>

module.exports = router;
</code></pre>
                  <p>
                    Now we have a new router than we can "mount" to our app. "A
                    Router instance is a complete middleware and routing system;
                    for this reason, it is often referred to as a 'mini-app'."
                  </p>
                  <p>
                    Then, back in our app.js file, we will require our new
                    router module by requiring the routes folder.
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">////////// APP.js //////////
                    
const router = require('./routes');
</code></pre>
                  <p>
                    The default behavior with require, when passed a folder
                    rather than a specific file, is to locate the index.js file
                    within the said folder, and import the object corresponding
                    to that file's module.exports.
                  </p>
                  <p class="sidenote">
                    Module.exports is always an object which starts as {}, you
                    can then either add properties to it with
                    module.exports.func or you can just overwrite it with your
                    own giant object i.e. module.exports = {func1: func1, func2:
                    func2, etc}
                  </p>
                  <p>
                    Now that we have access to our new router, we need to funnel
                    all incoming requests to it by using a catch-all .use()
                    function:
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">////////// APP.js //////////
                    
app.use('/', router);
</code></pre>
                </li>
                <li>
                  <p>
                    What about the database, you say? When you install Postgres
                    with the default settings, you will get the below:
                  </p>
                  <table>
                    <tbody class="propvalpair">
                      <tr>
                        <td>Host</td>
                        <td>localhost</td>
                      </tr>
                      <tr>
                        <td>Port</td>
                        <td>5432</td>
                      </tr>
                      <tr>
                        <td>User</td>
                        <td class="light">your system user name</td>
                      </tr>
                      <tr>
                        <td>Database</td>
                        <td class="light">same as user</td>
                      </tr>
                      <tr>
                        <td>Password</td>
                        <td class="light">none</td>
                      </tr>
                      <tr>
                        <td>Connection URL</td>
                        <td>postgresql://localhost</td>
                      </tr>
                    </tbody>
                  </table>
                  <p>This is our database server. This is important to note:</p>
                  <ul>
                    <li>
                      Our database server will listen on port 5432 for TCP
                      requests from our application (client).
                    </li>
                    <li>
                      Our application (server) will listen on port 1337 for HTTP
                      requests from folks on the Internet (clients).
                    </li>
                  </ul>
                  <p>
                    In case you have to start the Postgres DB server, this is
                    the format for doing so from the command line:
                  </p>
                  <pre
                    class="code syntax"
                  ><code>pg_ctl -D [data-directory] start</code></pre>
                  <p>
                    ...where [data-directory] is the Data Directory found in
                    Postgres preferences. Note that "pg_ctl is a utility to
                    initialize, start, stop, or control a PostgreSQL server."
                    Here's an example with the [data-directory] plugged in:
                  </p>
                  <pre
                    class="code CLI"
                  ><code>pg_ctl -D '/Users/jeffgore/Library/Application Support/Postgres/var-10' start</code></pre>
                  <p>
                    Similarly, you could use "stop" rather than "start" at the
                    end of that string to stop the server. Anyway, now that
                    Postgres is open and running, to get into the postgres menu
                    to start interacting with your databases, type:
                  </p>
                  <pre class="code CLI"><code>$ psql</code></pre>
                  <p>
                    That will open psql in the Terminal and place you at the
                    psql command line. Note that jeffgore=# does not correspond
                    to my user name, but the active database name!
                  </p>
                  <pre class="code CLI"><code>psql (10.3)
Type "help" for help.

jeffgore=#</code></pre>
                  <p>To get connection info, you can do this:</p>
                  <pre class="code CLI"><code>jeffgore=# \conninfo
You are connected to database "jeffgore" as user "jeffgore" via socket in "/tmp" at port "5432".</code></pre>
                  <p>
                    Note that the database I connected to is named after me.
                    That is the default behavior in Postgres and if you DROP
                    this database you are in for some pain! (But if you do, just
                    execute <code>createdb</code> from bash and it should
                    repopulate).
                  </p>
                  <p>
                    Let's create the database we want to access. Note that in
                    response to the command it just repeats what was execute:
                  </p>
                  <pre
                    class="code CLI"
                  ><code>jeffgore=# CREATE DATABASE gameScores;
CREATE DATABASE</code></pre>
                  <p>Now let's connect to it:</p>
                  <pre class="code CLI"><code>jeffgore=# \c gamescores
You are now connected to database "gamescores" as user "jeffgore".
gamescores=#</code></pre>
                  <p>That's enough database stuff for now.</p>
                </li>
                <li>
                  <p>
                    There's one problem. Node (and by extension, Express) does
                    not know how speak the
                    <span class="directory">postgres://</span> protocol. We need
                    some sort of translator so that node can talk to our
                    database.
                  </p>
                  <p>
                    First, let's create a new folder called "db", and within
                    that, let's create a new index.js file. In here, we will
                    require our savior, the translator, a module called pg.
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">////////// DB/INDEX.js //////////
                    
<span class = "comment">// setting up the node-postgres driver</span>
var pg = require('pg');
var postgresUrl = 'postgres://localhost/twitterdb';
var client = new pg.Client(postgresUrl);

<span class = "comment">// connecting to the `postgres` server</span>
client.connect();

<span class = "comment">// make the client available as a Node module</span>
module.exports = client;
</code></pre>
                  <p>
                    Since our router will be handling the queries, we will need
                    to require db from there.
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">////////// ROUTES/INDEX.js //////////
                    
const express = require('express');
const router = express.Router();
<span class = "hghlt">const client = require('../db');</span>

<span class = "comment">// all the routing code i.e. router.use, router.get
// we'll worry about this later</span>

module.exports = router;
</code></pre>
                </li>
                <li>
                  <p>
                    Now that we have both a router object to direct incoming
                    requests, and a client object with which to make queries,
                    the only thing we need now is some sort of rendering engine
                    to spit out HTML pages based on what the client requests.
                  </p>
                  <p>
                    Until we learn React...enter Nunjucks. Let's go to our
                    app.js page and do the following:
                  </p>
                  <pre
                    class="SSJS code"
                  ><code class="JS">////////// APP.js //////////
                    
var nunjucks = require('nunjucks');

<span class = "comment">// templating boilerplate setup</span>
app.engine('html', nunjucks.render); <span class = "comment">// how to render html templates</span>
app.set('view engine', 'html'); <span class = "comment">// what file extension do our templates have</span>
nunjucks.configure('views', { noCache: true }); <span class = "comment">// where to find the views, caching off</span>
</code></pre>
                  <p>
                    Yes, we are going to create a views folder with some html
                    templates in there. Here's an example of a template:
                  </p>
                </li>
              </ol>
            </div>
          </li>
          <li>
            <div class="question toDo">
              <p>What is a "Buffer" in Node (and in general)?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>
          <h4>Async JS</h4>

          <li id="general_JS_async">
            <div class="question">
              <p>What is asynchronous Javascript, and when is it necessary?</p>
            </div>

            <div class="answer">
              <p>
                Let's back up to programming in general. "Asynchrony, in
                computer programming, refers to the occurrence of events
                independent of the main program flow and ways to deal with such
                events. These may be 'outside events such as the arrival of
                signals, or actions instigated by a program that take place
                concurrently with program execution, without the program
                blocking to wait for results. Asynchronous input/output is an
                example of the latter cause of asynchrony, and lets programs
                issue commands to storage or network devices that service these
                requests while the processor continues executing the program."
              </p>
              <p>
                Think of a sports website, with a live-updating ticker of
                scores. When a score updates, it doesn't cause your page to lock
                up while the score is being fetched from the database, nor while
                it is being rendered on the page. This is async Javascript in
                action, particularly AJAX - a request to another server is
                treated as practically a separate program, executing
                independently, and which has to wait to return its results until
                the main program's call stack is clear.
              </p>

              <p>
                Though JavaScript technically is single threaded, and can only
                be executed one-line at a time, you can suspend lines that are
                asynchronous - these specific functions wait for some condition
                to be met, such as:
              </p>
              <ul>
                <li>A response was received from the server</li>
                <li>A file was successfully read from the filesystem</li>
                <li>A user initiated an event</li>
                <li>A timer expired</li>
              </ul>
              <p>
                What do all these things have in common? Well, you what you can
                say is:
                <em
                  >you don't know exactly how long each of these operations will
                  take</em
                >.
              </p>
              <ul>
                <li>
                  A server response could take 1 millisecond, or 10 seconds,
                  depending on the server, and in turn, the database it may be
                  reading from.
                </li>
                <li>
                  Getting the text of a file from your hard drive could vary
                  widely depending on the size of the file, or it could error
                  out.
                </li>
                <li>
                  You have no idea when a user is going to take a given action,
                  if ever.
                </li>
                <li>
                  Even timers (interval, timeout) are not guaranteed to go off
                  at your allotted time! See the event loop for more.
                </li>
              </ul>
              <p>
                Granted, some of these things aren't inherently asynchronous.
                Technically, you <em>could</em> make a synchronous server
                request. But why would you want to? That would be a poor user
                experience, say, if I hovered over a navbar and the fly-out menu
                appeared after two seconds because the site was busy waiting for
                a server request for an updated weather forecast to complete.
              </p>

              <p>
                So, how do you write asynchronous JavaScript code? Assuming the
                API you're using supports them, the two main methods are (1)
                callbacks and (2) promises.
              </p>

              <p>
                And, on the other hand, how is this system of several code
                universes managed? This is managed by your JavaScript runtime
                through something called "the event loop", which is explained in
                further detail in the next question.
              </p>
            </div>
          </li>

          <li id="general_JS_eventLoop">
            <div class="question toComplete">
              <p>What is the event loop?</p>
            </div>

            <div class="answer">
              <p>
                The event loop is a feature not of JavaScript, nor even a
                JavaScript engine, but of the JavaScript run-time environment.
              </p>
              <div class="sidenote">
                <p>
                  Wait, what's the difference between the engine and the runtime
                  environment? Well, an engine is usually employed by a runtime
                  to parse the code.
                </p>
                <blockquote>
                  <p>
                    Unlike C and other compiled languages, Javascript runs in a
                    container - a program that reads your js codes and runs
                    them. This program must do two things
                  </p>

                  <ul>
                    <li>parse your code and convert it to runnable commands</li>
                    <li>
                      provide some objects to javascript so that it can interact
                      with the outside world.
                    </li>
                  </ul>
                  <p>
                    The first part is called Engine and the second is Runtime.
                  </p>
                  <p>
                    For example, the Chrome Browser and node.js use the same
                    Engine - V8, but their Runtimes are different: in Chrome you
                    have the window, DOM objects etc, while node gives you
                    require, Buffers and processes.
                  </p>
                </blockquote>

                <p>
                  How does this relate to the event loop? "The JavaScript engine
                  has never done anything more than executing a single chunk of
                  your program at any given moment...[it's] just an on-demand
                  execution environment for any arbitrary JS code. It’s the
                  surrounding environment that schedules the events."
                </p>
              </div>
              <p>
                The two best examples of a JS runtime environment are a web
                browser, and Node.js. An event loop is a feature of both of
                these two runtimes. And you can't understand the event loop
                without the concept of a message queue, or callback queue.
              </p>
              <p>
                "A JavaScript runtime uses a message queue, which is a list of
                messages to be processed. Each message has an associated
                function which gets called in order to handle the message [i.e.,
                the callback]....The Event Loop has one simple job —  to monitor
                the Call Stack and the [Message] Queue. If the Call Stack is
                empty, it will take the first event from the queue and will push
                it to the Call Stack, which effectively runs it."
              </p>
              <p>Below is MDN's illustration of this system:</p>
              <img src="_images/general_JS_eventLoop.svg" />
              <p>
                How does this work? Your normal, synchronous code is comprised
                of a series of functions that may call each other, which adds
                frames to the call stack. In the process, you may set a timer,
                which designates code to be run later. This now puts this code
                in a whole different class - before it can be added to the
                stack, it has to wait in line. When the timer expires:
              </p>
              <ol>
                <li>
                  The runtime environment, such as the browser, adds the message
                  and its associated handler function to the queue.
                </li>
                <li>
                  The event loop, continually checking the state of both the
                  stack and queue at each "tick", looks at both.
                  <ol type="A">
                    <li>
                      If the call stack still has frames in it, that means that
                      synchronous code is still executing, so, we cannot add
                      anything from the queue to the stack yet. Ultimately, code
                      only gets executed when it is on the stack.
                    </li>
                    <li>
                      If the call stack is clear, however, the runtime handles
                      messages in the queue by removing the first one from the
                      queue, placing its on the callback function on the call
                      stack, and executing it.
                    </li>
                  </ol>
                </li>
              </ol>

              <p>
                "When your JavaScript program makes an AJAX request to fetch
                some data from the server, you set up the response code in a
                function (the callback), and the JS Engine tells the hosting
                environment [i.e. the runtime]: '...when you finish with that
                network request, and you have some data, please call this
                function back.'
              </p>

              <p>
                "The [runtime] is then set up to listen for the response from
                the network, and when the response arrives, it will schedule the
                callback function to be executed [by the engine] by inserting it
                into the [message queue]."
              </p>

              <p>
                According to Node documentation, "the event loop is what allows
                Node.js to perform non-blocking I/O operations — despite the
                fact that JavaScript is single-threaded — by offloading
                operations to the system kernel whenever possible...Since most
                modern kernels are multi-threaded, they can handle multiple
                operations executing in the background. When one of these
                operations completes, the kernel tells Node.js so that the
                appropriate callback may be added to the poll queue to
                eventually be executed."
              </p>

              <p>
                So, back to the timer example - when you use a setTimeout, with
                a time of 5 seconds, what you are really doing is setting the
                <em>minimum</em> amount of time before that function will
                execute. After 5 seconds, it will enter the queue, and then its
                execution time will depend on what is already in the call stack
                and the message queue.
              </p>
            </div>
          </li>

          <li id="general_JS_callback">
            <div class="question toComplete">
              <p>What is a callback function?</p>
            </div>

            <div class="answer">
              <p>
                Generally speaking, "a callback function is a function passed
                into another function as an argument, which is then invoked
                inside the outer function to complete some kind of routine or
                action."
              </p>

              <p>
                Under this definition, all higher-order functions in Javascript
                take callbacks; most pass arguments to the callbacks. For
                instance, in the example below, map is the higher order
                function, id represents the current array element being passed
                to the callback, and x => Number(x) is the callback:
              </p>

              <pre
                class="JS code"
              ><code class="JS">const numbers = ids.map(id => Number(id))</code></pre>

              <p>
                Callbacks are often used in the context of asynchronous
                JavaScript, because callbacks are one of the main methods of
                executing code asynchronously. Here's a standard Node.js
                error-first callback function:
              </p>

              <pre
                class="JS code"
              ><code class="JS">fs.readFile('/puppies.txt', (err, data) => {
    if (err) {
      throw err;
    } else {
      console.log(data);
    }         
})</code></pre>
              As mentioned in a previous answer, the name "callback" can be
              interpreted literally in asynchronous code - since you are
              starting an operation that may take some time (file read, network
              request), you provide a function to "call back" when the operation
              is complete.
            </div>
          </li>

          <li id="synprof_JS_promise">
            <div class="question toComplete">
              <p>What is a Promise in Javascript, and how are they used?</p>
            </div>

            <div class="answer">
              <p>
                "A Promise is an object representing the eventual completion or
                failure of an asynchronous operation....essentially, a promise
                is a returned object to which you attach callbacks, instead of
                passing callbacks into a function."
              </p>
              <p>
                Internally, a standard promise object looks like this - let's
                pretend these are the results of data fetching requests to the
                Star Wars API:
              </p>
              <pre class="JS code"><code class="JS">// If resolved,...
{
  __proto__: Promise
  [[PromiseStatus]]: "resolved"
  [[PromiseValue]]: [{name: 'Luke Skywalker', side: 'Rebels'}, {name: Obi...}]
}

// If rejected...
{
  __proto__: Promise
  [[PromiseStatus]]: "rejected"
  [[PromiseValue]]: {code: 12, name: 'SyntaxError', message: 'Failed ... '}
}

// If pending...
{
  __proto__: Promise
  [[PromiseStatus]]: "pending"
  [[PromiseValue]]: undefined
}
</code></pre>
              <p>
                But it's actually not as simple as at looks. First, how do we
                generate a promise? And, seeing how those properties are
                private, how do we actually access those values?
              </p>
              <p>
                The answer to the first question is a little strange, but, in
                essence, you must do you research and know whether the
                asynchronous API that you're hitting supports promises. In other
                words, you need to find out whether the return value of a given
                API request will be a promise. For instance, if you read about
                the Fetch API, you'll see that using fetch() returns a promise.
              </p>
              <pre
                class="JS code"
              ><code class="JS">const response = fetch('https://swapi.co/api/people/1')
         ^
  (this is a promise)
</code></pre>
              <p>
                Seems easy enough, but you run into your first problem. If you
                try to use "response" just as it is, you will get that pending
                promise value shown above. Why? Because the operation is
                asynchronous, yet the execution of JavaScript code is not.
                Therefore, we need a way to wait for a promise to be resolved or
                rejected. Setting a timeout is a bad idea, because we don't know
                how long it will take - we'd rather take an action as soon as
                the promise is resolved or rejected.
              </p>
              <p>
                Enter the .then() method. This method can be chained off of
                promises in order to handle their eventual resolution or
                rejection, and its arguments are callbacks to handle those two
                cases, respectively.
              </p>
              <pre
                class="JS code syntax"
              ><code class="JS">promiseObj.then(onFulfilled[, onRejected]);

promiseObj.then((value) => {
  // fulfillment
}, (reason) => {
  // rejection
});
</code></pre>
              <pre
                class="JS invalid code"
              ><code class="JS">const response = fetch('https://swapi.co/api/people/1').then(character => character, error => error)
</code></pre>
              <p>
                This code is well intentioned, but rub here is that although the
                .then() method will pass the returned value of the previous
                promise as an argument to your callback, but it will ultimately
                return another promise - so you're back in the same boat you
                were in before.
              </p>
              <p>
                So, how do you actually EXTRACT that gold nugget of a
                [[PromiseValue]] from the clutches of a promise? If you are
                using .then() syntax, you don't. Instead, you handle that data
                inside of the .then() fullfillment callback. Here would be an
                appropriate way to handle that response above:
              </p>
              <pre
                class="JS valid code"
              ><code class="JS">fetch('https://swapi.co/api/people/1')
  .then(character => {
    document.getElementById('character').innerHTML = character
  }, err => {
    console.log(err)
  })
</code></pre>
              <p>
                Note that I am no longer assigning the result of the fetch to a
                variable, because I don't need it - I am doing my work inside of
                the .then() callback. So, why does .then() return yet another
                promise? (Note, your callback can return whatever value it
                wants, but that will merely be the [[PromiseValue]] of the
                promise returned by .then(). If you return your own promise,
                however, that will be respected/unmodified)
              </p>
              <p>
                One compelling reason is promise <em>chaining</em>. There are
                cases where async operations depend on other async operations -
                for instance, what if we need to query Luke Skywalker in order
                to get his films, then query the same API again for those films,
                then query the same API to get more details on the studio that
                produced it? In callback-based functions, that would lead to the
                dreaded "pyramid of doom". This is a nesting of callback
                functions - the outer/first callback then initiates an another
                async action with its own callback, and that callback in turn
                initiates a third callback, and so on. (Note that this example
                below is actually impossible, since the Fetch API is
                promise-based and not callback based.)
              </p>
              <pre
                class="JS code"
              ><code class="JS">fetch('https://swapi.co/api/people/1', characterDetails => {
    const firstMovieId = characterDetails.films[0]
    fetch(`https://swapi.co/api/films/${firstMovieId}`, firstMovieDetails => {
      const directorId = firstMovieDetails.directorId
      fetch(`https://swapi.co/api/directors/${directorId}`, director => {
        document.getElementById('director').innerHTML = director.name
      })
    })
  })
</code></pre>
              <p>
                Instead, look how much nicer this looks in a promise chain. Note
                that it is crucial to return the async operations, because
                otherwise those results have nowhere to go, and .then() will
                simply return a promise with an undefined value.
              </p>
              <pre
                class="JS code"
              ><code class="JS">fetch('https://swapi.co/api/people/1')
  .then(characterDetails => {
    const firstMovieId = characterDetails.films[0]
    return fetch(`https://swapi.co/api/films/${firstMovieId}`)
  })
  .then(firstMovieDetails => {
    const directorId = firstMovieDetails.directorId
    return fetch(`https://swapi.co/api/directors/${directorId}`)
  })
  .then(director => {
    document.getElementById('director').innerHTML = director.name
  })
  .catch(err => {
    console.log(err)
  })
</code></pre>
              <p>
                The above is better, but still looks a little clunky. Can we do
                better? Thanks to async/await in ES2017, we can!
              </p>
              <pre
                class="JS code"
              ><code class="JS">async function getDirectorOfCharactersFirstMovie(characterId) {
  try {
    const characterDetails = await fetch('https://swapi.co/api/people/1')
    const firstMovieDetails = await fetch(`https://swapi.co/api/films/${characterDetails.films[0]}`)
    const directorDetails = await fetch(`https://swapi.co/api/directors/${firstMovieDetails.directorId}`)
    document.getElementById('director').innerHTML = director.name
  } catch (err) {
    console.log(err)
  }
}
</code></pre>
            </div>
          </li>

          <li id="objprof_JS_promise">
            <div class="question toDo">
              <p>
                Explain more deeply the workings of a promise, the executor
                function, etc.
              </p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <li id="objprof_JS_asyncAwait">
            <div class="question toComplete">
              <p>Explain how the `async`/`await` syntax works.</p>
            </div>

            <div class="answer">
              <p>The return value of an async function is a promise.</p>
              <p>
                A promise prepended with the 'await' operator EVALUATES TO a
                promise's value AFTER the promise has been resolved or rejected
              </p>
              <pre class="JS code"><code class="JS">let onOff = 1;

const test = new Promise((resolve, reject) => onOff === 1 ? resolve('on') : reject('off'))

const hello = async () => { 
  const result = await test; 
}

const superHello = async () => { 
  const heller = await hello(); 
  console.log('heller', heller) 
}</code></pre>
            </div>
          </li>

          <h4>React, Redux, and React/Redux</h4>
          <li id="react_whatIsIt">
            <div class="question">
              <p>What is React, and why do we use it?</p>
            </div>

            <div class="answer">
              <p>
                "React is a JavaScript library for building user interfaces."
              </p>
              <p>
                React is useful because you can build UI components that you can
                assemble into larger components to keep your code DRY and
                modular. Let's say you have a sign-up form, and a log-in form,
                that are essentially the same, save for the header.
              </p>
              <p>
                You could create a React component called
                <code>&lt;AuthForm&gt;</code> that captures the similiarities
                between the two, then have that
                <code>&lt;AuthForm&gt;</code> rendered by separate
                <code>&lt;Login&gt;</code> and
                <code>&lt;Signup&gt;</code> components.
              </p>
              <p>
                The UI, or "view layer", is most predictable when it is a pure
                function of the application state. That's what's great about
                React - when implemented properly, it is merely a functional
                output of application state.
              </p>
              <p>
                React can also work hand-in-hand with asynchronous Javascript so
                that the UI can update when new data is received without loading
                a new page.
              </p>
              <p>
                And really, enveloping all of this, is that React is declarative
                - you describe the view you'd like to see and React handles the
                dirty work of manipulating the actual DOM. You hand your
                blueprint (i.e. your React code) to
                <code>ReactDOM.render()</code> and it takes care of the rest.
              </p>
              <p>
                From the React blog: "In our experience, thinking about how the
                UI should look at any given moment rather than how to change it
                over time eliminates a whole class of bugs."
              </p>
            </div>
          </li>
          <li id="react_whyLibraryNotFramework">
            <div class="question toComplete">
              <p>Why is React considered a library, rather than a framework?</p>
            </div>

            <div class="answer">
              <p>
                This is the subject of some debate, but assuming that above
                statement is true, it's because of what this guy says:
              </p>
              <blockquote>
                <p>
                  A framework covers the edges, whereas a library is a tool to
                  fulfill certain tasks. React itself only handles one task:
                  abstracted Web Components. It provides an internal state,
                  lifecycles and external properties and with ReactDOM a
                  renderer for a browser or similar environment - and nothing
                  more.
                </p>

                <p>
                  This has a few advantages: it is smaller than a full-featured
                  framework, is less opinionated on how to solve problems and
                  therefore allows for more choice. Don't like react-router? Use
                  another one - or no router at all, if you don't need any. Need
                  a complex state management? Try redux. Need to handle
                  side-effects? you can choose between redux-thunks, redux-sagas
                  and redux-observables. Unit testing can be done with enzyme,
                  jest or mocha, sinon, chai, jasmine, karma, etc. There's no
                  one or best way to do it, so you can do whatever works best
                  for you.
                </p>
              </blockquote>
            </div>
          </li>
          <li id="general_programState">
            <div class="question">
              <p>What is application "state"?</p>
            </div>

            <div class="answer">
              <p>
                "In information technology and computer science, a program is
                described as stateful if it is designed to remember preceding
                events or user interactions; the remembered information is
                called the state of the system."
              </p>
              <p class="sidenote">
                "Imperative programming is a programming paradigm (way of
                designing a programming language) that describes computation in
                terms of the program state, and of the statements which change
                the program state. In declarative programming languages, the
                program describes the desired results and doesn't specify
                changes to the state directly."
              </p>
              <p>Here are some examples of state.</p>
              <ul>
                <li>Whether a user is logged in or not</li>
                <li>Whether an input option is currently selected</li>
                <li>
                  Whether the application is being viewed online or offline
                </li>
              </ul>
              <p>
                Here's another good example of state from Wikipedia: "An example
                of an everyday device that has a state is a television set. To
                change the channel of a TV, the user usually presses a "channel
                up" or "channel down" button on the remote control, which sends
                a coded message to the set. In order to calculate the new
                channel that the user desires, the digital tuner in the
                television must have stored in it the number of the current
                channel it is on. It then adds one or subtracts one from this
                number to get the number for the new channel, and adjusts the TV
                to receive that channel."
              </p>
              <p>
                With that said you may understand better why HTTP is described
                as a "stateless protocol." "Even though multiple requests can be
                sent over the same HTTP connection, the server does not attach
                any special meaning to their arriving over the same socket...As
                far as HTTP is concerned, they are all still separate requests
                and must contain enough information on their own to fulfill the
                request...Requests will not be associated with each other absent
                some shared info the server knows about, which in most cases is
                a session ID in a cookie."
              </p>
              <p>
                Let's return to state as it relates to web application
                development. Granted, the browser itself is a stateful
                application, and technically, you can get a lot of your
                program's state from the DOM itself. But this can get messy,
                digging into nested elements and properties, and not only that,
                you cannot define your own state by depending on the DOM.
                Therefore you can use Redux to manage your application state, in
                conjunction with React, in which components can have their own
                local state, selectively mirroring part of the application
                state.
              </p>
            </div>
          </li>

          <li id="react_stateVsProps">
            <div class="question">
              <p>
                What is the difference between state and props in React, what
                how does it relate to the two ways in which you can write React
                components?
              </p>
            </div>

            <div class="answer">
              <p>
                In a sense, all React components are functions that return
                something that ultimately becomes a view. There are two ways
                that it can re-render that view - a change to its state, or new
                props.
              </p>
              <p>
                Think of props as the inputs to this function, using a
                functional programming paradigm: "All React components must act
                like pure functions with respect to their props." That means
                that props should not be modified, and that given the same
                props, React components must return the same view.
              </p>
              <p>
                So, then, how do we make components dynamic and able to
                transform themselves in response to "user actions, network
                responses, [or] anything else"? You can do one of two things:
              </p>
              <ol>
                <li>
                  Continuously feed the component new props, either through a
                  parent component, or through react-redux, which maps selected
                  properties of the Redux state object to props passed to that
                  component.
                </li>
                <li>
                  Make the component itself stateful, i.e., give it "local
                  state", as well as methods to change that local state through
                  this.setState(). (Note that you should not modify state
                  directly, i.e. this.state = {...stuff}. The only time you can
                  assign to this.state is in the constructor)
                </li>
              </ol>
              <p>
                ...which brings us to a modification/caveat to the first
                sentence in this answer: "all React components are functions
                that return something that ultimately becomes a view." What's
                this "ultimately" about?
              </p>
              <p>
                Well, that's because if you have a stateful component, there's
                an extra step. Let's look at the two types of components, and
                the steps involved in rendering them.
              </p>
              <ol>
                <li>
                  <strong>Stateless Functional Components:</strong> A function
                  that simply calls React.createElement (technically
                  _react2.default.createElement...) i.e.
                  React.createElement(component, props, ...children)
                </li>
                <li>
                  <strong>Stateful Components</strong>: A class, which is
                  presumably invoked with the new operator to create an instance
                  of an object, which then calls its own prototypical render()
                  method, which then calls React.createElement in the manner
                  described above.
                </li>
              </ol>
              <p>
                Therefore, why might you use a stateless functional component
                (SFC) in place of a stateful component? (There are no
                performance benefits to doing so, with perhaps the very small
                note that a stateful component is less space efficient, due to
                instantiating an object which lives in memory).
              </p>
              <p>
                That is a good question, and some developers always write
                components as classes by default. You could argue that writing a
                component in a functional manner more clearly communicates the
                role of this component, perhaps as a pure output of its parent
                component.
              </p>
            </div>
          </li>

          <li id="react_bind">
            <div class="question">
              <p>
                Why, when declaring prototype methods in a stateful React
                component, do you have to remember to assign a local version
                that is bound (i.e. using .bind()) to the instance?
              </p>
            </div>

            <div class="answer">
              <p>
                You only have to remember to do this if expect these functions
                to be called not from another method in the class itself - this
                usually means this method will be called by an event handler,
                like so:
              </p>
              <p>
                Remember the rules attached to assigning a value to --this--:
                it's all about "invocation context." Often times, we set up
                instance methods to be executed in response to events, like so:
              </p>
              <pre
                class="JS code"
              ><code class="JS">class DeleteAccount extends React.Component {
  constructor() {
    this.handleDelete = this.handleDelete.bind(this);
  }
  
  handleDelete() {
    /* do delete stuff*/
  }
             
  render() {
    return (&lt;div&gt;
      &lt;p&gt;Are you sure?&lt;/p&gt;
      <span class="hghlt">&lt;DangerButton onClick={() => this.handleDelete()}&gt;</span>Yep&lt;/DangerButton&gt;
      &lt;Button color='blue'&gt;Cancel&lt;/Button&gt;
    &lt;/div&gt;)
  );
  }
}</code></pre>
              <p>
                Note what is calling this.handleDelete: an anonymous function.
                Just because handleDelete is a property on the DeleteAccount
                object doesn't necessarily mean it is being called BY an
                instance of the DeleteAccount object. Perhaps it'd be easier to
                think of it like this:
              </p>
              <pre
                class="JS code"
              ><code class="JS">&lt;DangerButton onClick={() => DangerButton.prototype.handleDelete()}&gt;</code></pre>
              <p>
                In this case, it is being called by an anonymous function in
                the, in which case --this-- is undefined. Therefore if anything
                inside of that handleDelete refers to --this--, you'll get an
                error.
              </p>
            </div>
          </li>

          <li id="react_virtualDOM">
            <div class="question">
              <p>What is a "virtual DOM"?</p>
            </div>

            <div class="answer">
              <p>
                Here's an excerpt from the official React website
                <a
                  href="https://reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom"
                  >(link)</a
                >:
              </p>
              <blockquote>
                <p>
                  The virtual DOM (VDOM) is a programming concept where an
                  ideal, or “virtual”, representation of a UI is kept in memory
                  and synced with the “real” DOM by a library such as ReactDOM.
                  This process is called reconciliation.
                </p>
                <p>
                  This approach enables the declarative API of React: You tell
                  React what state you want the UI to be in, and it makes sure
                  the DOM matches that state. This abstracts out the attribute
                  manipulation, event handling, and manual DOM updating that you
                  would otherwise have to use to build your app.
                </p>
                <p>
                  Since “virtual DOM” is more of a pattern than a specific
                  technology, people sometimes say it to mean different things.
                  In React world, the term “virtual DOM” is usually associated
                  with React elements since they are the objects representing
                  the user interface. React, however, also uses internal objects
                  called “fibers” to hold additional information about the
                  component tree. They may also be considered a part of “virtual
                  DOM” implementation in React.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="react_DOMmanipulation">
            <div class="question">
              <p>How does React manipulate the DOM?</p>
            </div>

            <div class="answer">
              <p>
                React manipulates the DOM through a process it calls "<a
                  href="https://reactjs.org/docs/reconciliation.html"
                  >reconcilation</a
                >". As a developer, nearly all of your React code (with the
                exception of <code>ReactDOM.render</code>) will affect React's
                implementation of the Virtual DOM, not the actual DOM. In
                essence:
              </p>
              <ol>
                <li>
                  A change in the application state causes a React component's
                  local state to change.
                </li>
                <li>
                  That local state change triggers a call of the component's
                  <code>render()</code> function so that the UI described by
                  that component re-renders.
                </li>
                <li>The virtual DOM changes as a result of that re-render.</li>
                <li>
                  Knowing a change in the virtual DOM occurred, React then
                  compares the virtual DOM to the real DOM recursively, starting
                  with the root element of the component whose state changed.
                </li>
                <ul>
                  <li>
                    If the root node is of a different element type than it was
                    previously, then the entire element tree is rebuilt.
                  </li>
                  <li>
                    If the root node is of the same element type as before,
                    React then compares their attributes and updates only the
                    changed attributes.
                  </li>
                </ul>
                <li>
                  Repeat #4 for each of the children of the root node. "By
                  default, when recursing on the children of a DOM node, React
                  just iterates over both lists of children [both lists meaning
                  previous VDOM and new VDOM] at the same time and generates a
                  mutation whenever there’s a difference."
                </li>
              </ol>
              <p>
                At its core, reconciliation addresses "this algorithmic problem
                of generating the minimum number of operations to transform one
                tree into another...When you use React, at a single point in
                time you can think of the <code>render()</code> function as
                creating a tree of React elements. On the next state or props
                update, that <code>render()</code> function will return a
                different tree of React elements. React then needs to figure out
                how to efficiently update the UI [i.e. the DOM] to match the
                most recent tree."
              </p>
              <p>
                React implements a heuristic O(n) algorithm based on two
                assumptions:
              </p>
              <ol>
                <li>
                  Two elements of different types will produce different trees.
                </li>
                <li>
                  The developer can hint at which child elements may be stable
                  across different renders with a key prop.
                </li>
              </ol>
            </div>
          </li>
          <li id="react_components">
            <div class="question">
              <p>What are React components?</p>
            </div>

            <div class="answer">
              <p>
                "Components let you split the UI into independent, reusable
                pieces, and think about each piece in isolation...Conceptually,
                components are like JavaScript functions. They accept arbitrary
                inputs (called “props”) and return React elements describing
                what should appear on the screen."
              </p>
              <p>
                Note that this single argument, props, should never be modified
                within the component. If a component needs to change, then
                either:
              </p>
              <ul>
                <li>It must receive new props, or</li>
                <li>
                  Its state must change, which means the component must be
                  stateful (i.e. available to be constructed as an instance of a
                  class, with `this` bound to that instance)
                </li>
              </ul>
              <p>
                "Whether you declare a component as a function or a class, it
                must never modify its own props....All React components must act
                like pure functions with respect to their props. Of course,
                application UIs are dynamic and change over time....[enter
                state]. State allows React components to change their output
                over time in response to user actions, network responses, and
                anything else, without violating this rule."
              </p>
            </div>
          </li>
          <li id="react_diffBetweenElementAndComponent">
            <div class="question">
              <p>
                What is the relationship between React components, instances,
                and elements? What are elements, actually?
              </p>
            </div>

            <div class="answer">
              <p>
                This line from
                <a
                  href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html"
                  >the official React blog</a
                >
                sums it up nicely: "We let React create, update, and destroy
                instances. We describe them with elements we return from the
                components, and React takes care of managing the instances."
              </p>
              <p>
                Whether we provide React with a plain div, or a React component;
                whether we write JSX or not, our code is ultimately transformed
                into React elements - "an element is a plain object describing a
                component instance or DOM node and its desired properties" - and
                these objects are what comprise the Virtual DOM. See, for
                example, the below code:
              </p>
              <pre
                class="JS code"
              ><code class="JS">const DeleteAccount = () => (
  &lt;div&gt;
    &lt;p&gt;Are you sure?&lt;/p&gt;
    &lt;DangerButton&gt;Yep&lt;/DangerButton&gt;
    &lt;Button color='blue'&gt;Cancel&lt;/Button&gt;
  &lt;/div&gt;
);</code></pre>
              <p>
                This functional component renders a mix of DOM elements and
                React components. In terms of React elements, this is how the
                "element tree" would look:
              </p>
              <pre
                class="JS code"
              ><code class="JS">const DeleteAccount = () => ({
  type: 'div',
  props: {
    children: [{
      type: 'p',
      props: {
        children: 'Are you sure?'
      }
    }, {
      type: DangerButton,
      props: {
        children: 'Yep'
      }
    }, {
      type: Button,
      props: {
        color: 'blue',
        children: 'Cancel'
      }
   }]
});</code></pre>
              <p>
                As you can see, the DOM elements are represented as strings,
                while the components are listed as functions. In order for the
                element tree to be valid and comparable to the actual DOM, these
                components (i.e. view-returning functions) need to be
                recursively unpacked until all that remains are plain DOM nodes.
                So, let's unpack DangerButton and Button:
              </p>
              <pre
                class="JS code"
              ><code class="JS">const DeleteAccount = () => ({
  type: 'div',
  props: {
    children: [{
      type: 'p',
      props: {
        children: 'Are you sure?'
      }
    }, {
      type: Button,
      props: {
        color: 'red',
        children: children
      }
    }, {
      type: 'button',
      props: {
        className: 'button button-blue',
        children: {
          type: 'b',
          props: {
            children: 'Cancel'
          }
        }
      }
    }
   ]
});</code></pre>
              <p>
                As it turns out, &lt;DangerButton&gt; is just a &lt;Button&gt;
                with a baked-in red color, so we'll have have to unpack one more
                time.
              </p>
              <pre
                class="JS code"
              ><code class="JS">const DeleteAccount = () => ({
  type: 'div',
  props: {
    children: [{
      type: 'p',
      props: {
        children: 'Are you sure?'
      }
    }, {
      type: 'button',
      props: {
        className: 'button button-red',
        children: {
          type: 'b',
          props: {
            children: 'Yep'
          }
        }
      }
    }, {
      type: 'button',
      props: {
        className: 'button button-blue',
        children: {
          type: 'b',
          props: {
            children: 'Cancel'
          }
        }
      }
    }
   ]
});</code></pre>
              <p>A word from React on this example:</p>
              <blockquote>
                <p>
                  This mix and matching helps keep components decoupled from
                  each other, as they can express both is-a and has-a
                  relationships exclusively through composition:
                </p>

                <ul>
                  <li>
                    Button is a DOM &lt;button&gt; with specific properties.
                  </li>
                  <li>DangerButton is a Button with specific properties.</li>
                  <li>
                    DeleteAccount contains a Button and a DangerButton inside a
                    &lt;div&gt;.
                  </li>
                </ul>
              </blockquote>
            </div>
          </li>
          <li id="react_compositionVsInheritance">
            <div class="question toComplete">
              <p>
                Why is composition favored over inheritance when constructing
                React components?
              </p>
            </div>

            <div class="answer">
              <p>
                They actually don't say why in this blog post; but they show
                what is possible with composition:
                <a
                  href="https://reactjs.org/docs/composition-vs-inheritance.html"
                  >https://reactjs.org/docs/composition-vs-inheritance.html</a
                >
              </p>
            </div>
          </li>

          <li id="redux_selectors">
            <div class="question toComplete">
              <p>What are Redux "selectors"?</p>
            </div>

            <div class="answer">
              <p>
                Redux selectors are functions that take the current Redux state
                and "select" a subset of data from that state and possible
                compute some derived data from that subselection. They "prepares
                the data to be displayed by the UI."
              </p>
              <p>
                Convention is that these functions can be found in the same file
                as the related reducer for that slice of state, and are named
                exports.
              </p>
              <p>
                What's the advantage of using selectors? "They let you decouple
                views and action creators from state shape." What does THAT
                mean? Well, typically, in a React-Redux application, you have
                mapStateToProps (which, really, is ITSELF a selector), that
                decides which pieces of state to pass to the connected component
                as props. Take the below, for example. This will pass a
                `selectedCharacter` prop:
              </p>
            </div>
          </li>

          <h4>
            Tooling: Babel / Webpack / TypeScript / Testing / Documentation
          </h4>
          <li id="general_babel">
            <div class="question">
              <p>What is Babel?</p>
            </div>

            <div class="answer">
              <p>
                Per Babel themselves: "Babel is a toolchain that is mainly used
                to convert ECMAScript 2015+ code into a backwards compatible
                version of JavaScript in current and older browsers or
                environments." Here's an example of that:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class = "comment">/* PRE-BABEL TRANSPILATION, i.e., what you actually write*/</span>
[1, 2, 3].map(n => n ** 2);

<span class = "comment">/* POST-BABEL TRANSPILATION, i.e. Babel's transformation of your code 
and what the actual JS read by the browser will be.*/</span>
[1, 2, 3].map(function (n) {
  return Math.pow(n, 2);
})
            </code></pre>
              <div class="sidenote">
                <p>
                  What is "transpilation"? That refers to the verb "transpile"
                  as opposed to "compile."
                </p>
                <p>
                  "A source-to-source compiler, transcompiler or transpiler is a
                  type of compiler that takes the source code of a program
                  written in one programming language as its input and produces
                  the equivalent source code in another programming language. A
                  source-to-source compiler translates between programming
                  languages that operate at approximately the same level of
                  abstraction, while a traditional compiler translates from a
                  higher level programming language to a lower level programming
                  language."
                </p>
                <p>
                  Now you see why Babel is regarded as a transpiler - it's
                  JavaScript in, JavaScript out.
                </p>
              </div>
              <p>
                As you can see, Babel converted two "new" syntactical
                constructions to older alternatives:
              </p>
              <ol>
                <li>
                  It changed the arrow function to a standard function
                  declaration. Arrow functions were introduced in the ECMAScript
                  6 (ES6) specification, which was finalized in June 2015.
                </li>
                <li>
                  It changed the expression using an exponentation operator to
                  an expression using Math.power. The exponentiation operator
                  was introduced in the ECMAScript 7 (ES7) specification, which
                  was finalized in June 2016.
                </li>
              </ol>
              <p>
                These are called code <em>transformations</em> and is what
                Babel, it at its core (literally, @babel/core), is meant to do.
              </p>

              <p>
                Why do we do this? Because not all browsers are created equal;
                or more accurately, not all browsers adopt new ES standards at
                the same time. And some users are using flat-out older browsers
                that are no longer supported. As devleopers we want our web
                applications to be as widely accessible as possible, yet we
                don't want to have to write old code. Babel lets us write code
                compliant with the newest ECMAScript standard, and then, out of
                our sight, it is transformed into something less sexy and
                cutting edge, yet more accessible, when shipped to the client.
              </p>
              <p>
                So, how do we go about utilizing Babel? Well that depends on our
                <em>environment</em>. Remember, dear Developer, that JavaScript
                does not only run in the browser! And also remember, that, in
                the real world, it is not so easy to instantly upgrade to the
                newest, hottest version of, say, Node, when an entire
                enterprise's massive server-side codebase is running on it. With
                that said:
              </p>
              <ul>
                <li>
                  <p>
                    <b>Browser, via Webpack</b>: Use `babel-loader` as a Webpack
                    `loader`, which will preprocess the JS files with
                    @babel/core before bundling them.
                  </p>
                </li>
                <li>
                  <p>
                    <b>Node</b>: Use @babel/register, which "will bind itself to
                    node's `require` and automatically compile files on the
                    fly." All you have to do is include this line at the top
                    level of your Node app:
                  </p>
                </li>
                <pre
                  class="JS code"
                ><code class="JS">require('@babel/register')</code></pre>
                <p>
                  ...and, assuming you've run `npm install` for that package,
                  every `require` statement starting with this file and going
                  recursively through the dependency tree (which is why you
                  should do it at the very root file) will first transpile the
                  code using your desired settings in Babel.
                </p>
              </ul>
              <p>
                And, with all that said, Babel will still do absolutely nothing
                if you don't configure it. It doesn't magically produce ES5 code
                - it simply compiles your code per a set of instructions, which
                makes it hugely versatile and flexible. Perhaps you have a very
                particular way that you want Babel to transform your code, i.e.,
                automatically add a specific comment to the top of every file.
                Per Babel docs:
              </p>
              <blockquote>
                <p>
                  Babel is a compiler (source code => output code). Like many
                  other compilers it runs in 3 stages: parsing, transforming,
                  and printing.
                </p>

                <p>
                  Now, out of the box Babel doesn't do anything. It basically
                  acts like const babel = code => code; by parsing the code and
                  then generating the same code back out again. You will need to
                  add plugins for Babel to do anything.
                </p>
                <p>
                  Instead of individual plugins, you can also enable a set of
                  plugins in a preset.
                </p>
              </blockquote>
              <p>
                The above recommendation, using a preset, is the way to go.
                Otherwise, you are enabling transformations individually, and
                there are a lot of them. Here's just the the ES2015 (i.e. ES6)
                set that's available:
              </p>
              <pre class="code syntax"><code class="JS">arrow-functions
block-scoped-functions
block-scoping
classes
computed-properties
destructuring
duplicate-keys
for-of
function-name
instanceof
literals
new-target
object-super
parameters
shorthand-properties
spread
sticky-regex
template-literals
typeof-symbol
unicode-regex</code></pre>
              <p>
                As of this writing, a popular preset is @babel/preset-env. This
                looks to your configuration, either `target` or a
                `.browserslistrc` file, to see which browsers you'd like to
                support. You make a list of browsers, or browser attributes, and
                Babel will compile to JavaScript syntax that works in all of
                those browsers, importing whichever transformations and
                polyfills are necessary to do so.
                <a href="#general_browserslistrc"
                  >See more on .browserslistrc here.</a
                >
              </p>
              <h3>Other Stuff Babel Can Do: Unreleased Stage X features</h3>
              <p>
                But wait, Babel can go even further than that. You can use TC39
                proposals that haven't even been standardized yet (translation:
                cool new JavaScript features that aren't even out yet)!
              </p>
              <p>
                Let's say I've got some code that would really benefit from the
                Object.fromEntries() function, which, as of this writing (Nov.
                2018), is currently in Stage 3. I can look up if there's a
                corresponding Babel plugin on NPM (and there is,
                babel-plugin-transform-object-from-entries). I add the plugin to
                my configuration, and voila, I can use it. This is the case
                where applying individual transformations is preferred to
                presets - in fact, Babel has discontinued the use of stage
                presets.
              </p>
              <h3>Other Stuff Babel Can Do: Polyfill</h3>
              <p>
                <a href="#general_polyfillShim"
                  >You're aware of what a polyfill is</a
                >. So you know why a polyfill would be considered "other stuff"
                - while @babel/core only concerns itself with code
                transformation (i.e. convert this arrow function into a regular
                function declaration or expression so that an old parser can
                understand), @babel/polyfill adds features to your runtime
                environment that may be missing.
              </p>
              <p>
                Let's say for example that we are using Node 7. That version of
                node did not have support for async/await. When you think about
                it, solving this problem means solving two problems:
              </p>
              <ol>
                <li>
                  Node 7 doesn't know what the word `async` means (nor what =>
                  means, if you're using that as well). Therefore @babel/core
                  will have to do a code transformation to make this look like a
                  regular function.
                </li>
                <li>
                  Node 7 also doesn't know how to conduct asynchronous
                  operations outside of a callback function. Therefore we'll
                  need to polyfill that functionality, that ability for a
                  custom-made function called in the main thread to run
                  asynchronously.
                </li>
              </ol>
              <p>
                Now, let's say we only do the first step, and neglect the second
                - we require(@babel/register), and now our ES6 code is compiling
                down to ES5 before running in Node, per our specifications. (The
                root-level file should be written in ES5 though, since it can't
                require itself.) At some point in this requiring it encounters
                the async function. During the transpilation it transforms this
                into a call of a `regeneratorRuntime` function instead - Babel
                <em>assumes</em> you have done the appropriate work to polyfill
                this functionality with `regeneratorRuntime`, but you haven't,
                so you get an error: "ReferenceError: regeneratorRuntime is not
                defined."
              </p>
              <p>
                Let's entertain another scenario: say you have Node 11 running,
                and you're using mocha to run tests. Let's say you really want
                to use `import` syntax in your test files, rather than node's
                `require`, meaning you have to get Babel involved - so you add a
                `@babel/register` require hook. You run the tests, some of which
                are async functions. You get the error: "regeneratorRuntime is
                not defined."
              </p>
              <p>
                Why? Because although Node 11 can certainly handle async
                functions, you enlisted Babel to compile your Node module
                `require`s, and somewhere in your Babel configuration (.babelrc,
                if you have it), you are transforming async functions into those
                `regeneratorRuntime` functions, then passing that newly compiled
                code off to Node for it to run. It is likely you are already
                using Babel for your front-end code geared towards accessibility
                by older browsers, and that same configuration is being used on
                the back end.
              </p>
            </div>
          </li>

          <li id="general_npm">
            <div class="question toDo">
              <p>What is NPM?</p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <li id="general_npmScopedPackages">
            <div class="question toComplete">
              <p>In NPM, what are "scoped packages" (Babel example)?</p>
            </div>

            <div class="answer">
              <p class="hghlt">STUFF TO FINISH</p>
              <pre class="code"><code class="JS">BABEL
---------

WHAT ELSE CAN BABEL DO >>>>>>>>>
-Source code transformations (codemods)


BABEL @ stuff >>>>>>
All the Babel modules you'll need are published as separate npm packages scoped under @babel (since version 7). This modular design allows for various tools each designed for a specific use case.

Version 6 to 7.
The most important change is finally switching all packages to scoped packages (the folder names in the monorepo are not changed but the name in its package.json is).

This means there will be no more issues with accidental/intentional name squatting, a clear separation from community plugins, and a simpler naming convention.

Your dependencies will need to be modified like so:

babel-cli -> @babel/cli. For us, we basically started by replacing babel- with @babel/.

From NPM: "Each npm user/organization has their own scope, and only you can add packages in your scope. This means you don't have to worry about someone taking your package name ahead of you. Thus it is also a good way to signal official packages for organizations."
            </code></pre>
            </div>
          </li>

          <li id="general_npx">
            <div class="question toComplete">
              <p>What is NPX?</p>
            </div>

            <div class="answer">
              <p>
                npx is an npm package runner. (remember that npm is a package
                MANAGER). It does several things, but basically makes it "easy
                to use CLI tools and other executables hosted on the registry."
              </p>

              <p>
                "For the past couple of years, the npm ecosystem has been moving
                more and more towards installing tools as project-local
                devDependencies, instead of requiring users to install them
                globally...the downside is that this gives you no
                fast/convenient way to invoke local binaries interactively." For
                instance, if jest is a dev-dependency, then you can't just take
                jest for a spin in the command line (i.e. jest test.js) because
                it's not globally installed. But if you globally install it,
                you're polluting your global namespace just for a test drive.
              </p>

              <p>
                Npx solves that. If you run `npx mocha test.js`, it will first
                look in your local node_modules/.bin (i.e., your binaries)
                folder, and if not found, it will install it, then execute it,
                without adding it to your globals. Npx's function in one line:
                "Executes &lt;command&gt; either from a local node_modules/.bin,
                or from a central cache, installing any packages needed in order
                for &lt;command&gt; to run."
              </p>
            </div>
          </li>

          <li id="general_typescript">
            <div class="question toDo">
              <p>What is Typescript?</p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <li id="general_mocha-chai">
            <div class="question toDo">
              <p>What is Mocha, and how does it relate to Chai?</p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <li id="general_jsdoc">
            <div class="question toDo">
              <p>What is JSDoc? (@param, etc.)</p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <li id="general_browserslistrc">
            <div class="question toDo">
              <p>
                What is the purpose of .browserslistrc file / how does it work?
              </p>
            </div>

            <div class="answer">
              <p>(under construction)</p>
            </div>
          </li>

          <h3 id="genWebSection">
            General Web: Browsers / HTTP, Other Protocols
          </h3>

          <li id="general_websiteVsWebApp">
            <div class="question">
              <p>
                What is the difference between a website and a web application?
              </p>
            </div>

            <div class="answer">
              <p>
                Here are some
                <a
                  href="https://stackoverflow.com/questions/8694922/whats-the-difference-between-a-web-site-and-a-web-application"
                  >excellent answers from Stack Overflow</a
                >:
              </p>
              <blockquote>
                <p>
                  Websites are primarily informational. In this sense,
                  http://cnn.com and http://php.net are websites, not web
                  applications.
                </p>
                <p>
                  Web applications primarily allow the user to perform actions.
                  Google Analytics, gmail, and jslint are web applications.
                </p>
                <p>
                  They are not entirely exclusive. A university website likely
                  gives information such as location, tuition rates, programs
                  available, etc; it will likely have web applications that
                  allow teachers to manage grades and course materials,
                  applications for students to register for and withdraw from
                  courses, etc.
                </p>
              </blockquote>
              <p>Another:</p>
              <blockquote>
                <p>
                  I'd say that a website is defined by its content, while a web
                  application is defined by its interaction with the user. That
                  is, a website can plausibly consist of a static content
                  repository that's dealt out to all visitors, while a web
                  application depends on interaction and requires programmatic
                  user input and data processing.
                </p>
                <p>
                  For example, a news site would be a "website", but a
                  spreadsheet or a collaborative calendar would be web
                  "applications". The news site shows essentially the same
                  information to all visitors, while the calendar processes
                  individual data.
                </p>
                <p>
                  Practically, most websites with quickly changing content will
                  also rely on a sophisticated programmatic (and/or database)
                  backend, but at least in principle they're only defined by
                  their output. The web application on the other hand is
                  essentially a program that runs remotely, and it depends
                  fundamentally on a processing and a data storage backend.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="general_domainnames">
            <div class="question">
              <p>Explain the components of a standard website address.</p>
            </div>

            <div class="answer">
              <p>
                Your standard web address is a combination of the
                <span class="toDo">HTTP application protocol</span>, a domain
                name comprised of at least one subdomain, and, sometimes, a
                folder structure within that subdomain.
              </p>
              <img src="_images/general_domainnames.png" />
              <p>
                "A domain name is an identification string that defines a realm
                of administrative autonomy, authority or control within the
                Internet. Domain names are formed by the rules and procedures of
                the Domain Name System (DNS)."
              </p>
              <p>
                Think of the Internet as a vast swath of available land and a
                domain as personal property on that land. The top-level domain
                (com, org, net) could be thought of as a country or state in
                which lots of private property owners coexist .
              </p>
              <p>
                Domain names are controlled/administered by the Internet
                Corporation for Assigned Names and Numbers (ICANN). These names
                are actually just shortcuts to the true addresses of websites,
                which are IP addresses. The IP address of this website, for
                instance, is 107.180.51.34. When someone types in
                "jeffreygore.com", the name is first
                <span class="toDo"
                  >sent to a Domain Name Server to resolve the name into an IP
                  address.</span
                >
              </p>
            </div>
          </li>

          <li id="general_ClientServerModel">
            <div class="question">
              <p>How does a browser access a webpage?</p>
            </div>

            <div class="answer">
              <p>
                The browser does not "go" to a website as much as it requests a
                copy of an HTML document from a server far away, as well as
                other resources (CSS, JavaScript, advertising content) from
                perhaps the same server or perhaps others, and then assembles it
                into something you can view and interact with. This is based on
                the client-server model of computer communication, where clients
                (the web browser) initiate communication with web servers which
                host the pages. In order for this to work the client and server
                must agree on a shared language/rules of transmission, which is
                where the HTTP protocol comes in.
              </p>
              <img src="_images/general_ClientServerModel.png" />
              <p class="note">(image courtesy of MDN)</p>
              <p>
                HTTP has its own language
                <span class="toDo"
                  >(create a proper dialogue of GET (client) with server
                  response)</span
                >. If a server cannot find the requested resource, it replies
                with the standard HTTP response code of 404.
              </p>
            </div>
          </li>
          <li id="general_webrenderingsteps">
            <div class="question">
              <p>
                What are the steps between you entering a URL into the address
                bar of your browser, and actually seeing the page?
              </p>
            </div>

            <div class="answer">
              <p>
                Courtesy of this
                <a
                  href="https://friendlybit.com/css/rendering-a-web-page-step-by-step/"
                  >excellent write up on Friendly Bit</a
                >:
              </p>
              <ol>
                <li>
                  You <strong>type an URL</strong> into address bar in your
                  preferred browser.
                </li>
                <li>
                  The browser <strong>parses the URL</strong> to find the
                  protocol, host, port, and path.
                </li>
                <li>
                  It <strong>forms a HTTP request</strong> (that was most likely
                  the protocol)
                </li>
                <li>
                  To reach the host, it first needs to
                  <strong>translate </strong>the human readable host<strong>
                    into an IP number</strong
                  >, and it does this by doing a DNS lookup on the host
                </li>
                <li>
                  Then a <strong>socket needs to be opened</strong> from the
                  user’s computer to that IP number, on the port specified (most
                  often port 80)
                </li>
                <li>
                  When a connection is open, the
                  <strong>HTTP request is sent</strong> to the host
                </li>
                <li>
                  The host <strong>forwards the request</strong> to the server
                  software (most often Apache) configured to listen on the
                  specified port
                </li>
                <li>
                  The <strong>server inspects the request</strong> (most often
                  only the path), and
                  <strong>launches the server plugin needed</strong> to handle
                  the request (corresponding to the server language you use,
                  PHP, Java, .NET, Python?)
                </li>
                <li>
                  The plugin gets access to the full request, and starts to
                  prepare a HTTP response.
                </li>
                <li>
                  To construct the response a <strong>database </strong>is (most
                  likely) <strong>accessed</strong>. A database search is made,
                  based on parameters in the path (or data) of the request
                </li>
                <li>
                  Data from the database, together with other information the
                  plugin decides to add, is
                  <strong>combined into a long string</strong> of text (probably
                  HTML).
                </li>
                <li>
                  The plugin <strong>combines </strong>that data with some meta
                  data (in the form of HTTP headers), and
                  <strong>sends the HTTP response</strong> back to the browser.
                </li>
                <li>
                  The browser receives the response, and
                  <strong>parses the HTML</strong> in the response.
                </li>
                <li>A <strong>DOM tree is built</strong> out of the HTML.</li>
                <li>
                  <strong>New requests are made</strong> to the server for each
                  new resource that is found in the HTML source (typically
                  images, style sheets, and JavaScript files). Go back to step 3
                  and repeat for each resource.
                </li>
                <li>
                  <strong>Stylesheets are parsed</strong>, and the rendering
                  information in each gets attached to the matching node in the
                  DOM tree
                </li>
                <li>
                  <strong>JavaScript is parsed and executed</strong>, and DOM
                  nodes are moved and style information is updated accordingly
                </li>
                <li>
                  The browser <strong>renders the page</strong> on the screen
                  according to the DOM tree and the style information for each
                  node
                </li>
                <li>
                  <strong>You</strong><strong> see</strong> the page on the
                  screen.
                </li>
              </ol>
            </div>
          </li>
          <li id="general_RelativeVsAbsoluteFilePath">
            <div class="question">
              <p>
                What is the difference between a relative and absolute file
                path?
              </p>
            </div>

            <div class="answer">
              <p>
                An absolute file path includes the root directory of the file.
                You are essentially including the highest level of the hierarchy
                in which the resource exists, then listing every level between
                that top level and the resource. This is the equivalent of
                dialing "1" before a phone number in the US, or writing "USA"
                after the state of an address on an envelope. It does not hurt,
                but is often unnecessary because the internal relationship is
                implied.
              </p>
              <p>
                The same goes for internet file paths. As explained in a
                previous example, if one page wishes to link to another page
                within the same folder, then the
                <code class="HTML"
                  ><span class="HTML attribute">href</span></code
                >
                attribute only needs that file name and not the path - if no
                path is supplied then the implication is that the file is in the
                same folder. Hyperlinks within a web domain are handled by
                relative references.
              </p>
              <samp>
                <h3>Absolute</h3>
                <dl>
                  <dt>1-407-321-3341</dt>
                  <dt>412 Example Drive, Orlando, FL, USA 32825-5920</dt>
                  <dt>C:\Users\Jeff\AppData\Roaming\Microsoft\Excel</dt>
                  <dt>jeffreygore.com/public_html/_css/JGWebReference.css</dt>
                </dl>
                <h3>Relative</h3>
                <dl>
                  <dt>321-3341</dt>
                  <dd>
                    (assuming call is originating from 407 area code within the
                    US (1))
                  </dd>
                  <dt>412 Example Drive, Orlando, FL 32825</dt>
                  <dd>(assuming letter is originating from within US)</dd>
                  <dt>Excel</dt>
                  <dd>
                    (assuming request is originating from
                    C:\Users\Jeff\AppData\Roaming\Microsoft)
                  </dd>
                  <dt>_css/JGWebReference.css</dt>
                  <dd>
                    (assuming request is originating from
                    jeffreygore.com/public_html)
                  </dd>
                </dl>
              </samp>
            </div>
          </li>

          <li id="general_BrowserAccessLocalFile">
            <div class="question">
              <p>
                Can an internet browser access a file on the user's own
                computer? If so, how?
              </p>
            </div>

            <div class="answer">
              <p>
                Yes, an internet browser can navigate to a local file on the
                user's computer. Instead of
                <span class="directory">http://</span>, the file path is
                preceded by <span class="directory">file:///</span>, like so:
              </p>
              <samp
                ><span class="directory"
                  >file:///D:/Google%20Drive/%23%20Education%20%23/HCJ/HCJ%20Genref/HTML%20WHATWG%20Bible.pdf</span
                ></samp
              >
              <p>
                Because a browser cannot handle spaces in a file name, it must
                have use codes referring to the ASCII character hex code.
                <span class="directory">%20</span> signifies a space, while
                <span class="directory">%23</span> signifies the pound sign (#).
              </p>
            </div>
          </li>
          <li id="general_gZip">
            <div class="question">
              <p>How does the gzip compression format relate to the web?</p>
            </div>

            <div class="answer">
              <p>
                Gzip is probably the most popular online file compression format
                and can reduce the size of an HTML, CSS, and/or JS file much
                more drastically than minification.
              </p>
              <p>
                The format is based on the DEFLATE algorithm, which replaces
                text with a series of pointers to matching strings of characters
                (or previous pointers) earlier in the file. For example, the
                following:
              </p>
              <samp
                >In the beginning God created the heaven and the earth.</samp
              >
              <p>..could be represented as the following in a gzipped file:</p>
              <samp
                >In the beginning God created&lt;25, 5&gt;heaven an&lt;14,
                6&gt;earth.</samp
              >
              <p>
                The "backpointers" are represented by &lt;distance, length&gt;.
                Therefore in this example:
              </p>
              <ul>
                <li>
                  First backpointer: " the " (spaces included) is already used
                  in the document, search backwards 25 characters and then you
                  should see those 5 characters.
                </li>
                <li>
                  Second backpointer: "d the " (spaces included) is already used
                  in the document, search backwards 14 characters and then you
                  should see those 6 characters, 5 of which are already
                  represented by a pointer.
                </li>
              </ul>
              <p>
                You can see whether a file was encoded in gzip under the
                "Response Headers" section of the "Headers" tab in the Network
                section of Google DevTools:
              </p>
              <img src="_images/general_gZip.png" />
            </div>
          </li>
          <li id="general_REST">
            <div class="question toDo">
              <p>What is REST?</p>
            </div>

            <div class="answer"></div>
          </li>

          <li id="general_web-services">
            <div class="question toComplete">
              <p>What is a web service?</p>
            </div>

            <div class="answer">
              <pre>
A web service is a generic term for a software function that is hosted at a network addressable location.

A web service is a function that can be accessed by other programs over the web (Http).

The best plain English explanation comes from using an analogy:

Web pages allow people to communicate and collaborate with each other.
Web services allow programs to communicate and collaborate with each other.
A Web service is merely an API wrapped in HTTP. An API doesn’t always need to be web based. A program's API consists of a complete set of rules and specifications for another software program to follow in order to facilitate interaction.

All Web services are APIs but all APIs are not Web services.</pre
              >
            </div>
          </li>
          <h3 id="genDevSection">General Software Engineering / Hardware</h3>

          <li id="general_bitBinary">
            <div class="question">
              <p>
                What is a bit, what is a byte, and how do those relate to
                binary?
              </p>
            </div>

            <div class="answer">
              <p>
                "The bit is the most basic unit of information in computing and
                digital communications. The name is a portmanteau of "binary
                digit". The bit represents a logical state with one of two
                possible values. These values are most commonly represented as
                either "1" or "0", but other representations such as true/false,
                yes/no, +/−, or on/off are commonly used."
              </p>
              <p>Therefore the following number 5 in binary:</p>
              <pre>00000101</pre>
              <p>
                ...is an 8-bit value. Count the number of digits - there are
                eight. Eight bits equals a byte.
              </p>
              <p>
                "Historically, the byte was the number of bits used to encode a
                single character of text in a computer and for this reason it is
                the smallest addressable unit of memory in many computer
                architectures."
              </p>
              <p>
                Technically, a byte can be other sizes than 8 bit. But its
                default meaning is 8 bits. "To disambiguate arbitrarily sized
                bytes from the common 8-bit definition, network protocol
                documents such as The Internet Protocol (RFC 791) refer to an
                8-bit byte as an octet.""
              </p>

              <p>
                But how are bits actually physically implemented? It varies. "A
                bit can be a tiny magnetic region on a hard disk, a tiny dent in
                the reflective material on a CD or DVD, or a tiny transistor on
                a memory stick."
              </p>
            </div>
          </li>

          <li id="general_bitwise">
            <div class="question toComplete">
              <p>What are "bitwise" operations?</p>
            </div>

            <div class="answer">
              <p>
                "In computer programming, a bitwise operation operates on a bit
                string, a bit array or a binary numeral (considered as a bit
                string) at the level of its individual bits."
              </p>
            </div>
          </li>

          <li id="general_programmingDRY">
            <div class="question">
              <p>
                In the world of programming, what does the acronym DRY / D.R.Y.
                mean?
              </p>
            </div>

            <div class="answer">
              <p>
                "In software engineering, don't repeat yourself (DRY) is a
                principle of software development aimed at reducing repetition
                of all kinds...The DRY principle is stated as "Every piece of
                knowledge must have a single, unambiguous, authoritative
                representation within a system"..."When the DRY principle is
                applied successfully, a modification of any single element of a
                system does not require a change in other logically unrelated
                elements."
              </p>
              <p>
                "Violations of DRY are typically referred to as WET solutions,
                which is commonly taken to stand for either "write everything
                twice", "we enjoy typing" or "waste everyone's time"
              </p>
              <p>
                This is the same idea behind database normalization - one piece
                of information should be stored in one place. Do not store the
                customer's phone number in the Customer table and a Marketing
                table. Then there is confusion about which one is authoritative,
                and extra work to keep the non-authoritative table updated.
              </p>
            </div>
          </li>
          <li id="general_programmingSOLID">
            <div class="question toComplete">
              <p>
                In the world of object-oriented programming, what does the
                acronym SOLID mean?
              </p>
            </div>

            <div class="answer">
              <p>
                SOLID is an "acronym for five design principles intended to make
                software designs more understandable, flexible and
                maintainable." Important, this relates specifically to
                OBJECT-ORIENTED programming! It stands for:
              </p>
              <ul>
                <li>Single responsibility principle</li>
                <li>Open/closed principle</li>
                <li>Liskov substitution principle</li>
                <li>Interface segregation principle</li>
                <li>Dependency inversion principle</li>
              </ul>
            </div>
          </li>
          <li id="general_prg_stack">
            <div class="question">
              <p>In programming, what is a "call stack"?</p>
            </div>

            <div class="answer">
              <p>
                "A stack is a list structure where access is only allowed at the
                top. Think of how you interact with a stack of trays in a
                cafeteria. If you want to get a tray, you get the tray that is
                on top; if you want to replace a tray, you place it on the top
                of the stack. That is how you interact with the data stored in a
                stack."
              </p>

              <p>
                How does this relate to JavaScript? And where does "call" come
                in?
              </p>

              <p>
                If you are writing clean code, you are encapsulating your
                operations in small functions; therefore, your script will be
                composed of functions calling other functions. The more deeply
                nested this calling structure goes, the taller the stack gets -
                the currently active procedure is at the top of the stack, while
                the one that called the active procedure is below it, and the
                one that called the one that called the active procedure is
                below that.
              </p>

              <p>
                Let's look at an example of this. Enter a 13 digit product style
                number below, then click the button. The procedure "grooms" the
                input text so that leading spaces are eliminated and a dash
                delimiter is added so that the class, vendor, and style
                components of the number are more distinct.
              </p>

              <samp
                ><input id="callStackExample" />
                <button id="callStackExampleButton">
                  Groom the product style number
                </button></samp
              >

              <p>Now let's look at the code:</p>

              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> callStackInputField = document.getElementById("callStackExample");
<span class="statement">var</span> callStackExampleButton = document.getElementById("callStackExampleButton");

<span class="statement">var</span> MTSStyleLength = 13;

callStackExampleButton.onclick = function() {
    
    var inputStyle = {
    
        value_init: callStackInputField.value,
        value_clean: "",
        value_delim: "",
        type: "",
        cls: "",
        vendor: "",
        style: "",
        groom() {
            this.addDelims("-");
            callStackInputField.value = this.value_delim;
        },
        addDelims(delimSymbol) {
            this.extractCVS();
            this.value_delim = (
                this.cls + 
                delimSymbol + 
                this.vendor +
                delimSymbol + 
                this.style
                );
        },
        extractCVS() {
            this.judge();
            <span class=" statement">if</span> (this.type == "MTS") {
                this.cls = this.value_clean.substr(0,4);
                this.vendor = this.value_clean.substr(4,5);
                this.style = this.value_clean.substr(9,4);
            }
        },
        judge() {
            this.clean();
            <span class=" statement">if</span> (this.value_clean.length == MTSStyleLength) {
                this.type = "MTS";
            }
        },
        clean() {
            this.value_clean = this.value_init.trim();
        }
        
    };
    
    inputStyle.groom();
    
};</code></pre>
              <p>
                This procedure creates an event handler for the button - when it
                is clicked, it says, run the groom() method of the inputStyle
                object. But the groom method depends on a method which depends
                on another method, and so on. I could probably come up with a
                better logical sequence here, but this example is just to
                illustrate the stack.
              </p>

              <ol class="defineCode">
                <li>
                  <code class="JS"><span class="JGmethod">groom</span>()</code>:
                  I want to replace the value in the text box with a "groomed"
                  value. Before replacing it, however, I need to add delimiters,
                  so I will call:
                </li>
                <li style="margin-left: 1.5em">
                  <code class="JS"
                    ><span class="JGmethod">addDelims</span>("-")</code
                  >: I want to add delimiters to the string, but it would be
                  easiest if I had the class, vendor, and style already broken
                  out, so I will call:
                </li>
                <li style="margin-left: 3em">
                  <code class="JS"
                    ><span class="JGmethod">extractCVS</span>()</code
                  >: I want to extract the class, vendor, and style and assign
                  them to separate properties, but I first need to know what
                  type of string this is, since C, V, and S can be different
                  lengths depending on the system, so I will call:
                </li>
                <li style="margin-left: 4.5em">
                  <code class="JS"><span class="JGmethod">judge</span>()</code>:
                  I want to judge the type of string the user has entered by
                  looking at the number of characters, but in order to get an
                  accurate judgment, any leading and trailing spaces must be
                  removed, so I will call:
                </li>
                <li style="margin-left: 6em">
                  <code class="JS"><span class="JGmethod">clean</span>()</code>:
                  I will remove leading and trailing spaces from the inputStyle
                  object.
                </li>
              </ol>

              <p>
                This order of operations, where "each function introduces the
                next", is inspired by Robert C. Martin from Clean Code: "We want
                the code to read like a top-down narrative. We want every
                function to be followed by those at the next level of
                abstraction so that we can read the program, descending one
                level of abstraction at a time as we read down the list of
                functions. I call this The Stepdown Rule."
              </p>
              <p>
                Every time a function is called, it is added to the top of the
                stack, which is technically called a "push". In essence, the
                shape of a program stack is the inverse of the "step-down"
                structure you see above. Here's a screenshot from Google
                DevTools of the above operation when it has reached
                <code class="JS"><span class="JGmethod">clean</span>()</code>:
              </p>
              <img src="_images/general_prg_stack.png" />
              <p>
                <code class="JS"><span class="JGmethod">clean</span>()</code> is
                at the top of the stack, and each of the below functions are
                waiting for the one above them to finish executing. Note that in
                each "stack frame", you can see the line number that the calling
                function left off at. This is known as the function's "return
                address". When
                <code class="JS"><span class="JGmethod">clean</span>()</code>
                finishes running, it will disappear, or "pop" off the top of the
                stack, returning control to
                <code class="JS"><span class="JGmethod">judge</span>()</code> at
                its return address. So again:
              </p>
              <ul>
                <li>"push": add to top of stack.</li>
                <li>"pop": remove from top of stack.</li>
              </ul>
            </div>
          </li>
          <li id="general_variableBinding">
            <div class="question">
              <p>What is a variable "binding"?</p>
            </div>

            <div class="answer">
              <p>
                A variable binding is "the association between a variable name
                and its value....In a context where a variable has not been
                assigned a value, the variable is said to be free. Otherwise,
                the variable is bound."
              </p>
              <p>
                It is called such because it "binds some value to a name, so it
                can be used later." Very similar to assignment.
              </p>
            </div>
          </li>

          <li id="general_programmingException">
            <div class="question">
              <p>In programming, what is an exception?</p>
            </div>

            <div class="answer">
              <p>
                "The term exception is shorthand for the phrase 'exceptional
                event'...an exception is an event, which occurs during the
                execution of a program, that disrupts the normal flow of the
                program's instructions."
              </p>
              <p>
                Exceptions don't just appear, they are <i>thrown</i>, and it is
                up to you to <i>catch</i> them.
              </p>
              <p>
                "Before you can catch an exception, some code somewhere must
                throw one. Any code can throw an exception: your code, code from
                a package written by someone else ... or the runtime environment
                [itself]."
              </p>
            </div>
          </li>
          <li id="general_whatIsAnAPI">
            <div class="question">
              <p>What is an API?</p>
            </div>

            <div class="answer">
              <p>
                "An API (Application Programming Interface) is a description of
                how a software component may interact with other software
                components."
              </p>
              <p>
                "An API is a list of commands as well as the format of those
                commands that one program can send to another. It is used so
                that individual programs can communicate with one another
                directly and use each other's functions."
              </p>
              <p>
                "API's are provided by any program that allows interaction with
                other programs. People who write programs but wish to use the
                functionality that already exist in other programs can simply
                look at the API documentation to find the list of commands
                available to them."
              </p>
              <p>
                "...when a company offers an API to their customers, it just
                means that they’ve built a set of dedicated URLs that return
                pure data responses — meaning the responses won’t contain the
                kind of presentational overhead that you would expect in a
                graphical user interface like a website."
              </p>
              <p>
                "Basically any piece of software that can be distinctively
                separated from its environment, can be an “A” in API, and will
                probably also have some sort of API."
              </p>
              <p>
                " In Object Oriented Design, code is organized into objects.
                Your application may have hundreds of objects defined that can
                interact with one another. Each object has an API — a set of
                public methods and properties that it uses to interact with
                other objects in your application. An object may also have inner
                logic that is private, meaning that it’s hidden from the outside
                scope (and not an API)."
              </p>
            </div>
          </li>

          <li id="general_argumentVsParameter">
            <div class="question">
              <p>What's the difference between an argument and a parameter?</p>
            </div>

            <div class="answer">
              <p>
                "A parameter is a variable in a method definition. When a method
                is called, the arguments are the data you pass into the method's
                parameters...An alliterating mnemonic that may help: Arguments
                are Actual."
              </p>
              <p>
                Put another way, a parameter "a variable in which the function
                stores information passed to it."
              </p>
              <p>
                In the below example, x and y are the function's parameters, and
                it is then called with arguments of 8 and 23. The parameter x
                takes the value 8, and the parameter y takes the value 23.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> multiply(x, y) {
    <span class="statement">var</span> result = x * y;
    <span class="statement">return</span> result;
}

<span class="statement">var</span> test = multiply(8, 23); </code></pre>
            </div>
          </li>

          <li id="general_defineIteration">
            <div class="question">
              <p>What is iteration?</p>
            </div>

            <div class="answer">
              <p>
                Another word for a loop. "Iteration, in the context of computer
                programming, is a process wherein a set of instructions or
                structures are repeated in a sequence a specified number of
                times or until a condition is met."
              </p>
            </div>
          </li>
          <li id="synprof_booleanFlag">
            <div class="question">
              <p>In programming, what is a "flag"?</p>
            </div>

            <div class="answer">
              <p>
                A "flag" is just another term for a true/false condition, i.e. a
                Boolean variable.
              </p>
            </div>
          </li>

          <li id="general_JS_publicProperties">
            <div class="question">
              <p>
                In programming, what is a public property vs. a protected
                property vs. a private property, and how does this relate to
                JavaScript?
              </p>
            </div>

            <div class="answer">
              <p>
                "A public item is one that is accessible from any other class.
                You just have to know what object it is and you can use a dot
                operator to access it.
              </p>

              <p>
                "Protected means that a class and its subclasses have access to
                the variable, but not any other classes, they need to use a
                getter/setter to do anything with the variable.
              </p>

              <p>
                "...private means that only that class has direct access to the
                variable, everything else needs a method/function to access or
                change that data."
              </p>

              <p>
                In JavaScript, properties are public by default, which means
                they are accessible from outside the class.
              </p>

              <p>
                If "john" is the name of an object variable, this is an example
                of a public property being accessed:
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> myAge = john.age;</code></pre>
              <p>
                How, then, do you create a private property in JavaScript? The
                answer is to declare it within the constructor without the
                <code class="JS"><span class="statement">this</span></code>
                keyword.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> Person (first, last) {
  <span class="statement">this</span>.firstName = first;
  <span class="statement">this</span>.lastName = last;
  <span class = "hghlt"><span class="statement">var</span> bankBalance = 1000;</span>
}</code></pre>
              <p>Now if we created an object from the Person constructor....</p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> john = new Person('John','Bohnman');</code></pre>
              <p>
                ...and tried to access john.bankBalance, it would return
                undefined.
              </p>
              <p>
                Because methods are ultimately properties as well, the same
                rules apply. If you want a method to be private, simply declare
                it inside the constructor.
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">function</span> Person (first, last) {
  <span class="statement">this</span>.firstName = first;
  <span class="statement">this</span>.lastName = last;
  <span class="statement">var</span> bankBalance = 1000;
  <span class = "hghlt"><span class="statement">var</span> getBalance = function () </span> {
    <span class="statement">return</span> bankBalance;
  }
}</code></pre>
            </div>
          </li>

          <li id="general_JS_whyPrivateProperties">
            <div class="question">
              <p>What is the point of making object properties private?</p>
            </div>

            <div class="answer">
              <p>
                The below is the Chosen Answer from
                <a
                  href="https://softwareengineering.stackexchange.com/questions/143736/why-do-we-need-private-variables"
                  >this Stack Overflow thread:</a
                >
              </p>
              <blockquote>
                <p>
                  It's not so much a matter of trust, but rather one of managing
                  complexity.
                </p>

                <p>
                  A public member can be accessed from outside the class, which
                  for practical considerations means "potentially anywhere". If
                  something goes wrong with a public field, the culprit can be
                  anywhere, and so in order to track down the bug, you may have
                  to look at quite a lot of code.
                </p>

                <p>
                  A private member, by contrast, can only be accessed from
                  inside the same class, so if something goes wrong with that,
                  there is usually only one source file to look at. If you have
                  a million lines of code in your project, but your classes are
                  kept small, this can reduce your bug tracking effort by a
                  factor of 1000.
                </p>

                <p>
                  Another advantage is related to the concept of 'coupling'. A
                  public member <code>m</code> of a class <code>A</code> that is
                  used by another class <code>B</code> introduces a dependency:
                  if you change <code>m</code> in <code>A</code>, you also have
                  to check usages of <code>m</code> in <code>B</code>. Worse
                  yet, nothing in class <code>A</code> tells you where
                  <code>m</code> is being used, so again you have to search
                  through the entire codebase; if it's a library you're writing,
                  you even have to make sure code <em>outside</em> your project
                  doesn't break because of your change. In practice, libraries
                  tend to stick with their original method signatures as long as
                  possible, no matter how painful, and then introduce a block of
                  breaking changes with a major version update. With private
                  members, by contrast, you can exclude dependencies right away
                  - they can't be accessed from outside, so all dependencies are
                  contained inside the class.
                </p>

                <p>
                  In this context, "other programmers" include your future and
                  past selves. Chances are you know <em>now</em> that you
                  shouldn't do this thing X with your variable Y, but you're
                  bound to have forgotten three months down the road when a
                  customer urgently needs you to implement some feature, and you
                  wonder why doing X breaks Y in obscure ways.
                </p>

                <p>
                  So, as to when you should make things private: I'd say make
                  everything private by default, and then expose only those
                  parts that absolutely have to be public. The more you can make
                  private, the better.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="general_CComplier">
            <div class="question">
              <p>
                The C programming language is used to build compilers for other
                programming languages. True or false?
              </p>
            </div>

            <div class="answer">
              <p>
                True. A classic C-based compiler is called
                <a href="http://gcc.gnu.org/">GCC</a>.
              </p>
            </div>
          </li>

          <li id="general_Java">
            <div class="question">
              <p>Tell me some stuff about Java.</p>
            </div>

            <div class="answer">
              <p>Here's some stuff about Java:</p>
              <ul>
                <li>It has a huge library, the Java Class Library.</li>
                <li>
                  Oracle now is the "steward" the language after acquiring Sun
                  Microsystems, which developed it.
                </li>
                <li>
                  A Java Virtual Machine (JVM) needs to be installed on the host
                  machine in order to run Java programs.
                </li>
              </ul>
            </div>
          </li>

          <li id="general_Ruby">
            <div class="question">
              <p>Tell me some stuff about Ruby.</p>
            </div>

            <div class="answer">
              <p>Here's some stuff about Ruby:</p>
              <ul>
                <li>It does not require compilation.</li>
              </ul>
            </div>
          </li>

          <li id="general_Python">
            <div class="question">
              <p>Tell me some stuff about Python.</p>
            </div>

            <div class="answer">
              <p>Here's some stuff about Python:</p>
              <ul>
                <li>Indentation rules are enforced.</li>
              </ul>
            </div>
          </li>

          <li id="general_objectiveC">
            <div class="question">
              <p>Tell me some stuff about Objective C.</p>
            </div>

            <div class="answer">
              <p>Here's some stuff about Objective C:</p>
              <ul>
                <li>It was used to build Apple's OS X and iOS.</li>
              </ul>
            </div>
          </li>

          <li id="general_libraryVsFramework">
            <div class="question toComplete">
              <p>
                What's the difference between a library and a framework, and how
                does this relate to "inversion of control"?
              </p>
            </div>

            <div class="answer">
              <p>
                The short answer is: "you call the library; the framework calls
                you."
              </p>
              <p>
                As referenced earlier, a <strong>library</strong> contains a
                bunch of pre-written code that you can call. "A library is
                essentially a set of functions that you can call, these days
                usually organized into classes." There is no need to create a
                routine for a complex mathematical algorithm if one already
                exists.
              </p>

              <blockquote>
                Examples of libraries: Network protocols, compression, image
                manipulation, string utilities, regular expression evaluation,
                math. Operations are self-contained.
              </blockquote>

              <p>
                A <strong>framework</strong>, on the other hand, "defines a
                skeleton...all the control flow is already there, and there are
                a bunch of predefined white spots that we should fill out with
                our code...In this way, your code will be called by the
                framework when appropriate."
              </p>

              <blockquote>
                Examples of frameworks: Web application system, Plug-in manager,
                GUI system. The framework defines the concept but the
                application defines the fundamental functionality that end-users
                care about.
              </blockquote>
              <p>
                At this point, we can introduce the term
                <strong>inversion of control</strong>.
              </p>
              <blockquote>
                (IoC) is a design principle in which custom-written portions of
                a computer program receive the flow of control from a generic
                framework. A software architecture with this design inverts
                control as compared to traditional procedural programming: in
                traditional programming, the custom code that expresses the
                purpose of the program calls into reusable libraries to take
                care of generic tasks, but with inversion of control, it is the
                framework that calls into the custom, or task-specific, code.
              </blockquote>
              <p>(more here)</p>
            </div>
          </li>

          <li id="general_whatIsSyntax">
            <div class="question">
              <p>What is syntax?</p>
            </div>

            <div class="answer">
              <p>
                Syntax is a given programming language's commands, special
                words, and punctuation.
              </p>
            </div>
          </li>

          <li id="general_artOfProgramming">
            <div class="question">
              <p>
                The art of programming is to take a larger idea and break it
                apart into individual steps. Truthy or falsy?
              </p>
            </div>

            <div class="answer">
              <p>Truthy.</p>
            </div>
          </li>

          <li id="general_machineCode">
            <div class="question">
              <p>
                What is machine code? How does it relate to assembly language?
              </p>
            </div>

            <div class="answer">
              <p>
                "Machine code or machine language is a set of instructions
                executed directly by a computer's central processing unit
                (CPU)...Every processor or processor family has its own machine
                code instruction set."
              </p>
              <p>Below is an example of machine code:</p>
              <pre class="syntax code"><code>0x 60 00 00 80
0x A4 00 00 00
0x 60 01 00 84
0x A4 01 01 00
0x 60 02 00 00
0x 60 03 00 04
0x 60 04 00 00
0x 60 05 00 01
0x 08 00 00 02
0x 20 00 00 03
0x 20 04 04 05
0x 11 20 04 01</code></pre>

              <p>
                "A much more readable rendition of machine language, called
                assembly language, uses mnemonic codes to refer to machine code
                instructions, rather than using the instructions' numeric values
                directly. For example, on the Zilog Z80 processor, the machine
                code 00000101, which causes the CPU to decrement the B processor
                register, would be represented in assembly language as DEC B."
              </p>
              <p>Below is an example of assembly language:</p>
              <pre class="syntax code"><code>IMM   R0,   0x80
LOAD  R0,   R0
IMM   R1,   0x84
LOAD  R1,   R1
IMM   R2,   0x0
IMM   R3,   0x4
IMM   R4,   0x0
IMM   R5,   0x1
STORE R0,   R2
ADD   R0,   R0, R3
ADD   R4,   R4, R5
BNE   0x20, R4, R1
</code></pre>

              <p>
                Therefore you can see why "normal" programming languages are
                valuable - not only do they abstract the computer's
                functionality into humanly-comprehensible nouns and verbs, they
                also allow you to build software that runs on multiple different
                types of processors, which all have their own machine
                languages..."most high-level programming languages are generally
                portable across multiple architectures but require interpreting
                or compiling."
              </p>
            </div>
          </li>

          <li id="general_defineGIGO">
            <div class="question">
              <p>What does the acronym GIGO signify?</p>
            </div>

            <div class="answer">
              <p>
                "Garbage in, garbage out (GIGO) in the field of computer science
                or information and communications technology refers to the fact
                that computers, since they operate by logical processes, will
                unquestioningly process flawed, even nonsensical, input data
                ("garbage in") and produce undesired, often nonsensical, output
                ("garbage out").
              </p>
            </div>
          </li>

          <li id="general_variableMemory">
            <div class="question">
              <p>
                Variables are the names of the little pieces of territory in
                computer memory you've staked out to hold values, whether you've
                assigned a value or not. Truthy or falsy?
              </p>
            </div>

            <div class="answer">
              <p>Truthy.</p>
            </div>
          </li>

          <li
            id="general_objectBracketNotation"
            class="toDo"
            style="display: none"
          >
            <div class="question">
              <p>
                Bracket notation for objects...shows the that arrays are just
                objects...0 is a property, 1 is a property...
              </p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_volatileMemory">
            <div class="question">
              <p>
                What is the difference between volatile and non-volatile memory?
              </p>
            </div>

            <div class="answer">
              <p>
                "Volatile memory, contrary to non-volatile memory, is computer
                memory that requires power to maintain the stored information;
                it retains its contents while powered on but when the power is
                interrupted, the stored data is lost immediately or very
                rapidly." Think RAM.
              </p>
              <p>
                "Examples of non-volatile memory include read-only memory, flash
                memory, ferroelectric RAM, most types of magnetic computer
                storage devices (e.g. hard disk drives, floppy disks, and
                magnetic tape), optical discs, and early computer storage
                methods such as paper tape and punched cards." Think hard drive.
              </p>
            </div>
          </li>

          <li id="general_memoryAddressing">
            <div class="question">
              <p>
                How does memory addressing work? Why do I see "0x" in memory
                addressing?
              </p>
            </div>

            <div class="answer">
              <p>
                "0x" is a prefix used in computing to let you know that the
                following numeric constant is written in hexadecimal format.
                Even deeper: "The 0 tells the parser it's dealing with a
                constant (and not an identifier/reserved word). Something is
                still needed to specify the number base: the x is an arbitrary
                choice [for heXadecimal]."
              </p>
              <p>
                Writing memory addresses in hex allows them to be represented in
                fewer characters than base 10 (decimal) or base 2 (binary).
              </p>
              <p>
                You'll also note that the addresses you may see in an error
                stack have a colon (:) in the middle, such as "27392:0x52aa740".
                This colon separates the segment address from the offset.
              </p>
            </div>
          </li>

          <li id="general_literal">
            <div class="question">
              <p>In computer science, what is a literal?</p>
            </div>

            <div class="answer">
              <p>
                "A literal is a notation for representing a fixed value in
                source code..Literals are often used to initialize variables,
                for example, in the following, 1 is an integer literal and the
                three letter string in "cat" is a string literal:"
              </p>
              <pre
                class="JS code"
              ><code class="JS"><span class="statement">var</span> i = 1;
<span class="statement">var</span> s = "cat";</code></pre>
              <p>
                Think of it like this - when you see the below in JavaScript:
              </p>
              <pre class="JS code"><code class="JS">cat</code></pre>
              <p>
                ...you know, based on the syntax of JavaScript, that it must be
                a variable holding some other value. It could be a simple object
                or a huge function. But if you see the below instead:
              </p>
              <pre class="JS code"><code class="JS">"cat"</code></pre>
              <p>
                ...you know that this is <em>literally</em> the word cat, not a
                code word for something else.
              </p>
            </div>
          </li>

          <li id="general_OO_waterfall">
            <div class="question">
              <p>What is the "waterfall" model of software development?</p>
            </div>

            <div class="answer">
              <p>
                "The waterfall model is a sequential (non-iterative) design
                process, used in software development processes, in which
                progress is seen as flowing steadily downwards (like a
                waterfall) through the phases of conception, initiation,
                analysis, design, construction, testing,
                production/implementation and maintenance."
              </p>
              <img src="_images/general_OO_waterfall.png" />
              <p>
                "In a true waterfall development project, each of these
                represents a distinct stage of software development, and each
                stage generally finishes before the next one can begin."
              </p>
              <p>
                The main drawback to the waterfall approach is "the possibility
                that the customer will be dissatisfied with their delivered
                software product. As all deliverables are based upon documented
                requirements, a customer may not see what will be delivered
                until it’s almost finished. By that time, changes can be
                difficult (and costly) to implement."
              </p>
              <p>
                In sum, the waterfall model is linear, step-by-step, and
                relatively non-responsive.
              </p>
            </div>
          </li>

          <li id="general_OO_agile">
            <div class="question">
              <p>What is the "agile" model of software development?</p>
            </div>

            <div class="answer">
              <p>
                "Agile software development describes a set of values and
                principles for software development under which requirements and
                solutions evolve through the collaborative effort of
                self-organizing cross-functional teams."
              </p>
              <img src="_images/general_OO_agile.jpg" />
              <p>
                "Most agile development methods break product development work
                into small increments that minimize the amount of up-front
                planning and design. Iterations are short time frames
                (timeboxes) that typically last from one to four weeks. Each
                iteration involves a cross-functional team working in all
                functions: planning, analysis, design, coding, unit testing, and
                acceptance testing. At the end of the iteration a working
                product is demonstrated to stakeholders. This minimizes overall
                risk and allows the product to adapt to changes quickly."
              </p>
            </div>
          </li>

          <li id="general_OO_objectTF">
            <div class="question">
              <p>
                In OO programming, objects are used to represent real world
                entities. A person, a product, and/or a store would all be good
                candidates for representation as an object in an OO program.
                True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="general_OO_whatShouldBeAnObject">
            <div class="question">
              <p>
                What criteria should you use to decide whether a real-world
                entity should be given representation as an object in your
                program?
              </p>
            </div>

            <div class="answer">
              <p>
                Objects are usually nouns. A good test for whether an entity
                should be an object is: can you put the word "the" in front of
                it?
              </p>
              <ul>
                <li>The dog.</li>
                <li>The date.</li>
                <li>The bank account.</li>
              </ul>
              <p>
                Note that OO objects do not always correspond to concrete or
                visible objects in the real world.
              </p>
            </div>
          </li>

          <li id="general_OO_fourPillars toComplete">
            <div class="question">
              <p>What are the "four pillars" of Object-Oriented Design?</p>
            </div>

            <div class="answer">
              <p>They are:</p>
              <ul>
                <li>Abstraction</li>
                <li>Polymorphism</li>
                <li>Inheritance</li>
                <li>Encapsulation</li>
              </ul>
              <p>
                You can use the mnemonic "A PIE" to remember these. Let's go
                through them one at a time. [FINISH THIS]
              </p>
            </div>
          </li>

          <li id="synprof_bracketsvsbraces">
            <div class="question">
              <p>What do you call [ vs { ?</p>
            </div>

            <div class="answer">
              <p>
                The first is a bracket, the second is a brace (some people call
                it a "curly bracket").
              </p>
            </div>
          </li>

          <li id="general_lint">
            <div class="question">
              <p>What is a "linter"?</p>
            </div>

            <div class="answer">
              <p>
                "Generically, lint or a linter is any tool that flags suspicious
                usage in software written in any computer language...modern lint
                checkers are often used to find code that doesn't correspond to
                certain style guidelines. They can also be used as simple
                debuggers for common errors."
              </p>
              <p>
                The name derives from "a Unix utility that flags some suspicious
                and non-portable constructs (likely to be bugs) in C language
                source code", which first appeared in 1979.
              </p>
              <p>
                If you are viewing this HTML code in Brackets, for instance, the
                warnings on the left hand side are courtesy of an extension
                called "Interactive Linter".
              </p>
            </div>
          </li>

          <li id="general_polyfillShim">
            <div class="question">
              <p>
                What is a shim, what is a polyfill, and how are they related?
              </p>
            </div>

            <div class="answer">
              <p>
                The two terms are very similar; a polyfill is a subset of a
                shim. Here's one set of defintions:
              </p>
              <blockquote>
                <p>
                  A shim is a library that brings a new API to an older
                  environment, using only the means of that environment.
                </p>
                <p>
                  A polyfill is a shim for a browser API. It typically checks if
                  a browser supports an API. If it doesn’t, the polyfill
                  installs its own implementation. That allows you to use the
                  API in either case.
                </p>
              </blockquote>
              <p>
                "The term is based on the multipurpose filling paste brand
                Polyfilla, a paste used to cover up cracks and holes in walls,
                and the meaning 'fill in holes (in functionality) in many
                (poly-) ways.'"
              </p>
              <p>
                Let's say, for instance, that you've gotten to enjoy using ES6
                features, particularly Array.fill. The problem is that older
                browsers such as IE, when parsing your JavaScript, will throw
                "TypeError: Array.fill is not a function." It has no knowledge
                of this array method, because to its JavaScript engine, it
                doesn't exist. Luckily, you can modify the Array prototype. So
                let's polyfill Array.fill with a barebones implementation that
                only does a full nuclear fill, i.e. overwrites the entirety of
                an array with one value:
              </p>
              <pre
                class="JS code"
              ><code class="JS">Array.prototype.fill = function(val) {
  for (let i = 0; i &lt; this.length; i++) {
    this[i] = val;
  }
  return this;
}
</code></pre>
              <p>
                You can see how this would work in practice - this library would
                be required or imported at the top of your JavaScript file, and
                by being imported that file would then execute and make those
                prototype assignments.
              </p>
              <p>
                Note that shims/polyfills are powerless to affect the behavior
                of a parser (as far as I know) - see the definition above:
                "using only the means of that environment." With the example of
                Array.fill above, we implemented it using a function expression.
              </p>
              <p>
                But what if we wanted to be able to use an arrow function?
                There, we're out of luck - it is a completely new syntactical
                construction unknown to the parser. We would somehow need to be
                able to have access to the internals of the JavaScript engine
                and update its knowledge on how to parse the code, which, we
                can't. The best we can do, usually using something like Babel,
                is transpile that newer code down to older code before sending
                it to the browser.
              </p>
              <p>
                As for polyfills out in the world, as of Nov. 2018 core-js is a
                popular polyfill library utilized by Babel in @babel/polyfill.
              </p>
            </div>
          </li>

          <li id="general_process">
            <div class="question">
              <p>What is the difference between a program and a process?</p>
            </div>

            <div class="answer">
              <p>
                "While a computer program is a passive collection of
                instructions, a process is the actual execution of those
                instructions."
              </p>
              <p>
                Thought of another way, a program is only a recipe, while the
                process is the act of cooking (and the CPU is the chef). A
                program is a file, inert data, waiting to be run as a process,
                which has state and one or more threads.
              </p>
              <p>
                A process is technically "an instance of a computer program that
                is being executed." "A 'process is what we call a program that
                has been loaded into memory along with all the resources it
                needs to operate...The OS handles the task of managing the
                resources needed to turn your program into a running process."
                And, more generally speaking, the OS manages processes.
              </p>
              <p>
                It is important to note that processes are generally isolated
                from each other; they have their own private section of the
                computer's memory. "A process has a self-contained execution
                environment. A process generally has a complete, private set of
                basic run-time resources; in particular, each process has its
                own memory space."
              </p>
              <p>
                Very generally speaking, Google Chrome assigns a different
                process to each tab.
              </p>
            </div>
          </li>

          <li id="general_processResources">
            <div class="question">
              <p>What resources does a process need?</p>
            </div>

            <div class="answer">
              <p>From Wikipedia:</p>
              <blockquote>
                <p>
                  In general, a computer system process consists of (or is said
                  to own) the following resources:
                </p>

                <ul>
                  <li>
                    An image of the executable machine code associated with a
                    program.*
                  </li>
                  <li>
                    Memory (typically some region of virtual memory); which
                    includes:
                    <ul>
                      <li>the executable code,</li>
                      <li>process-specific data (input and output),</li>
                      <li>
                        a call stack (to keep track of active subroutines and/or
                        other events),
                      </li>
                      <li>
                        and a heap to hold intermediate computation data
                        generated during run time.
                      </li>
                    </ul>
                  </li>
                  <li>
                    Operating system descriptors of resources that are allocated
                    to the process, such as file descriptors (Unix terminology)
                    or handles (Windows), and data sources and sinks.
                  </li>
                  <li>
                    Security attributes, such as the process owner and the
                    process' set of permissions (allowable operations).
                  </li>
                  <li>
                    Processor state (context), such as the content of registers
                    and physical memory addressing. The state is typically
                    stored in computer registers when the process is executing,
                    and in memory otherwise.
                  </li>
                </ul>
              </blockquote>
              <p>
                *I can't find much about an image of executable machine code,
                but as the name suggests, I think an image is an exact copy of
                something. "A process image is a copy of its state at a given
                point in time."
              </p>
              <p>A take from another article:</p>
              <blockquote>
                Some essential resources every process needs are registers, a
                program counter, and a stack.
                <ul>
                  <li>
                    The “registers” are data holding places that are part of the
                    computer processor (CPU). A register may hold an
                    instruction, a storage address, or other kind of data needed
                    by the process.
                  </li>
                  <li>
                    The “program counter,” also called the “instruction
                    pointer,” keeps track of where a computer is in its program
                    sequence.
                  </li>
                  <li>
                    The “stack” is a data structure that stores information
                    about the active subroutines of a computer program and is
                    used as scratch space for the process. It is distinguished
                    from dynamically allocated memory for the process that is
                    known as the “heap.”
                  </li>
                </ul>
              </blockquote>
              <p>And yet another take:</p>
              <blockquote>
                [Process] resources include memory (for both code and data),
                file handles, sockets, device handles, windows, and a process
                control block. Processes are isolated by process isolation, and
                do not share address spaces or file resources except through
                explicit methods such as inheriting file handles or shared
                memory segments, or mapping the same file in a shared way – see
                interprocess communication. Creating or destroying a process is
                relatively expensive, as resources must be acquired or released.
                Processes are typically preemptively multitasked, and process
                switching is relatively expensive, beyond basic cost of context
                switching, due to issues such as cache flushing.
              </blockquote>
            </div>
          </li>

          <li id="general_threadResources">
            <div class="question">
              <p>What is a thread, and what resources does a thread need?</p>
            </div>

            <div class="answer">
              <p>Every process has at least one thread.</p>
              <p>
                "In computer science, a thread of execution is the smallest
                sequence of programmed instructions that can be managed
                independently by a scheduler, which is typically a part of the
                operating system...in most cases a thread is a component of a
                process. Multiple threads can exist within one process,
                executing concurrently and sharing resources such as memory....
                In particular, the threads of a process share its executable
                code and the values of its variables at any given time."
              </p>
              <p>
                Put more simply, "a thread is the unit of execution within a
                process...a sequence of steps that the CPU can execute. A
                process can have anywhere from just one thread to many threads."
              </p>
              <p>
                The resources that a thread needs are a subset of the resources
                that a process needs. See the below diagrams for more
                information (in the first one, a "heap" refers to memory).
              </p>
              <img src="_images/general_threadResources.webp" /><img
                src="_images/general_threadResources2.png"
              />
              <p>
                "Kernel threads do not own resources except for a stack, a copy
                of the registers including the program counter, and thread-local
                storage (if any), and are thus relatively cheap to create and
                destroy."
              </p>
              <p>A single processor can only execute one thread at a time.</p>
              <p>
                Your JavaScript programs will usually run on a single thread -
                the interpreter executes one command, then the next, then the
                next. The advent of Web Workers allows you to run JavaScript in
                multiple threads: "So if, say, you wanted to solve complicated
                math problems, you could let the user enter things into the
                browser, pass those variables off to the worker, let it do the
                computation in the background while in the main thread you let
                the user do other things."
              </p>
              <p>
                "Node.js applications run single-threaded, although Node.js uses
                multiple threads for file and network events."
              </p>
            </div>
          </li>

          <li id="general_timeSlicing">
            <div class="question">
              <p>
                If a processor can only execute one thread at a time (which
                means it can only execute one process at a time), then how can
                my computer be doing multiple things at once? (concurrency, time
                slicing)
              </p>
            </div>

            <div class="answer">
              <p>
                The short answer is that your processor is not doing multiple
                things at once. You are witnessing something called concurrency,
                which is the "interleaving of processes in time to give the
                appearance of simultaneous execution."
              </p>
              <p>
                "When there are more threads than processors, concurrency is
                simulated by time slicing, which means that the processor
                switches between threads."
              </p>
              <p>
                "The period of time for which a process is allowed to run in a
                preemptive multitasking system is generally called the time
                slice or quantum. The scheduler is run once every time slice to
                choose the next process to run. The length of each time slice
                can be critical to balancing system performance vs process
                responsiveness - if the time slice is too short then the
                scheduler will consume too much processing time, but if the time
                slice is too long, processes will take longer to respond to
                input."
              </p>
              <img src="_images/general_TimeSlicing.png" />
              <p>
                "The figure [below] shows how three threads T1, T2, and T3 might
                be time-sliced on a machine that has only two actual processors.
                In the figure, time proceeds downward, so at first one processor
                is running thread T1 and the other is running thread T2, and
                then the second processor switches to run thread T3. Thread T2
                simply pauses, until its next time slice on the same processor
                or another processor."
              </p>
              <img src="_images/general_TimeSlicing2.png" />
            </div>
          </li>

          <li id="general_standardStreams">
            <div class="question toComplete">
              <p>
                Define "standard streams" and how they relate to the terms
                "stdin", "stdout", and "stderr".
              </p>
            </div>

            <div class="answer">
              <p>From Wikipedia:</p>
              <blockquote>
                <p>
                  In computer programming, standard streams are preconnected
                  input and output communication channels between a computer
                  program and its environment when it begins execution.
                </p>
                <p>
                  The three input/output (I/O) connections are called standard
                  input (stdin), standard output (stdout) and standard error
                  (stderr). Originally I/O happened via a physically connected
                  system console (input via keyboard, output via monitor), but
                  standard streams abstract this. When a command is executed via
                  an interactive shell, the streams are typically connected to
                  the text terminal on which the shell is running, but can be
                  changed with redirection or a pipeline. More generally, a
                  child process will inherit the standard streams of its parent
                  process.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="general_register">
            <div class="question toComplete">
              <p>What is a register?</p>
            </div>

            <div class="answer">
              <p>
                "In computer architecture, a processor register is a quickly
                accessible location available to a computer's central processing
                unit (CPU)....Processor registers are normally at the top of the
                memory hierarchy, and provide the fastest way to access data."
              </p>
              <p>
                "Registers usually consist of a small amount of fast
                storage...Almost all computers...load data from a larger memory
                into registers where it is used for arithmetic operations and is
                manipulated or tested by machine instructions. Manipulated data
                is then often stored back to main memory...Modern processors use
                either static or dynamic RAM as main memory, "
              </p>
              <p>
                "A common property of computer programs is
                <span class="toDo">locality of reference</span>, which refers to
                accessing the same values repeatedly and holding frequently used
                values in registers to improve performance; this makes fast
                registers and caches meaningful. Allocating frequently used
                variables to registers can be critical to a program's
                performance; this register allocation is performed either by a
                compiler in the code generation phase, or manually by an
                assembly language programmer."
              </p>
              <p>Perhaps it may help to see a diagram of a CPU:</p>
              <img src="_images/general_register.jpg" />
              <p>
                As you can see, there are different types of registers,
                generally divided into user-accessible registers and internal
                registers. See
                <a
                  href="https://en.wikipedia.org/wiki/Processor_register#Categories_of_registers"
                  >this section of the Wikipedia page</a
                >
                for a slew of register categories within these two larger
                categories.
              </p>
            </div>
          </li>

          <li id="general_programCounter">
            <div class="question toDo">
              <p>What is a program counter?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_scheduler">
            <div class="question toDo">
              <p>What is a scheduler?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_kernel">
            <div class="question toDo">
              <p>What is a kernel?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_contextSwitching">
            <div class="question toDo">
              <p>
                How does context switching work (initiated by OS and underlying
                hardware)?
              </p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_deadlock">
            <div class="question toDo">
              <p>What is deadlock, and, by association, what is livelock?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_loadBalancer">
            <div class="question toDo">
              <p>What is a "load balancer"?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_latency">
            <div class="question toDo">
              <p>What is latency?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_mainframe">
            <div class="question toDo">
              <p>What is a mainframe computer?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_publicPrivateKey">
            <div class="question toDo">
              <p>What is public-key cryptography (public-private key)?</p>
            </div>

            <div class="answer">
              <p>(see SSH for a light treatment)</p>
            </div>
          </li>

          <li id="general_SSH">
            <div class="question toComplete">
              <p>What is SSH?</p>
            </div>

            <div class="answer">
              <p>
                "Secure Shell (SSH) is a cryptographic network protocol for
                operating network services securely...SSH provides a secure
                channel over an unsecured network in a client–server
                architecture, connecting an SSH client application with an SSH
                server."
              </p>
              <p>
                "SSH is typically used to log into a remote machine and execute
                commands..."Let's say you are a server admin who wants to log
                into the server remotely. In the old days, your username and
                password would be sent over the wire unencrypted and could be
                known if intercepted by a "packet sniffer". With SSH, that
                message is encrypted over the wire.
              </p>
              <p>
                How does this authentication work? On the server-side, a
                public-private key pair must exist to identify the server. The
                public key will be present in encrpyted messages from the client
                to the server, and the private key will be used on the server
                end to decrypt that message.
              </p>
              <p>
                Likewise, clients can generate their own public-private key
                pair. Once the connection has been established, the client will
                remember the server based on its public SSH key, and vice versa,
                so future communications are automatically trusted. Server ->
                client messages still have to be decrypted on the client's end
                by the client's own private key, and vice versa.
              </p>
            </div>
          </li>

          <h3 id="mathSection">Math Stuff</h3>
          <li id="cs_bigOterminology">
            <div class="question toDo">
              <p>
                What is the difference between logarithmic, linear, polynomial,
                quadratic, and exponential?
              </p>
            </div>
            <div class="answer">(answer here)</div>
          </li>

          <li id="math_asymptotic">
            <div class="question toDo">
              <p>What does "asymptotic" mean?</p>
            </div>
            <div class="answer">(answer here)</div>
          </li>

          <li id="math_asymptotic">
            <div class="question toDo">
              <p>What is STRICT inequality?</p>
            </div>
            <div class="answer">(answer here)</div>
          </li>

          <li id="math_TimesDividedParentheses">
            <div class="question">
              <p>
                The following two expressions yield the same result. True or
                false?
              </p>
              <ul>
                <li>68 * 5 / 9</li>
                <li>68 * (5 / 9)</li>
              </ul>
            </div>

            <div class="answer">
              <p>True:</p>
              <ul>
                <li>68 * 5 / 9</li>
                <ul>
                  <li>68 * 5 = 340</li>
                  <li>340 / 9 = 37.77777</li>
                </ul>
                <li>68 * (5 / 9)</li>
                <ul>
                  <li>5/9 = 0.5555555</li>
                  <li>68 * 0.5555555 = 37.77777</li>
                </ul>
              </ul>
            </div>
          </li>

          <li id="general_binary">
            <div class="question">
              <p>
                What is a binary number, and how do convert it to a, uh,
                "normal" number? How do you do add and subtract with it?
              </p>
            </div>

            <div class="answer">
              <p>
                "In mathematics and digital electronics, a binary number is a
                number expressed in the base-2 numeral system or binary numeral
                system, which uses only two symbols: typically 0 (zero) and 1
                (one)...Because of its straightforward implementation in digital
                electronic circuitry using logic gates, the binary system is
                used by almost all modern computers and computer-based devices."
              </p>
              <p>
                This essentially says what you've heard before - that under all
                that fancy code, it's all just 0s and 1s. But how does it work?
              </p>
              <p>
                I actually won't answer that massive question of how all of
                computing works, but I will explain here how to translate a
                number from the base-2 numeral system (binary) to our beloved
                base-10 numeral system (decimal), which is that "normal" number
                you speak of.
              </p>
              <div class="sidenote">
                <p>
                  If you didn't realize this already, "a base or radix is the
                  number of different digits or combination of digits and
                  letters that a system of counting uses to represent numbers."
                </p>
                <p>Therefore...</p>
                <ul>
                  <li>
                    Binary is base 2 because each digit can only be one of two
                    things: 0 or 1.
                  </li>
                  <li>
                    Decimal is base 10 because there are 10 options for each
                    digit: 0-9.
                  </li>
                  <li>
                    Hexadecimal is base 16 because there are 16 options for each
                    digit: 0-9 plus a-f.
                  </li>
                </ul>
              </div>
              <p>
                In a binary system, each occurence of the digit 1 represents
                2<sup>n</sup>, where n is the 0-indexed position of the digit
                starting from the <em>end/right-hand side</em> of a string of 0s
                and 1s.
              </p>
              <p>The digit 0, on the other hand, always means 0.</p>
              <div class="sidenote">
                <p>
                  Technically speaking, both 1s and 0s are treated the same way
                  - they are multiplied by 2<sup>n</sup>. But anything multipled
                  by 0 is 0, and anything multiplied by 1 is itself, hence my
                  simplified explanation above.
                </p>
              </div>
              <p>With that in mind, let's translate 011001 into base-ten.</p>
              <p>
                That's 0 + 2<sup>4</sup> + 2<sup>3</sup> + 0 + 0 +
                2<sup>0</sup>, which is 0 + 16 + 8 + 0 + 0 + 1, which is 25.
              </p>
              <p>
                You see that the role of the first digit from the right as
                2<sup>0</sup>, which is 1, allows us to represent odd numbers.
              </p>
              <h3>How do you add and subtract binary numbers?</h3>
              <p>
                It's actually pretty easy if you don't think about it too hard.
                When you add two 1s together, use the same system of carrying
                the overflow digit that you learned in elementary school. A 2 is
                impossible, but luckily there's an easy way to get that desired
                value - just shift that 1 one place to the left.
              </p>
              <pre class="code syntax"><code>  10
  10 +   &lt;--- 2 + 2 = 4
  ----
 100            
            
 10110 
 10101 +  &lt;--- 22 + 21 = 43
-------
101011</code></pre>
              <p>
                Subtracting is much the same - you literally subtract the digits
                in the corresponding places, and when you need to "borrow", you
                do the subtraction as if it were addition (for the the first
                borrow-requiring pair, at least), and continue borrowing as long
                as needed.
              </p>

              <pre class="code syntax"><code>  <span class = "hghlt">1</span>0
  01 -   &lt;--- 2 - 1 = 1. The first 0 - 1 requires borrowing from
  ----        the highlighted digit, which then becomes 0. 0 - 0 = 0.
  01            
            
 1000 
 0111 -  &lt;--- 8 + 7 = 1. 
-------
 0001
</code></pre>
              <p>
                Still, this can be difficult to explain and really understand
                (i.e. you thought about it too hard). Let's take a look at the
                second example, 8 - 7.
              </p>
              <ol>
                <li>
                  The first/most rightward top digit, 0, simply cannot handle
                  subtracting 1 on its own. So it needs to borrow a 1 from its
                  left neighbor, which is worth 2<sub>10</sub> (just like the
                  way borrowing works in decimal - you may only be short by 3
                  but you must borrow 10, or some factor of 10). I've noted this
                  need as an "n" above the digit.
                  <pre class="code syntax"><code>                    n  
minuend    1  0  0  0 
subtrahend 0  1  1  1
</code></pre>
                </li>
                <li>
                  But place 2 has nothing - it itself has to borrow to handle
                  its own subtraction AND lending to a lower significand. I've
                  noted this need as a capital N.
                  <pre class="code syntax"><code>                 N  n  
minuend    1  0  0  0 
subtrahend 0  1  1  1
</code></pre>
                </li>
                <li>
                  Same story - place 3 has nothing - it itself has to borrow to
                  handle its own subtraction AND lending to a lower significand.
                  <pre class="code syntax"><code>              N  N  n  
minuend    1  0  0  0 
subtrahend 0  1  1  1
</code></pre>
                </li>
                <li>
                  Finally, we get to place 4, which is able to spare a digit
                  because it itself is 1 and the subtrahend is 0. It gives
                  itself over to the asking digit to its right.
                  <pre class="code syntax"><code>           0     n  n  
minuend   <span class = "hghlt"> <del>1</del>  10</span> 0  0 
subtrahend 0  1  1  1
</code></pre>
                </li>
                <li>
                  <p>
                    But before place 3 can do that subtraction, it has to
                    provide for its own needy child (to its right) first. So it
                    gives away the entirety of the value assigned to its place
                    in the binary order (that's all it knows how to do). The
                    third place in a binary number, reading right to left of
                    course, i.e. 2<sup>2</sup>, is worth 4. So it will give away
                    4 to place two.
                  </p>
                  <p>
                    But because it itself is now double what that digit can
                    actually hold, due to its borrow - it borrowed 8 - then by
                    giving away 4 it is halved. We can abstract all this halving
                    logic by thinking of the bloated borrower as having 10 (i.e.
                    2<sub>10</sub>), and then being halved to 1 (i.e.
                    1<sub>10</sub>), even if the actual values are much greater.
                  </p>
                  <pre class="code syntax"><code>           0  1     n  
minuend    <del>1</del>  <span class = "hghlt"><del>10</del> 10</span> 0
subtrahend 0  1  1  1
</code></pre>
                </li>
                <li>
                  Same story with Digit 2 - before it takes care of itself, its
                  gotta take care of the child. And that child is lucky -
                  because it is the last in the chain, it has no needy children
                  of its own to feed. Therefore the buck stops here and now you
                  have your answer. The problem is essentially reduced to 2<sub
                    >10</sub
                  >
                  - 1<sub>10</sub>.
                  <pre class="code syntax"><code>           0  1  1    
minuend    <del>1</del>  <del>10</del> <span class = "hghlt"><del>10</del> 10</span>
subtrahend 0  1  1  1
---------------------
           0  0  0  1
</code></pre>
                  <p>Here it is in base 10:</p>
                  <pre class="code syntax"><code>              N  N  n  
minuend    8  0  0  0 
subtrahend 0  4  2  1
</code></pre>
                  <pre class="code syntax"><code>           0     n  n  
minuend   <span class = "hghlt"> <del>8</del>  8</span>  0  0 
subtrahend 0  4  2  1
</code></pre>
                  <pre class="code syntax"><code>           0  4     n  
minuend    <del>8</del>  <span class = "hghlt"><del>8</del>  4</span>  0
subtrahend 0  4  2  1
</code></pre>
                  <pre class="code syntax"><code>           0  4  2    
minuend    <del>8</del>  <del>8</del>  <span class = "hghlt"><del>4</del>  2</span>
subtrahend 0  4  2  1
---------------------
           0  0  0  1
</code></pre>
                </li>
              </ol>
              <p>
                Note that this is the exact same process as the long subtraction
                you learned in school, which is actually harder to explain
                logically than just rote. Let's do some base 10. You know that
                when you are subtracting from 0 for the second-plus time in a
                row you cross out the 0 and use a 9, but why? It's because of
                that same borrow-to-lend logic we used for the middle two digits
                of the above binary operation. It has to borrow 10 first, and
                then, before it can use that, it has to give 1 away to its needy
                child, which makes it 9. 0 becomes 10 after a borrow which
                becomes 9 after lending to the child.
              </p>
              <pre class="code syntax">    0  9  9  9 10
    <code><del>1</del>  <del>0</del>  <del>0</del>  <del>0</del>  <del>0</del>
       9  9  9  9
---------------------
                1
</code></pre>

              <p>
                Here's a good article on
                <a href="http://mathforum.org/library/drmath/view/68581.html"
                  >base 10 long subtraction</a
                >, and here's one on
                <a href="https://www.wikihow.com/Subtract-Binary-Numbers"
                  >binary subtraction</a
                >, with a pretty helpful graphic below:
              </p>
              <img src="_images/general_binary_subtraction.png" />
              <h3>What About Fractional Numbers?</h3>
              <p>
                You can still represent fractional numbers in binary, provided
                that you prepend them with a "0."
              </p>
              <p>
                Then, anything after the decimal point or "zero point" follows
                the rules of of negative exponentation - that is, a number
                raised to a negative power is equal to 1/base<sup>power</sup>.
              </p>
              <p>
                With that in mind, let's translate 0.011001 into base-ten,
                accounting for all digits in this string, even the one to the
                left of the decimal point.
              </p>
              <p>
                That's 0 + 0 + 2<sup>-2</sup> + 2<sup>-3</sup> + 0 + 0 +
                2<sup>-6</sup>, which is 0 + 0 + 0.25 + 0.125 + 0 + 0 +
                0.015625, which is 0.390625.
              </p>
              <h3>What About Negative Numbers?</h3>
              <p>
                There are several ways of going about this, but I'll just name
                two:
              </p>
              <ol>
                <li>
                  <p>
                    <strong>Sign-and-magnitude:</strong> This is the way easiest
                    for your base-10 brain to grasp. In decimal format, you
                    represent a negative number by putting a - sign to its left.
                    In binary, you would simulate that by reserving the
                    left-most bit for telling whether a number is positive (0)
                    or negative (1).
                  </p>
                  <p>
                    So, that's the sign. What about "magnitude"? That refers to
                    the remaining digits, because magnitude is also known as
                    absolute value. "A consequence of using signed magnitude
                    representation is that there are two ways to represent zero,
                    00000000 (0) and 10000000 (−0)."
                  </p>
                  <p>
                    As you can guess, reserving your left-most bit for a sign
                    means that your absolute value possibilities are cut in
                    half. While an 8-bit integer can represent a number as high
                    as 255 (not 256, because 0 is included), then a 7-bit signed
                    integer can represent values between -127 and 127, which is
                    equivalent to 255 distinct values. This is what would be
                    called a <em>signed</em> integer.
                  </p>
                  <p>
                    There is a problem with this method, though - "it is not
                    very practical for arithmetic purposes." For instance, how
                    would you add a negative number to any number? You would
                    have to follow one set of addition rules for all the digits
                    but the left one, and then invent some new exception rule
                    for that last digit, because it doesn't actually signify a
                    number.
                  </p>
                </li>
                <li>
                  <p>
                    <strong>Twos complement:</strong> This is apparently the
                    "representation used in most current computing devices" and
                    is quite cool. Like sign-and-magnitude, there is a left-most
                    digit that corresponds to negativity. But unlike
                    sign-and-magnitude, that digit is a negative <em>value</em>,
                    not just a negative <em>sign</em>.
                  </p>
                  <p>
                    Let's take the following 3-bit signed integer. The left-most
                    bit is equal to -4, rather than 4, while the bits to the
                    right are positive.
                  </p>
                  <pre
                    class="code syntax"
                  ><code>001 &lt;- this is positive 1 (0 + 0 + 1)
111 &lt;- this is negative 1 (-4 + 2 + 1)

010 &lt;- this is positive 2 (0 + 2 + 0)
110 &lt;- this is negative 2 (-4 + 2 + 0)
</code></pre>
                  <p>
                    What's the logic here in converting a number to negative?
                  </p>

                  <ol>
                    <li>
                      Flip all the digits, i.e. all 0s become 1s, all 1s become
                      0s.
                      <pre
                        class="code syntax"
                      ><code>0100 (4 (0 + 4 + 0 + 0)) -> 1011 (-5 (-8 + 0 + 2 + 1))
</code></pre>
                    </li>
                    <li>
                      Now add 1 to the flipped number (in this case, digits need
                      to be shifted left to accommodate this) and ignore any
                      overflow that happens at the left-most digit, because,
                      really, the left-most digit is the end of the line anyway.
                      This number is called the two's complement. This
                      flipping-and-adding-1 means that the right-most digit of a
                      binary number will always match its two's complement.
                      <pre
                        class="code syntax"
                      ><code>0100 (4 (0 + 4 + 0 + 0)) -> 1100 (-4 (-8 + 4 + 0 + 0))
</code></pre>
                    </li>
                  </ol>
                </li>
              </ol>
            </div>
          </li>

          <li id="math_nullipotent-idempotent">
            <div class="question toDo">
              <p>
                What do the terms "nullipotent" and "idempotent" mean, and how
                do they relate to REST?
              </p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <h3 id="unixSection">UNIX / Linux / OSs</h3>

          <li id="unix_whatIsIt">
            <div class="question">
              <p>What is UNIX?</p>
            </div>

            <div class="answer">
              <p>
                UNIX is the type of operating system installed on all Macintosh
                computers. "Unix is a family of multitasking, multiuser computer
                operating systems that derive from the original AT&amp;T Unix,
                development starting in the 1970s... Unix systems are
                characterized by a modular design that is sometimes called the
                "Unix philosophy", meaning that the operating system provides a
                set of simple tools that each perform a limited, well-defined
                function, with a unified filesystem as the main means of
                communication and a shell scripting and command language to
                combine the tools to perform complex workflows."
              </p>
            </div>
          </li>
          <li id="cli_unixFilesystem">
            <div class="question">
              <p>
                All UNIX filesystems are organized within a single tree
                structure underneath one root directory. True or false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="cli_unixRoot">
            <div class="question">
              <p>
                In a UNIX filesystem, what does a forward slash by itself (/)
                signify?
              </p>
            </div>

            <div class="answer">
              <p>
                This signifies the root directory of the filesystem. The root
                directory "is the directory in which all other directories,
                including their subdirectories, and files reside."
              </p>
            </div>
          </li>

          <li id="cli_binFolder">
            <div class="question">
              <p>
                In the root directory of my Mac there is a folder called "bin".
                What is that for?
              </p>
            </div>

            <div class="answer">
              <p>
                /bin contains basic commands/programs needed for a minimal
                working environment on booting the machine. The bash shell, as
                well as its commands, are located in this directory.
              </p>
              <p>
                bin is short for "binaries", which is a term used to refer to
                compiled, executable programs.
              </p>
              <p>
                "/bin is a standard subdirectory of the root directory in
                Unix-like operating systems that contains the executable (i.e.,
                ready to run) programs that must be available in order to attain
                minimal functionality for the purposes of booting (i.e.,
                starting) and repairing a system."
              </p>
            </div>
          </li>

          <li id="cli_usrFolder">
            <div class="question">
              <p>
                In the root directory of my Mac there is a folder called "usr".
                What is that for?
              </p>
            </div>

            <div class="answer">
              <p>
                As
                <a href="https://askubuntu.com/a/135679"
                  >this excellent explanation says</a
                >, "/usr is a place for system-wide, read-only files. So all
                your installed software goes there. It does not duplicate any
                names of / except /bin and /lib, but, originally, with a
                different purpose: /bin, /lib is only for binaries and libraries
                required for booting, while /usr/bin, /usr/lib is for all the
                other executables and libraries."
              </p>

              <p>
                "In the original Unix implementations, /usr used to contain the
                user home directories, e.g. instead of /home/jeffgore, you would
                have /usr/jeffgore. The original intention was for the directory
                to be called ´user´ with the connotation "everything user
                related"."
              </p>
            </div>
          </li>
          <h3 id="dsAndAlgos">Data Structures and Algorithms</h3>

          <li id="cs_algorithms">
            <div class="question toComplete">
              <p>What is an algorithm?</p>
            </div>

            <div class="answer">
              <p>
                "an unambiguous specification of how to solve a class of
                problems."
              </p>
            </div>
          </li>

          <li id="cs_defineBigO">
            <div class="question toDo">
              <p>What is Big O notation?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="cs_defineADT">
            <div class="question">
              <p>What is an abstract data type (ADT)?</p>
            </div>

            <div class="answer">
              <p>
                An abstract data type (ADT) is "a description of information,
                how that information is collected, and performable operations on
                that information." Examples:
              </p>
              <ul>
                <li>
                  A <strong>list</strong> is an ordered collection of elements,
                  which you can add to or read from.
                </li>
                <li>
                  A <strong>dictionary</strong> is a set of key-value pairs,
                  where you can get or set a value by key.
                </li>
              </ul>
              <p>
                Note that an ADT says nothing about programs, memory, procedure
                - there's no code, it's just an interface, a concept, a general
                description independent of implementation.
              </p>
              <p>
                "You can think of an ADT (Abstract Data Type) as collection of
                operations (i.e. add, remove, insert that define how the ADT
                behaves on a collection of data elements. At the ADT level, the
                exact way that the data is stored is hidden; hence the Abstract
                in Abstract Data Type."
              </p>
            </div>
          </li>

          <li id="cs_defineDS">
            <div class="question">
              <p>What is a data structure (DS)?</p>
            </div>

            <div class="answer">
              <p>
                A data structure (DS) is "a specific programmatic solution for
                storing, referencing, and accessing data in computer memory."
              </p>
              <p>
                A data structure <em>implements</em> an ADT - i.e., take the
                abstract concept of a "list" and realize it in actual code. An
                ADT can be implemented via more than one DS.
              </p>
              <p>
                Take, for example, the idea of a queue - i.e. a line. Queues are
                abstract data types. They can be implemented with an array-like
                data structure, or they can be implemented with a linked list DS
                (we'll get to Linked Lists later.)
              </p>
            </div>
          </li>

          <li id="cs_adtProf_stack">
            <div class="question">
              <p>Describe the Stack ADT.</p>
            </div>

            <div class="answer">
              <p>
                A stack is an abstract data type that "serves as a collection of
                elements, with two principal operations: push, which adds an
                element to the collection, and pop, which removes the most
                recently added element that was not yet removed."
              </p>
              <p>
                "The order in which elements come off a stack gives rise to its
                alternative name, LIFO (last in, first out)."
              </p>
              <p>
                In a stack, you can only add to the top of the stack, or remove
                from the top of stack. Elements have no index; you can't access
                them in the middle of the stack.
              </p>
              <p>
                In a stack, elements are sorted by insertion order. A good
                example of a use case for a stack is an Undo feature. An
                application can store activities performed on a stack and
                clicking 'Undo" pop the last activity off of the stack.
              </p>
            </div>
          </li>

          <li id="cs_adtProf_queue">
            <div class="question">
              <p>Describe the Queue ADT.</p>
            </div>

            <div class="answer">
              <p>
                A queue is an abstract data type which resembles a line of
                people. People/elements are helped/processed at the front of the
                line and new people/elements can only be added at the back of
                the line.
              </p>
              <p>
                Like a stack, a queue is a collection of elements with no
                indexes - i.e. you can't just grab any element, just like the
                5th guy in line shouldn't be able to be helped before the first
                one. Therefore the queue, like a stack, is sorted in insertion
                order.
              </p>
              <ul>
                <li>
                  Removing an element from the front of a queue is called a
                  dequeue.
                </li>
                <li>
                  Adding an element to the end of queue is called an enqueue.
                </li>
              </ul>
              <p>Example: a print queue.</p>
            </div>
          </li>

          <li id="cs_adtProf_list">
            <div class="question">
              <p>Describe the List ADT.</p>
            </div>

            <div class="answer">
              <p>
                "In computer science, a list or sequence is an abstract data
                type that represents a countable number of ordered values, where
                the same value may occur more than once." Put another way, "a
                list is an ordered collection of elements, which you can add to
                or read from."
              </p>
              <p>
                This differs from a Set in that a Set is an unordered collection
                of distinct elements.
              </p>
              <div class="sidenote">
                <p>
                  Stacks and queues are "list-like", essentially less abstract
                  ADTs (ha) that inherit the core qualities of a list with some
                  added limitations (and benefits).
                </p>
              </div>
              <p>Potential operations of a list:</p>
              <ul>
                <li>Appending an entity to a list.</li>
                <li>Prepending an entity to a list.</li>
                <li>Inserting into the list at position X.</li>
                <li>Testing whether or not a list is empty.</li>
              </ul>
              <p>Potential data structure implementations of a list:</p>
              <ul>
                <li>Array (usually variable length or dynamic)</li>
                <li>Linked List (singly or doubly linked)</li>
              </ul>
              <p>
                By more strict standards a List ADT would have the properties
                `first` and `rest`, which refer to the first element of the
                list, and the rest of the list. As you can guess, the rest of
                the list is itself a list. Here's how a list of integers could
                be represented in Java:
              </p>
              <pre class="JS code syntax"><code>public class IntList {
   public int first;
   public IntList rest;
   public IntList(int f, IntList r) {
      first = f;
      rest = r;
   }
}
</code></pre>
            </div>
          </li>

          <li id="cs_adtProf_graph">
            <div class="question">
              <p>
                Describe the Graph ADT and the different data structures that
                can be used to implement it.
              </p>
            </div>

            <div class="answer">
              <p>
                A graph is a collection of nodes/vertices with "edges"
                (connecting lines) between some of the nodes/vertices. It can
                look something like this:
              </p>
              <img src="_images/cs_adtProf_graph.gif" />
              <p>
                The image above displays something called an
                <em>undirected graph</em>. That means that if an edge exists
                between two vertices, then the relationship goes both ways - A
                points to C, and C points to A. This is as opposed to a
                <em>directed graph</em>, which looks something like this:
              </p>
              <img src="_images/cs_adtProf_graph_directed.png" />
              <p>
                As you can see, the edges have direction, so the connections
                between vertices are one-way only.
              </p>
              <p>
                Now let's talk about the data structures used to implement
                graphs.
              </p>
              <h3>1. Objects and Pointers</h3>
              <p>
                I believe this may be similar to an "incidence list", or
                something like that. Here's some code:
              </p>
              <pre class="JS code"><code class="JS">Vertex a = new Vertex(1);
Vertex b = new Vertex(2);
Edge edge = new Edge(a,b, 30); // an edge between a and b with weight 30 

https://stackoverflow.com/questions/5886274/comparing-object-graph-representation-to-adjacency-list-and-matrix-representatio
http://www.algorithmist.com/index.php/Graph_data_structures#Incidence_List
</code></pre>

              <h3>2. Adjacency List</h3>
              <p>
                In an adjacency list, "every vertex (or node) stores a list of
                adjacent vertices. In an undirected graph, an edge like (a, b)
                would be stored twice: once in a's adjacent vertices and once in
                b's adjacent vertices." Here's a nice visual representation of
                an adjacency list: "for each vertex i, store an array of the
                vertices adjacent to it."
              </p>
              <img src="_images/cs_adtProf_graph_adjacencyList.png" />
              <p>
                Here's an example of how a LinkedIn profile might be represented
                as a vertex in a graph, using an adjacency list to store its
                friends:
              </p>
              <pre
                class="JS code"
              ><code class="JS">class Network { <span class = "comment">// i.e. Graph</span>
  constructor(people) {
    people <span class = "comment">// these would all be Node objects</span>
  }
}
                  
class Person { <span class = "comment">// i.e. Vertex</span>
  constructor(value, friends) {
    value,
    friends
  }
}

<span class = "comment">/* here's how the above graphic could look */
</span>

profileInstantiated {
  value: 'Jeff Gore'
  friends: [RefToNodeObj{...}, RefToNodeObj{...}]
}
</code></pre>
              <p>
                If you want to think more generally than "friends", then you
                could call connected nodes "neighbors." Generally, Node classes
                are used, but using the adjacency list construction you could
                actually represent an entire graph as a map, in which the
                vertices are the keys and the list of neighbors are the values:
              </p>
              <pre class="JS code"><code class="JS">const graph = {
  a: ['a', 'c'],
  c: ['r', 's'],
  r: ['a'],
  s: []
}

doesPathExist(graph, 'a', 'a') // true
doesPathExist(graph, 'c', 'c') // true
doesPathExist(graph, 'r', 's') // true
doesPathExist(graph, 's', 'a') // false

<span class = "comment">https://github.com/FullstackAcademy/technical-interview-prep/blob/master/algorithms/3-data-structures/4-solve-graph.md</span>
</code></pre>

              <h3>3. Adjacency Matrix</h3>
              <p>
                "An adjacency matrix is an NxN boolean matrix (where N is the
                number of nodes), where a true value at matrix [i][j] indicates
                an edge from node i to node j . (You can also use an integer
                matrix with 0s and 1s.) In an undirected graph, an adjacency
                matrix will be symmetric. In a directed graph, it will not
                (necessarily) be." Here's an example of how that might look:
              </p>
              <img src="_images/cs_adtProf_graph_matrix.png" />
              <p>
                The relationship between rows and columns here is that rows
                point to columns. So if we look at row 0, and we look at column
                2, the value at that intersection answers the question: does
                Vertex 0 point to Vertex 2? And the answer is no. But the
                reverse is true.
              </p>
            </div>
          </li>

          <li id="cs_graphVsTree">
            <div class="question">
              <p>What are trees and how do they differ from graphs?</p>
            </div>

            <div class="answer">
              <p>
                True. "A tree is actually a type of graph, but not all graphs
                are trees. Simply put, a tree is a connected graph without
                cycles."
              </p>
              <div class="sidenote">
                <p>
                  What is a cycle? In short, a cycle within a graph means that a
                  node is able to connect to itself. In the below example of a
                  directed graph, there are two ways for A to cycle back to
                  itself:
                </p>
                <ul>
                  <li>
                    The obvious one, which is the circular/loopy edge from a to
                    itself. This is actually called a "loop", which is a subset
                    of a cycle.
                  </li>
                  <li>
                    The less obvious one, which is that a points to c which
                    points to r which points back to a.
                  </li>
                </ul>
                <img src="_images/cs_graphVsTree_cycle.png" />
              </div>
              <p>Here are some core properties of trees:</p>
              <ul>
                <li>Each tree has a root node.</li>
                <li>
                  The root node has zero or more child nodes. (In a
                  <em>binary</em> tree, it has 0 - 2 child nodes; these are
                  often referred to as "left child" and "right child")
                </li>
                <li>
                  Each child node is itself a tree, and therefore has zero or
                  more child nodes, and so on. A node is called a "leaf" node if
                  it has no children.
                </li>
                <li>
                  Because this is just a general tree, and not a specific type,
                  there are variables:
                  <ul>
                    <li>nodes may or may not be in a particular order,</li>
                    <li>they could have any data type as values,</li>
                    <li>
                      and they may or may not have links back to their parent
                      nodes.
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </li>
          <li id="cs_typesOfBSTTraversal">
            <div class="question">
              <p>
                Describe what is meant by in-order, post-order, and pre-order
                traversal of a binary tree structure, and how these relate to
                depth- or breadth-first search.
              </p>
            </div>

            <div class="answer">
              <p>
                Those travels can all be categorized as depth-first - they all
                concern exploring one entire branch before another. The
                difference between them lies in the order that the parent node
                is accessed.
              </p>
              <p>
                The following is excerpted from Cracking the Coding Interview
                with an example thrown in. The example tree will look like this:
              </p>
              <pre class="code syntax"><code>const bst = new BST(12)
                .insert(5)
                .insert(2)
                .insert(5)
                .insert(15)
                .insert(13)
                .insert(22)
                .insert(1)
                .insert(14)
  
      12
     /   \
    5     15
   / \   /  \
  2   5 13  22
 /       \
1         14</code></pre>
              <blockquote>
                <p>
                  In-order traversal means to "visit" (often, print) the left
                  branch, then the current node, and finally, the right branch.
                </p>
                <pre
                  class="code syntax"
                ><code>1 void inOrderTraversal(TreeNode node) {
2   if (node != null) {
3     inOrderTraversal(node.left)
4     visit(node)
5     inOrderTraversal(node.right)
6   }
7 }

Print order: 1, 2, 5, 5, 12, 13, 14, 15, 22</code></pre>
                <p>
                  When performed on a binary search tree, it visits the nodes in
                  ascending order (hence the name "in-order").
                </p>
                <p>
                  Pre-order traversal visits the current node before its child
                  nodes (hence the name "pre-order").
                </p>
                <pre
                  class="code syntax"
                ><code>1 void preOrderTraversal(TreeNode node) {
2   if (node != null) {
3     visit (node) j
4     preOrderTraversal(node.left)j
5     preOrderTraversal(node.right)j
6   }
7 }

Print order: 12, 5, 2, 1, 5, 15, 13, 14, 22</code></pre>
                <p>
                  In a pre-order traversal, the root is always the first node
                  visited.
                </p>
                <div class="sidenote">
                  <p>
                    Interesting sidenote: you can reconstruct a binary search
                    tree from its preorder traversal result array.
                  </p>
                  <blockquote>
                    <p>
                      We can start with the first element arr[0] and divide the
                      rest of the array in two parts for the left and the right
                      subtree. The element arr[1] will be root of the left
                      subtree, the problem arises in finding the right subtree.
                    </p>
                    <p>
                      The root of the right subtree (right child) could be found
                      by performing a modified binary search such that the
                      element arr[i] has an element lesser then arr[0] on its
                      left while itself is greater then equal to arr[0]. This
                      binary search would be performed on elements to the right
                      of arr[0].
                    </p>
                  </blockquote>
                </div>
                <p>
                  Post-order traversal visits the current node after its child
                  nodes (hence the name "post-order").
                </p>
                <pre
                  class="code syntax"
                ><code>1 void postOrderTraversal(TreeNode node) {
2   if (node != null) {
3     postOrderTraversal(node.left)j
4     postOrderTraversal(node.right)
5     visit(node)
6   }
7 }

Print order: 1, 2, 5, 5, 14, 13, 22, 15, 12</code></pre>
                In a post-order traversal, the root is always the last node
                visited.
              </blockquote>
            </div>
          </li>

          <li id="synprof_binarySearchTree">
            <div class="question">
              <p>What is a binary search tree (BST)?</p>
            </div>

            <div class="answer">
              <p>
                BSTs are an abstract data type that can be implemented in
                different ways. "Binary search trees keep their keys in sorted
                order, so that lookup and other operations can use the principle
                of binary search: when looking for a key in a tree (or a place
                to insert a new key), they traverse the tree from root to leaf,
                making comparisons to keys stored in the nodes of the tree and
                deciding, on the basis of the comparison, to continue searching
                in the left or right subtrees."
              </p>
              <p>
                "A binary search tree is a rooted binary tree, whose internal
                nodes each store a key (and optionally, an associated value) and
                each have two distinguished sub-trees, commonly denoted left and
                right. The tree additionally satisfies the binary search
                property, which states that the key in each node must be greater
                than or equal to any key stored in the left sub-tree, and less
                than or equal to any key stored in the right sub-tree."
              </p>
              <p>
                Here's an example of a BST from Wikipedia. This could also be
                seen as an illustration of the first data structure solution,
                which would be through objects with pointers:
              </p>
              <img src="_images/synprof_binarySearchTree.svg" />
              <p>
                Here's how that tree would look in the second data structure
                implementation, via an array:
              </p>
              <pre
                class="JS code"
              ><code class="JS">[8, 3, 10, 1, 6, null, 14, null, null, 4, 7, null, null, 13, null]</code></pre>
              <p>The pattern being:</p>
              <pre
                class="JS code syntax"
              ><code class="JS">[root, left, right, left's left, left's right, right's left, right's right, etc.]</code></pre>
              <p>Or more simply:</p>
              <pre
                class="JS code syntax"
              ><code class="JS">[root, child, child, grandchild, grandchild, grandchild, grandchild, etc.]</code></pre>
              <p>
                Note that each node is itself a tree, and these trees can only
                have a maximum of two children. You may be tempted to call each
                number in the tree a "value", but it's more accurate to say that
                it's a "key".
              </p>
              <p>
                In relation to its two children, a child whose key is less than
                the key of the parent is always found to the left. Likewise, a
                child whose key is greater than the key of the parent is always
                found to the right.
              </p>
              <p>What about duplicate keys?</p>
              <p>
                You can choose to handle duplicates in three practical ways:
              </p>
              <ol>
                <li>Disallow them.</li>
                <li>
                  Implement the following insertion logic: left &lt;= root &lt;
                  right (preferred, this is used by CTCI)
                </li>
                <li>
                  Implement the following insertion logic: left &lt; root &lt;=
                  right
                </li>
              </ol>
              <div class="sidenote">
                <p>
                  See
                  <a
                    href="https://stackoverflow.com/questions/300935/are-duplicate-keys-allowed-in-the-definition-of-binary-search-trees"
                    >this Stack Overflow discussion</a
                  >
                  for more details on duplicates. Here's an interesting excerpt:
                </p>
                <p>
                  "Certainly, allowing duplicates adds complexity. If you use
                  the definition "left &lt;= root &lt; right" and you have a
                  tree like:
                </p>
                <pre><code>      3
    /   \
  2       4</code></pre>
                then adding a "3" duplicate key to this tree will result in:"
                <pre><code>      3
    /   \
  2       4
    \
     3</code></pre>
              </div>
              <p>
                Let's look at a code implementation of this tree (using the
                linked node DS) along with its insert method:
              </p>
              <pre class="JS code"><code class="JS">class BinarySearchTree {

  constructor(val) {
    this.value = val;
    this.left = null;
    this.right = null;
  }

  insert(val) {
    <span class = "comment">// the purpose of this function is to insert, so no matter what, 
    // we're going to be creating a new tree.</span>
    const newTree = new BinarySearchTree(val);
    <span class = "comment">// Let's give this.value a nickname to make it easier to compare to
    // the value to be inserted.</span>
    let rootVal = this.value;
    <span class = "comment">// If the value to be inserted is less than the current node's value, 
    // let's go left.</span>
    if (val &lt; rootVal) {
      <span class = "comment">// We have to entertain the possibility that there may already be a 
      // child occupying that left spot. If there IS a left child, then we 
      // can't insert there, instead, we'll have to go down to that child and 
      // see if there are any children slots open.</span>
      if (this.left) {
        this.left.insert(val);
      } else {
        this.left = newTree;
      }
    } else if (val &gt;= rootVal) {
<span class = "comment">      // See above for the same exact logic.
</span>      if (this.right) {
        this.right.insert(val);
      } else {
        this.right = newTree;
      }
    }
    return this; <span class = "comment">// for chaining</span>
  }
  
}
</code></pre>
            </div>
          </li>

          <li id="synprof_tyepsOfBinarySearchTree">
            <div class="question">
              <p>What are the different types of binary search tree?</p>
            </div>

            <div class="answer">
              <p>
                There are different attributes or adjectives you can use to
                describe a binary search tree, based on its levels and/or the
                children of each node. Let's get into four main characteristics.
                Note that the first three (full, complete, and balanced) are not
                supersets of each other.
              </p>

              <ul>
                <li>
                  <p>
                    <b>Full binary tree</b>: This is a binary tree in which
                    every node has 0 or 2 children. In other words, there are no
                    nodes with just 1 child.
                  </p>
                  <p>
                    Cruel way to remember: an only child does not have a "full"
                    life.
                  </p>
                </li>
                <li>
                  <p>
                    <b>Complete binary tree</b>: This is a binary tree in which
                    every level except the last level (and by last, I mean,
                    furthest from the root) is full, AND all the nodes in the
                    last level are as far to the left as possible.
                  </p>
                  <p>
                    Lame way to remember: once your Western education is
                    "complete", you know to write top to bottom, left to right.
                  </p>
                </li>
                <li>
                  <p>
                    <b>Balanced binary tree</b>: This is a binary tree in which
                    the left and right subtrees of every node differ in height
                    by no more than 1.
                  </p>

                  <p>
                    Lame way to remember: imagine the scale held by Lady
                    Justice. It can handle a slight difference in injustice
                    (just 1 unit, whatever that means, but anything beyond that
                    will cause it to topple due to imbalance.)
                  </p>
                </li>
                <li>
                  <p>
                    <b>Perfect binary tree</b>: This is a binary tree in which
                    all nodes have two children, except the nodes on the last
                    level, which have zero children.
                  </p>

                  <p>
                    Way to remember: symmetry is perfection. Another lame way:
                    if you're going to have children, the "perfect" number is 2,
                    otherwise don't have any at all.
                  </p>

                  <p>
                    Perfect trees are also therefore complete (filled out top to
                    bottom, right to left), full (no nodes with just one child),
                    and balanced (no difference in height greater than 1 between
                    any two subtrees)
                  </p>
                </li>

                <li>
                  <p>
                    <b>Degenerate binary tree</b>: This is a binary tree in
                    which all nodes have one child, except for the final node,
                    which would obviously have zero children. This would
                    resemble one long, possibly scraggly looking branch.
                  </p>

                  <p>
                    Way to remember: if you don't have options, then your life
                    has degenerated.
                  </p>
                </li>
                <p>Here is an image which shows all 5 types:</p>
                <img src="_images/synprof_tyepsOfBinarySearchTree.png" />
              </ul>
            </div>
          </li>

          <li id="cs_dsProf_trie">
            <div class="question">
              <p>What is a trie (DS)?</p>
            </div>

            <div class="answer">
              <p>
                "A trie is a variant of an n-ary tree in which characters are
                stored at each node. Each path down the tree may represent a
                word."
              </p>
              <p>
                "In computer science, a trie, also called digital tree, radix
                tree or prefix tree is a kind of search tree—an ordered tree
                data structure used to store a dynamic set or associative array
                where the keys are usually strings. Unlike a binary search tree,
                no node in the tree stores the key associated with that node;
                instead, its position in the tree defines the key with which it
                is associated. All the descendants of a node have a common
                prefix of the string associated with that node, and the root is
                associated with the empty string."
              </p>
              <div class="sidenote">
                <p>
                  Tries were first described by René de la Briandais in 1959.The
                  term trie was coined two years later by Edward Fredkin, who
                  pronounces it /ˈtriː/ (as "tree"), after the middle syllable
                  of retrieval. However, other authors pronounce it /ˈtraɪ/ (as
                  "try"), in an attempt to distinguish it verbally from "tree".
                </p>
              </div>
              <p>
                Tries can store strings in a compact way by reusing prefixes.
                Hence you can see why they'd be good for predictive string
                search (i.e., type into Google search bar and it pops up with
                suggestions). Here's a visualization of a trie:
              </p>
              <img src="_images/cs_dsProf_trie.png" />
              <p>
                "The * nodes (sometimes called "null nodes") are often used to
                indicate complete words. For example, the fact that there is a *
                node under MANY indicates that MANY is a complete word. The
                existence of the MA path indicates there are words that start
                with MA."
              </p>
              <p>
                This illustration above illustrates a trie that knows about the
                words 'many', 'my', 'lie', and 'a'.
              </p>
              <p>
                "While a hash table can quickly look up whether a string is a
                valid word, it cannot tell us if a string is a prefix of any
                valid words. A trie can do this very quickly. How quickly? A
                trie can check if a string is a valid prefix in 0 (K) time,
                where K is the length of the string."
              </p>
              <p>
                So, how would you implement this thing in code? See
                ex_trie_20180824.js.
              </p>
            </div>
          </li>

          <li id="cs_suffixTrie">
            <div class="question toComplete">
              <p>What is a "suffix trie"? SHOW HOW IT'S BUILT (ALGOEXPERT)</p>
            </div>

            <div class="answer">
              <p>
                Very simply speaking, a normal trie builds prefixes of strings,
                while a suffix trie builds suffixes. Easy enough, right? Well,
                it's actually a little more complicated than that:
              </p>
              <img src="_images/cs_suffixTrie.svg" width="300px" />
              <p>
                A suffix trie "is a compressed trie containing all the suffixes
                of the given text as their keys and positions in the text as
                their values."
              </p>
              <p>
                What is meant by compressed? Well, in your vanilla trie, a trie
                "node" can only hold one character. In a suffix trie, nodes can
                hold multiple characters, with one these nodes being the
                entirety of the string, since that's technically a suffix.
              </p>
              <p>
                In the diagram above, you see that all six suffixes for 'banana'
                are represented:
              </p>
              <ol>
                <li>'a'</li>
                <li>'na'</li>
                <li>'ana' (via 'a')</li>
                <li>'nana' (via 'na')</li>
                <li>'anana' (via 'ana')</li>
                <li>'banana'</li>
              </ol>
              <p>
                In a sense the trie is constructed in reverse. What about those
                curvy lines? Those are suffix links.
                <strong
                  >A suffix link is a link connecting a suffix to the same
                  suffix minus the first character.</strong
                >
                Thre are three shown in the illustration above. I'll go
                left/right, top/down, ordered by the base of the arrow:
              </p>
              <ol>
                <li>'a' has a suffix link to ''</li>
                <li>'na' has a suffix link to 'a'</li>
                <li>'ana' has a suffix link to 'na'</li>
              </ol>
              <p>
                "...note that there is no necessity to put suffix links in a
                suffix tree. They are not part of the definition of a suffix
                tree — they are just special links used by some algorithms that
                construct or use suffix trees."
              </p>
              <p>
                Also, the illustration above may be a little misleading, as not
                all suffix link-employing algorithms use suffix links for single
                character nodes (i.e. 'a' has a suffix link to '')
              </p>
            </div>
          </li>

          <li id="cs_diffBwListAndSet">
            <div class="question">
              <p>
                In computer science terms, what is the difference between a list
                and a set?
              </p>
            </div>

            <div class="answer">
              <p>
                Both a list and a set are abstract data types which describe a
                collection of elements. Lists are often implemented through the
                Array DS or the Linked List DS.
              </p>
              <table>
                <thead>
                  <tr>
                    <td>List</td>
                    <td>Set</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Order matters</td>
                    <td>Unordered</td>
                  </tr>
                  <tr>
                    <td>May contain duplicates</td>
                    <td>Every value is distinct</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </li>

          <li id="cs_disadvantagesOfArray">
            <div class="question">
              <p>What are the disadvantages of using the Array DS?</p>
            </div>

            <div class="answer">
              <p>
                First, inserting an element into a specific position (i.e.
                whether that be splicing or unshifting) or removing an element
                from a specific position OTHER than the end means all the other
                elements' positions after it need to be shifted, which is an
                expensive operation.
              </p>
              <p>
                The second disadvantage is that a true vanilla array (let's put
                aside what engines like V8 might do) has a fixed size when you
                create it, which means that there is usually some unused space.
              </p>
            </div>
          </li>

          <li id="cs_dsProf_linkedList">
            <div class="question">
              <p>Describe the Linked List DS.</p>
            </div>

            <div class="answer">
              <p>
                "A linked list is a sequence of nodes such that each node
                contains a reference - or 'link' to the next node in the list."
                Most commonly, these nodes contain two parts: (1)
                data/value/payload and (2) a reference to another node.
              </p>
              <figure>
                <figcaption>
                  Graphic Depiction of Node In Linked List
                </figcaption>
                <img src="_images/cs_dsProf_linkedList.png" />
              </figure>
              <p>Here's how that list could look in JavaScript:</p>
              <pre class="JS code"><code class="JS">class LinkedList {
  constructor () {
    this.head = null;
    this.tail = null;
  }
  
class Node {
  constructor(info) {
    this.info = info;
    this.next = null;
  }
}

<span class = "comment">/* here's how the above graphic could look */
</span>

NodeObjAt0x1000 {
  info: {name: 'Joe', age: 26, sex: 'male'},
  next: NodeObjAt0x3500
}

NodeObjAt0x3500 {
  info: {name: 'Jeff', age: 32, sex: 'male'},
  next: null
}

LinkedList {
  head: NodeObjAt0x1000 
  tail: NodeObjAt0x3500
}
</code></pre>
              <p>
                Note that the <code>next</code> reference of the last item in a
                linked list is <code>null</code>.
              </p>
              <p>
                Also note that "the first node of a linked list is called the
                head, and the last node is usually called the tail."
              </p>
              <p>
                ALSO note that the above is what is called a "singly-linked"
                list. This means there is only a single link between nodes,
                which is, the <code>next</code> property. In a singly-linked
                list, individual nodes "know" (point to) the node after them,
                but not the one before them. This can be addressed with a
                doubly-linked list, which involves adding a
                <code>prev</code> pointer in addition to <code>next</code>.
              </p>
            </div>
          </li>

          <li id="addToLinkedList">
            <div class="question">
              <p>How would you add a node to a linked list?</p>
            </div>

            <div class="answer">
              <p>
                Assuming your Linked List class has a
                <code>tail</code> property:
              </p>
              <ol>
                <li>
                  Capture the existing tail in a variable so that when this.tail
                  is reassigned, that object is not lost. It's possible the
                  object doesn't exist, but more on that later.
                </li>
                <li>Reassign this.tail to the new Node.</li>
                <li>
                  That existing tail reference - check if it's truthy, i.e., if
                  there actually is a Node there.
                  <ul>
                    <li>
                      If truthy, then reassign that old tail's next property to
                      the new Node, i.e., make that old tail point to the new
                      Node. (Also, if this is a doubly linked list, then the new
                      Node should have it's prev property set to the forer tail.
                    </li>
                    <li>
                      If falsy, i.e. the linked list was empty to begin with,
                      then you can also set this.head to the new Node.
                    </li>
                  </ul>
                </li>
              </ol>
              <p>Here's how that would look in code:</p>
              <pre class="JS code"><code class="JS">class LinkedList {
<span class = "comment">  /* constructor, other class methods, etc. */   </span>     
               
  addToTail(value) {
    const newNode = new Node(value);
    const formerTail = this.tail;

    this.tail = newNode;

    if (formerTail) {
        formerTail.next = newNode;
        newNode.previous = formerTail;
    } else {
      this.head = this.tail;
    }
  }
}
</code></pre>
              <p>
                This would occur in O(1) time. However, you may encounter a
                linked list with only a head, and not a tail. In that case, you
                would have to start with the head and traverse the entire linked
                list until you reach the node with a <code>next</code> value of
                null. That would occur in O(n) time where n is the number of
                nodes in the linked list.
              </p>
            </div>
          </li>

          <li id="general_associativeArray">
            <div class="question">
              <p>
                What is an "associative array", and what is the difference
                between that and a regular array?
              </p>
            </div>

            <div class="answer">
              <p>This answer requires some breaking down.</p>
              <p>
                The Array you are most familiar with is an array
                <em>abstract data type</em>, "that consists of a collection of
                values or variables that can be selected by one or more indices
                computed at run-time."
              </p>
              <p>
                This Array data type is often implemented with an array
                <em>data structure</em>, which is a DS "consisting of a
                collection of elements (values or variables), each identified by
                at least one array index or key." The array data structure
                implies that these indexes / keys are integers, usually starting
                at 0 for the first element. In essence this mirrors the above
                data type. "Array types are often implemented by array
                structures; however, in some languages they may be implemented
                by hash tables, linked lists, search trees, or other data
                structures."
              </p>
              <p>
                So, you know now that the [2, 3, 8] you see in Javascript is an
                array <em>data type</em>, and, you assume it is implemented with
                an array <em>data structure</em> under the hood.
              </p>
              <p>
                Now, onto <em>associative</em> arrays. Like array, this is an
                abstract data type (also known as a dictionary, map, or symbol
                table), but where the keys can be more than just integers."
                [Associative arrays] are composed of a collection of (key,
                value) pairs, such that each possible key appears at most once
                in the collection....<em
                  >In JavaScript, all objects behave as associative arrays</em
                >
                with string-valued keys, while the Map and WeakMap types take
                arbitrary objects as keys."
              </p>
              <p>See that? All objects in JavaScript are associative arrays.</p>
              <p>
                The operations that are usually defined for the associative
                array ADT are:
              </p>
              <ul>
                <li>
                  <b>Add or insert</b>: add a new (key,value) pair to the
                  collection, binding the new key to its new value. The
                  arguments to this operation are the key and the value.
                </li>
                <li>
                  <b>Reassign</b>: replace the value in one of the (key,value)
                  pairs that are already in the collection, binding an old key
                  to a new value. As with an insertion, the arguments to this
                  operation are the key and the value.
                </li>
                <li>
                  <b>Remove or delete</b>: remove a (key,value) pair from the
                  collection, unbinding a given key from its value. The argument
                  to this operation is the key.
                </li>
                <li>
                  <b>Lookup</b>: find the value (if any) that is bound to a
                  given key. The argument to this operation is the key, and the
                  value is returned from the operation. If no value is found,
                  some associative array implementations raise an exception.
                </li>
              </ul>
              <p>
                "In an associative array, the association between a key and a
                value is often known as a "binding", and the same word "binding"
                may also be used to refer to the process of creating a new
                association."
              </p>
              You note that this is just an abstract data type - how are
              associative arrays (objects in JS) actually implemented under the
              hood with a data structure? "The dictionary problem is a classic
              computer science problem: the task of designing a data structure
              that maintains a set of data during 'search', 'delete', and
              'insert' operations...For dictionaries with very small numbers of
              bindings, it may make sense to implement the dictionary using an
              association list," which is a type of linked list. But really,
              "the two major solutions to the dictionary problem are a hash
              table or a search tree."
            </div>
          </li>

          <li id="general_hashTable">
            <div class="question">
              <p>
                How do hash tables work? Show how they can be implemented using
                only a JavaScript array.
              </p>
            </div>

            <div class="answer">
              <p>
                A hash table is a data structure (DS) which implements the
                associative array / dictionary ADT. It is essentially "an array
                combined with a hash function that separates each key into a
                separate "bucket" of the array." Or an other words, it's the
                combination of an array to hold values, and a hash function that
                transforms a [non-numeric] key [(usually a string, and should be
                unique)] into a numerical index."
              </p>
              <p>
                The idea is that you can access a value by its key in constant
                time by running the key through a hashing function which would
                always yield the same input for the same output, for example,
                the property 'last_name' would always hash to the value 8;
                therefore you would look in index 8 of the array whenever you
                needed to access the value of the 'vanilla' key.
              </p>
              <p>
                The typical construction of a hashing function is that it
                obtains an integer from a key (whether that key be a string,
                another object, etc.) by whatever means necessary, and then mods
                (i.e. divides by X and takes the remainder) by the number of
                buckets available in the array.
              </p>
              <p>
                That means that yes, the size of the hash table must be
                predefined! Here's an example of a hash function that populates
                a table holding up to 10 different properties about a person.
                <strong
                  >This is important to note - the hash table is not meant to
                  store a bunch of different values of the same property,
                  because all of those properties have the same key!</strong
                >
                The (u) means undefined, or, an unfilled bucket:
              </p>
              <pre class="JS code"><code class="JS">function hash (key) {
  let hashedKey = 0;
  for (let i = 0; i &lt; key.length; i++) {
    hashedKey += key.charCodeAt(i);
  }
  return hashedKey % 10;
}

[
  <span class = "comment">(u)</span>, 
  <span class = "comment">(u)</span>, 
  <span class = "comment">(u)</span>, 
  <span class = "comment">(u)</span>,
  {key: 'first_name', value: 'jeff'}, 
  <span class = "comment">(u)</span>, 
  {key: 'sex', value: 'male'}, 
  <span class = "comment">(u)</span>, 
  {key: 'last_name', value: 'gore'}, 
  <span class = "comment">(u)</span>,
]
</code></pre>
              <p>
                If our above hash table was called 'jeff', then we could simply
                access our `last_name` value by calling jeff[hash('last_name')].
              </p>
              <p>
                But there's a problem. 'phone' also hashes to the index 8, which
                is occupied by `last_name`. This is called a collision, and
                happens in hash tables with even the best hashing functions. So,
                how do you handle a collision?
              </p>
              <p>There are two well-known solutions:</p>
              <ol>
                <li>
                  <b>Separate chaining.</b>
                  <p>
                    "In the method known as separate chaining, each bucket is
                    independent, and has some sort of list of entries with the
                    same index." For instance, instead of storing the string
                    'vanilla' in a bucket, I would store a list data structure
                    in the bucket (like a linked list).
                  </p>
                  <p>
                    PROS: "If the distribution of keys is sufficiently uniform,
                    the average cost of a lookup depends only on the average
                    number of keys per bucket—that is, it is roughly
                    proportional to the load factor....For this reason, chained
                    hash tables remain effective even when the number of table
                    entries n is much higher than the number of slots. For
                    example, a chained hash table with 1000 slots and 10,000
                    stored keys (load factor 10) is five to ten times slower
                    than a 10,000-slot table (load factor 1); but still 1000
                    times faster than a plain sequential list."
                  </p>
                  <p>
                    CONS: "For separate-chaining, the worst-case scenario is
                    when all entries are inserted into the same bucket, in which
                    case the hash table is ineffective and the cost is that of
                    searching the bucket data structure. If the latter is a
                    linear list, the lookup procedure may have to scan all its
                    entries, so the worst-case cost is proportional to the
                    number n of entries in the table...Chained hash tables also
                    inherit the disadvantages of linked lists. When storing
                    small keys and values, the space overhead of the next
                    pointer in each entry record can be significant. An
                    additional disadvantage is that traversing a linked list has
                    poor cache performance, making the processor cache
                    ineffective."
                  </p>
                </li>
                <li>
                  <b>Open addressing.</b>
                  <p>
                    In this strategy, "all entry records are stored in the
                    bucket array itself. When a new entry has to be inserted,
                    the buckets are examined, starting with the hashed-to slot
                    and proceeding in some probe sequence, until an unoccupied
                    slot is found." So, in the example above, I would store
                    'rocky road' in index 4, the first open index available
                    after 3.
                  </p>
                  <p class="sidenote">
                    The name "open addressing" refers to the fact that the
                    location ("address") of the item is not determined by its
                    hash value. (This method is also called closed hashing; it
                    should not be confused with "open hashing" or "closed
                    addressing" that usually mean separate chaining.)"
                  </p>
                  <p>
                    PROS: "Generally speaking, open addressing is better used
                    for hash tables with small records that can be stored within
                    the table (internal storage) and fit in a cache line. They
                    are particularly suitable for elements of one word or less."
                  </p>
                  <p>
                    CONS: "A drawback of all these open addressing schemes is
                    that the number of stored entries cannot exceed the number
                    of slots in the bucket array. In fact, even with good hash
                    functions, their performance dramatically degrades when the
                    load factor grows beyond 0.7 or so. "
                  </p>
                </li>
              </ol>
              <p>
                Here's the blueprint for a hash table in JavaScript that
                implements the separate chaining method. When the set() method
                is called (i.e. set('first_name', 'Jeff'), it either:
              </p>
              <ol type="A">
                <li>
                  <strong
                    >If the key hashes to a bucket that is unoccupied:</strong
                  >
                  Creates a new Linked List then sets the head of that linked
                  list to a HashNode (just an object, really) with that
                  key/value pair.
                </li>
                <li>
                  <strong
                    >If the key hashes to a bucket that is already occupied, but
                    the key is unique:</strong
                  >
                  Add a new HashNode to the existing linked list.
                </li>
                <li>
                  <strong
                    >If the key hashes to a bucket that is already occupied, and
                    the node or one of the nodes in that bucket already has that
                    key:</strong
                  >
                  Overwrite the value of that node with the new value.
                </li>
              </ol>
              <pre class="JS code"><code class="JS">class HashNode {
  constructor(key, val) {
    this.value = val;
    this.key = key;
    this.next = null;
  }
}

class HashTable {
  constructor() {
    this.numBuckets = 35;
    this.buckets = new Array(35);
  }
  set(key, val) {
    if (typeof key !== 'string') throw new TypeError('Keys must be strings');
    const hash = this.hash(key);
    this.buckets[hash] = this.buckets[hash] || new LinkedList();
    const bucket = this.buckets[hash];
    if (this.hasKey(key)) {
      let currentNode = bucket.head;
      while (currentNode &amp;&amp; currentNode.key !== key) {
        currentNode = currentNode.next;
      }
      currentNode.value = val;
    } else {
      this.buckets[hash].addToHead(new HashNode(key, val));
    }
  }
  get(key) {
    const hash = this.hash(key);
    return this.buckets[hash].search(node =&gt; node.key === key).value;
  }
  hasKey(key) {
    const hash = this.hash(key);
    return Boolean(this.buckets[hash].search(node =&gt; node.key === key));
  }
  hash(str) {
    let sum = 0;
    for (let i = 0; i &lt; str.length; i++) {
      sum += str.charCodeAt(i)
    }
    return sum % this.numBuckets;
  }
}
</code></pre>
              <p>
                You see above, in the if/else of the set() method, this
                strategy: "When storing a new item into a typical associative
                array and a hash collision occurs, but the actual keys
                themselves are different, the associative array likewise stores
                both items. However, if the key of the new item exactly matches
                the key of an old item, the associative array typically erases
                the old item and overwrites it with the new item, so every item
                in the table has a unique key."
              </p>
              <p>
                Therefore here's how our aforementioned collision would be
                resolved with separate chaining. Each bucket is a Linked List,
                composed of nodes that have the property of `next`. When
                searching by key, we hash the key to the appropriate bucket,
                then check if the actual key string matches the key found in the
                Node at the `head` of the linked list. If not, we go to the next
                item in the Linked List, and so on:
              </p>
              <pre class="JS code"><code class="JS">[
  <span class = "comment">(u)</span>, 
  <span class = "comment">(u)</span>, 
  <span class = "comment">(u)</span>, 
  <span class = "comment">(u)</span>,
  LinkedList  { 
    head: HashNode { 
            value: {key: 'first_name', value: 'jeff'} 
            next: null
          }
  },
  <span class = "comment">(u)</span>, 
  LinkedList  { 
    head: HashNode { 
            value: {key: 'sex', value: 'male'} 
            next: null
          }
  },
  <span class = "comment">(u)</span>, 
  LinkedList  { 
    head: HashNode { 
            value: {key: 'last_name', value: 'gore'} 
            next: HashNode {
              value: {key: 'phone', value: '873-003-0021'}
              next: null
            }
          }
  },
  <span class = "comment">(u)</span>,
]
</code></pre>
            </div>
          </li>

          <li id="synprof_stableSort">
            <div class="question">
              <p>
                SORTING: What is it mean for a sorting algorithm to be "stable"?
              </p>
            </div>

            <div class="answer">
              <p>
                A stable sort means that "the implementation preserves the input
                order of equal elements in the sorted output".
              </p>
              <p>
                "Stable sort algorithms sort identical elements in the same
                order that they appear in the input. When sorting some kinds of
                data, only part of the data is examined when determining the
                sort order. For example, in the card sorting example [below] the
                cards are being sorted by their rank, and their suit is being
                ignored. This allows the possibility of multiple different
                correctly sorted versions of the original list. Stable sorting
                algorithms choose one of these, according to the following rule:
                if two items compare as equal, like the two 5 cards, then their
                relative order will be preserved, so that if one came before the
                other in the input, it will also come before the other in the
                output."
              </p>
              <img src="./_images/synprof_stableSort.png" />
              <p>
                "In the card example, cards are represented as a record (rank,
                suit), and the key is the rank. A sorting algorithm is stable if
                whenever there are two records R and S with the same key, and R
                appears before S in the original list, then R will always appear
                before S in the sorted list."
              </p>
            </div>
          </li>

          <li id="algoprof_mergeSort">
            <div class="question">
              <p>SORTING: What is merge sort and how is it implemented?</p>
            </div>

            <div class="answer">
              <p>"Conceptually, a merge sort works as follows:</p>

              <ol>
                <li>
                  Divide the unsorted list into n sublists, each containing 1
                  element (a list of 1 element is considered sorted).
                </li>
                <li>
                  Repeatedly merge sublists to produce new sorted sublists until
                  there is only 1 sublist remaining. This will be the sorted
                  list."
                </li>
              </ol>
              <p>Here's the code in JavaScript:</p>
              <pre
                class="JS code"
              ><code class="JS">const mergeSort = function(array) {
  if (array.length &lt; 2) return array; 
  const [left, right] = split(array),
  return merge(mergeSort(left), mergeSort(right)); 
};
</code></pre>
              <p>
                Note the presence of two utility functions - split and merge.
              </p>
              <ol>
                <li>
                  Split divides the array in two, i.e., [8, 5, 6, 7, 3] becomes
                  [8, 5] and [6, 7, 3]
                </li>
                <li>
                  Merge takes two already sorted arrays and merges them into
                  one. This is easy because both are sorted, you simply keep
                  pointers on both arrays, and compare them both. Whichever is
                  smaller, shift off the subarray into the result array and
                  increment the pointer and compare again. One array will
                  exhaust its length first. That means that all of the elements
                  in the other array can be added to end the result array,
                  because they are larger.
                </li>
              </ol>
            </div>
          </li>

          <li id="algoprof_quicksort">
            <div class="question toDo">
              <p>SORTING: What is quicksort and how is it implemented?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="quicksortVsMergesort">
            <div class="question toComplete">
              <p>
                Compare quicksort and mergesort. When might one be preferable
                over the other?
              </p>
            </div>

            <div class="answer">
              <p>Nice summary here, with my own footnotes:</p>
              <blockquote>
                <p>
                  Quicksort depends on being able to index into an array or
                  similar structure. When that's possible, it's hard to beat
                  Quicksort.
                </p>

                <p>
                  But you can't index directly into a linked list very quickly.
                  That is, if myList is a linked list, then myList[x], were it
                  possible to write such syntax, would involve starting at the
                  head of the list and following the first x links. That would
                  have to be done twice for every comparison that Quicksort
                  makes ---1---, and that would get expensive real quick.
                </p>

                <p>
                  Same thing on disk: Quicksort would have to seek and read
                  every item it wants to compare. ---2---
                </p>
                <p>
                  Merge sort is faster in these situations because it reads the
                  items sequentially ---3---, typically making log2(N) passes
                  over the data. There is much less I/O involved ---4---, and
                  much less time spent following links in a linked list.
                </p>

                <p>
                  Quicksort is fast when the data fits into memory ---5--- and
                  can be addressed directly. Mergesort is faster when data won't
                  fit into memory or when it's expensive to get to an item.
                </p>
              </blockquote>
            </div>
          </li>

          <li id="algoprof_mergeSortLinkedList">
            <div class="question toDo">
              <p>SORTING: How would one merge sort a linked list?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="algoprof_sortingLargeFiles">
            <div class="question toComplete">
              <p>
                SORTING: How would one handle large file sorts, in which not all
                the files can fit into memory?
              </p>
            </div>

            <div class="answer">
              <p>
                "Note that large file sorts typically load as much as they can
                of a file into memory, Quicksort that and write it out to a
                temporary file, and repeat until it has gone through the entire
                file. At that point there is some number of blocks, each one of
                which is sorted, and the program then does a N-way merge to
                produce the sorted output."
              </p>
            </div>
          </li>

          <li id="algoprof_graph">
            <div class="question toComplete">
              <p>
                What is a graph, and what are its three main representations in
                memory?
              </p>
            </div>

            <div class="answer">
              <p>(description here)...three main representations in memory:</p>
              <ul>
                <li>Objects and pointers</li>
                <li>Matrix</li>
                <li>Adjacency list</li>
              </ul>
            </div>
          </li>

          <li id="algoprof_directedAcyclicGraph">
            <div class="question toDo">
              <p>
                What is a directed acyclic graph (DAG), and how does it relate
                to a spreadsheet?
              </p>
            </div>

            <div class="answer">
              <p>(description here)...three main representations in memory:</p>
            </div>
          </li>

          <li id="general_tailRecursion">
            <div class="question toDo">
              <p>What is "tail recursion"?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_greedyAlgorithm">
            <div class="question toDo">
              <p>What does it mean for an algorithm to be "greedy"?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_binarySearch">
            <div class="question">
              <p>
                What is binary search? Does it relate to a binary search tree?
              </p>
            </div>

            <div class="answer">
              <p>
                "In computer science, binary search, also known as half-interval
                search, logarithmic search, or binary chop, is a search
                algorithm that finds the position of a target value within a
                sorted array.
              </p>
              <p>
                "Binary search compares the target value to the middle element
                of the array. If they are not equal, the half in which the
                target cannot lie is eliminated and the search continues on the
                remaining half, again taking the middle element to compare to
                the target value, and repeating this until the target value is
                found."
              </p>
              <p>
                Binary search is related, but not identical to a binary search
                tree. Both are nouns, sure, but really, they're not in the same
                category otherwise.
              </p>
              <ul>
                <li>
                  Binary search is an <em>algorithm</em> to more effectively
                  (log(n)) locate elements in a sorted array or other
                  <span class="toDo">iterable</span> in which you can access
                  items by index.
                </li>
                <li>
                  A binary search tree is an abstract data type implemented as a
                  <em>data structure </em>in which to organize data so that it
                  can be accessed in log(n) time.
                </li>
              </ul>
              <p>
                Both employ the same strategy - either the answer is the current
                point of focus, if not, go one direction (and implicitly throw
                away the other half).
              </p>
              <ul>
                <li>
                  Binary search depends on an input iterable like an array that
                  is sorted by some sort of property.
                </li>
                <li>
                  A binary search tree does not require a sorted array - instead
                  it requires that its Nodes are able to point to both a left
                  child and a right child.
                </li>
              </ul>
            </div>
          </li>

          <li id="general_monad">
            <div class="question toDo">
              <p>What is a monad?</p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <li id="general_monad">
            <div class="question toDo">
              <p>
                What is a "backtracking" algorithm and when might it be used
                (sudoku solve example)?
              </p>
            </div>

            <div class="answer">
              <p>(answer here)</p>
            </div>
          </li>

          <h3 id="cliSection">Command Line Interface (CLI)</h3>

          <li id="cli_whatIsIt">
            <div class="question">
              <p>What is a command line interface (CLI)?</p>
            </div>

            <div class="answer">
              <p>
                "A command-line interface...is a means of interacting with a
                computer program where the user (or client) issues commands to
                the program in the form of successive lines of text (command
                lines). A program which handles the interface is called a
                command language interpreter or shell."
              </p>
              <p>
                It generally looks like a black screen with white or green text
                - remember MS-DOS? That was a CLI. That is opposed to a GUI, or
                graphical user interface, which uses icons.
              </p>
            </div>
          </li>

          <li id="cli_advantages">
            <div class="question">
              <p>What are the advantages to using a CLI?</p>
            </div>

            <div class="answer">
              <ul>
                <li>It's faster to use the keyboard.</li>
                <li>CLIs use less system resources than GUIs.</li>
                <li>
                  CLIs are less subject to change than GUIS - changes are
                  usually just new commands.
                </li>
              </ul>
            </div>
          </li>

          <li id="cli_anatomyOfACommand">
            <div class="question">
              <p>What are the components of a typical CLI expression?</p>
            </div>

            <div class="answer">
              <p>See the below, courtesy of Fullstack:</p>
              <img
                src="_images/cli_anatomyOfACommand.png"
                class="fullstackImg"
              />
              <ol>
                <li>
                  First, you see the <strong>prompt</strong>. This always
                  appears automatically, and is supplied by the CLI. As you can
                  see, the prompt contains the name of the computer, followed by
                  a dollar sign ($). If we were running a CLI in Windows, you
                  would see a greater-than symbol (&gt;) instead. You can think
                  of this as the subject of the sentence.
                </li>
                <li>
                  Next is the actual <strong>command</strong>. This is the
                  keyword that performs an action on an argument. Think of the
                  command is the verb of a sentence. The <code>rm</code> command
                  means "remove".
                </li>
                <li>
                  Next is an <strong> option, or flag</strong>, which is akin to
                  an adverb. It's usually a single character, and must start
                  with a hyphen, to distinguish it from the actual
                  argument/object of the operation. This <code>-f</code> flag
                  stands for "force", which means "ignore nonexistant files, and
                  never prompt before removing."
                </li>
                <li>
                  Finally, we have the <strong>argument</strong>, or object of
                  the sentence, which is the thing to be acted upon.
                </li>
              </ol>
              <p>
                The above translates into "Remove, forcibly, the file
                "foundations.txt" from the current working directory. That's
                another important thing to note: when you are in a CLI, you are
                always somewhere in the filesystem, and if files are not
                specified with a directory, then it is assumed that you are
                referring to files in your current directory.
              </p>
            </div>
          </li>

          <li id="cli_areOptionsUniversal">
            <div class="question">
              <p>
                In the example above, the -f option means "force". Does -f after
                any command always mean force? Or, more broadly speaking, are
                options universal?
              </p>
            </div>

            <div class="answer">
              <p>
                No - options and their definitions are particular to their
                commands. Take the following two commands:
              </p>
              <table>
                <thead>
                  <tr>
                    <td>Command</td>
                    <td>Command Meaning</td>
                    <td><code>-m </code>Option Meaning</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code>mkdir</code></td>
                    <td>Make new directory</td>
                    <td>mode for file permissions</td>
                  </tr>
                  <tr>
                    <td><code>who</code></td>
                    <td>Display who is logged in</td>
                    <td>only print information about the current terminal</td>
                  </tr>
                </tbody>
              </table>
              <p>
                As you can see, the meaning of <code>-m</code> depends on the
                command it follows.
              </p>
            </div>
          </li>

          <li id="cli_whatIsAShell">
            <div class="question">
              <p>
                What is a "shell", how does it differ from a terminal, and how
                does it relate to a CLI?
              </p>
            </div>

            <div class="answer">
              <p>
                A shell is a program that interprets commands and acts as an
                intermediary between the user and the operating system. A
                terminal is the program that the user interacts with and runs
                the shell. A shell processes each command and returns output for
                the terminal to display. A terminal is a type of CLI. For input,
                "the terminal converts keys into control sequences (e.g. Left →
                \e[D). The shell converts control sequences into commands (e.g.
                \e[D → backward-char)."
              </p>

              <p>
                Wikipedia says: "In computing, a shell is a user interface for
                access to an operating system's services. In general, operating
                system shells use either a command-line interface (CLI) or
                graphical user interface (GUI), depending on a computer's role
                and particular operation. It is named a shell because it is the
                outermost layer around the operating system
                <span class="toDo">kernel</span>."
              </p>

              <p>
                In sum, a CLI is a type of interface that a shell can implement.
                And if a shell uses a CLI, then it may also have its own command
                language.
              </p>
            </div>
          </li>

          <li id="cli_whatIsBash">
            <div class="question">
              <p>What is bash?</p>
            </div>

            <div class="answer">
              <p>
                Bash is the default Mac shell. "Bash is a Unix shell and command
                language...First released in 1989, it has been distributed
                widely as the default login shell for most Linux distributions
                and Apple's macOS...The shell's name is an acronym for
                Bourne-Again SHell, punning on the name of the Bourne shell that
                it replaces [which was released in 1977 and known as 'sh' for
                short]."
              </p>
            </div>
          </li>

          <li id="cli_comprof_echo">
            <div class="question">
              <p>
                What would happen if you typed <code>echo Oprah 2020</code> into
                bash?
              </p>
            </div>

            <div class="answer">
              <p>Bash would simply repeat, or "echo", what you wrote:</p>
              <pre class="code CLI"><code>JEFFL2:~ jeffgore$ echo Oprah 2020
Oprah 2020</code></pre>
              <p>
                You may think to yourself: what is the point of such an
                infantile command? But <code>echo</code> has many uses,
                <a href="http://www.linfo.org/echo.html"
                  >as described elegantly on LINFO</a
                >. For instance, you can declare a variable, then use echo to
                return its value (The dollar sign preceding x tells echo to
                display its value rather than its name.):
              </p>
              <pre class="code CLI"><code>JEFFL2:~ jeffgore$ x=10
JEFFL2:~ jeffgore$ echo $x
10</code></pre>
              <p>
                (Note, in the above example, that <code>x = 10</code> would not
                work - the CLI is whitespace sensitive!)
              </p>
            </div>
          </li>

          <li id="cli_getUnstuck">
            <div class="question">
              <p>
                If bash freezes or hangs, what is the keyboard shortcut to stop
                the execution of the current command?
              </p>
            </div>

            <div class="answer">
              <p>
                The shortcut is <span class="keyboard">Ctrl</span>+<span
                  class="keyboard"
                  >C</span
                >.
              </p>
            </div>
          </li>

          <li id="cli_upAndDownArrows">
            <div class="question">
              <p>
                Similar to the Chrome Developer Tools console, the up and down
                arrows in bash cycle through your recent commands - true or
                false?
              </p>
            </div>

            <div class="answer">
              <p>True.</p>
            </div>
          </li>

          <li id="cli_clearCurrentLine">
            <div class="question">
              <p>In bash, how do you clear the current line?</p>
            </div>

            <div class="answer">
              <p>
                The shortcut is <span class="keyboard">Ctrl</span>+<span
                  class="keyboard"
                  >U</span
                >.
              </p>
            </div>
          </li>

          <li id="cli_comprof_ls">
            <div class="question">
              <p>
                In bash, what command lists all the files and folders within
                your working directory, or a specific directory?
              </p>
            </div>

            <div class="answer">
              <p>
                That would be the <code>ls</code> command, which is short for
                "list". On this computer, the default home directory is
                /Users/jeffgore. Using the ls command in the home directory
                yields the following:
              </p>
              <pre class="code CLI"><code>JEFFL2:~ jeffgore$ ls
Applications		Downloads		Music
Creative Cloud Files	Google Drive		Pictures
Desktop			Library			Public
Documents		Movies			test.txt</code></pre>
              <p>
                If you wanted to list the files within a specific directory, you
                would simply give ls an argument of the relative path to the
                directory of which you would like to list the contents. For
                example:
              </p>
              <pre
                class="code CLI"
              ><code>JEFFL2:~ jeffgore$ ls 'Google Drive/# Education #'
! Completed !	! Meta !	IMPRV		PYTHN
! Holding !	HCJ		NVC</code></pre>
              <p>
                The -a option, when used with ls, shows you all hidden
                files/directories in the directory being listed. A hidden file
                or folder starts with a period. These are usually hidden so to
                not clutter ls output:
              </p>
              <pre class="code CLI"><code></code>JEFFL2:~ jeffgore$ ls -a
.			.gitconfig		Library
..			.lesshst		Movies
.CFUserTextEncoding	Applications		Music
.DS_Store		Creative Cloud Files	Pictures
.Trash			Desktop			Public
.bash_history		Documents		test.txt
.bash_sessions		Downloads
.cups			Google Drive</pre>
            </div>
          </li>

          <li id="cli_comprof_pwd">
            <div class="question">
              <p>In bash, how do you show your current working directory?</p>
            </div>

            <div class="answer">
              <p>
                That would be the <code>pwd</code> command, which is short for
                "print working directory", and "writes the absolute pathname of
                the current working directory to the standard output."
              </p>
              <pre class="code CLI"><code>JEFFL2:% NYC % jeffgore$ pwd
/Users/jeffgore/Google Drive/# Genref #/$ Transportation $/% NYC %</code></pre>
              <p>
                Note how bash displays the name of your current directory in the
                prompt, after your computer name. Also note that the home
                directory (which if you forget what it is, you can type echo
                $HOME), is represented with a tilde:
              </p>
              <pre class="code CLI"><code>JEFFL2:~ jeffgore$ echo $HOME
/Users/jeffgore
JEFFL2:~ jeffgore$ pwd
/Users/jeffgore</code></pre>
              <p>
                Implicit in the opening slash before "Users" is the computer's
                hard drive.
              </p>
            </div>
          </li>

          <li id="cli_comprof_man">
            <div class="question">
              <p>
                In bash, how do you print the help/documentation on a given
                command?
              </p>
            </div>

            <div class="answer">
              <p>
                You would use the <code>man</code> command, which is short for
                "manual". So, if you wanted to see the full explanation of the
                ls command, then you would do:
              </p>
              <pre class="code CLI"><code>JEFFL2:~ jeffgore$ man ls
                        
                        LS(1)                     BSD General Commands Manual                    LS(1)

NAME
     ls -- list directory contents

SYNOPSIS
     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]

DESCRIPTION
     For each operand that names a file of a type other than directory, ls
     displays its name as well as any requested, associated information.  For
     each operand that names a file of type directory, ls displays the names
:</code></pre>
              <p>
                Note the colon at the bottom of the screen. That means that
                there is more content than can fit on the screen, so you should
                scroll to see more.
              </p>

              <p>
                You exit this screen by hitting <span class="keyboard">Q</span>.
              </p>
            </div>
          </li>

          <li id="cli_scrollDown">
            <div class="question">
              <p>
                In bash, how do you scroll down by one line, and also, one
                screen length?
              </p>
            </div>

            <div class="answer">
              <ul>
                <li>One line down: <span class="keyboard">⏎</span></li>
                <li>One screen down: <span class="keyboard">Space</span></li>
                <li>One screen up: <span class="keyboard">B</span></li>
              </ul>
            </div>
          </li>

          <li id="cli_comprof_cd">
            <div class="question">
              <p>
                If, in a CLI, you are always located in a directory within a
                filesystem, then how do you change directories?
              </p>
            </div>

            <div class="answer">
              <p>
                That would be the <code>cd</code> command, which is short for
                "change directory". The cd command takes an argument of a
                relative path to the new directory.
              </p>
              <p>
                Let's use a modified version of our HTML example to practice
                this. Here we have a folder structure:
              </p>
              <img src="_images/cli_comprof_cd.png" />
              <p>
                In the below examples, I've ommitted the machine/directory/user
                part of the prompt for conciseness. Here's how you would go
                about writing the cd command for changing:
              </p>
              <ol type="A">
                <li>
                  <p>From HCJ MasterRef to +nesttest</p>
                  <pre class="code CLI"><code>$ cd _pages/+nesttest</code>
</pre>
                  <p>
                    In other words, from the current directory (HCJ MasterRef),
                    go down into _pages, then down into +nesttest.
                  </p>
                </li>
                <li>
                  <p>From +nesttest to _pages (go up to immediate parent)</p>
                  <pre class="code CLI"><code>$ cd ..</code>
</pre>
                  <p>
                    In other words, from the current directory (+nesttest), go
                    up into the parent directory (.., which is _pages).
                  </p>
                </li>
                <li>
                  <p>From +nesttest to HCJ MasterRef</p>
                  <pre class="code CLI"><code>$ cd ../..</code>
</pre>
                  <p>
                    In other words, from the current directory (+nesttest), go
                    up into the parent directory (../<span class="hghlt"
                      >..</span
                    >, which is _pages), then go up into the next parent
                    directory (<span class="hghlt">..</span>/.., which is HCJ
                    Master Ref).
                  </p>
                </li>

                <li>
                  <p>From +nesttest to _images</p>
                  <pre class="code CLI"><code>$ cd ../../_images</code>
</pre>
                  <p>
                    In other words, from the current directory (+nesttest), go
                    up into the parent directory (../<span class="hghlt"
                      >..</span
                    >, which is _pages), then go up into the next parent
                    directory (<span class="hghlt">..</span>/.., which is HCJ
                    Master Ref), then go down into _images.
                  </p>
                </li>
              </ol>
              <p>Here are a few important notes:</p>
              <ul>
                <li>
                  <p>
                    If your directory name has a space in it, then you will have
                    to surround your argument with quotes:
                  </p>
                  <pre class="code CLI"><code>JEFFL2:~ jeffgore$ cd Google Drive
-bash: cd: Google: No such file or directory
JEFFL2:~ jeffgore$ cd 'Google Drive'
JEFFL2:Google Drive jeffgore$</code>
</pre>
                </li>
                <li>
                  <p>
                    cd with no arguments brings you back to the home directory.
                  </p>
                </li>
                <li>
                  <p>
                    If you start your well-intentioned desire to go up to the
                    parent directory or directories with a forward slash, you
                    will end up at the root:
                  </p>
                  <pre class="code CLI"><code>JEFFL2:_pages jeffgore$ cd /../..
JEFFL2:/ jeffgore$</code>
</pre>
                  <p>
                    ..so when going up to a parent directory or directories, do
                    not start with a forward slash.
                  </p>
                </li>
              </ul>
            </div>
          </li>

          <li id="cli_comprof_mkdir">
            <div class="question">
              <p>In bash, how do I create new directories/folders?</p>
            </div>

            <div class="answer">
              <p>
                That would be the <code>mkdir</code> command, which is short for
                "make directories". Note the plural; you can make more than one
                directory simultaneously. Let's make a vanilla website folder,
                then create an html, css, and js folder within it.
              </p>
              <ol>
                <li>
                  <p>
                    First, assuming we are in the directory we want this website
                    folder to live, we would simply write:
                  </p>
                  <pre class="code CLI"><code>$ mkdir vanillaWebsite</code>
</pre>
                </li>
                <li>
                  <p>Then, we must step into our new directory:</p>
                  <pre class="code CLI"><code>$ cd vanillaWebsite</code>
</pre>
                </li>
                <li>
                  <p>
                    ...and finally, we can create three folders within that
                    simultaneously:
                  </p>
                  <pre class="code CLI"><code>$ mkdir html css js</code>
</pre>
                </li>
              </ol>
            </div>
          </li>

          <li id="cli_comprof_touch">
            <div class="question">
              <p>In bash, how do I create new files?</p>
            </div>

            <div class="answer">
              <p>
                That would be the <code>touch</code> command, which "sets the
                modification and access times of files. If any file does not
                exist, it is created [in the current working directory] with
                default permissions." Like <code>mkdir</code>, you can create
                multiple files simultaneously:
              </p>
              <pre
                class="code CLI"
              ><code>$ touch master.htm master.css master.js</code>
</pre>
            </div>
          </li>
          <li id="cli_comprof_mv">
            <div class="question">
              <p>In bash, how do I move or rename files?</p>
            </div>

            <div class="answer">
              <p>
                You would do both with the <code>mv</code> command. Let's say,
                using the example above, that we created master.htm, master.css,
                and master.js in the main vanillaWebsite folder, but we want to
                move them individually to their designated html, css, and js
                folders.
              </p>
              <pre class="code CLI"><code>$ mv master.htm html
$ mv master.css css
$ mv master.js js</code>
</pre>
              <p>As you can see, this is a three part command:</p>
              <ol>
                <li>Move (mv)</li>
                <li>the file (master.htm)</li>
                <li>to the specified folder in the current directory (html)</li>
              </ol>
              <p>
                Beware! If the folder does not exist, the file will be renamed
                to match that nonexistent folder. And, because you didn't
                specify a file extension, the file you renamed now has no file
                type.
              </p>
              <pre class="code CLI"><code>$ ls
master.htm	testing
$ mv master.htm testnig
$ ls
testing	testnig</code>
</pre>
              <span class="toDo">How do I move or rename DIRECTORIES?</span>
            </div>
          </li>

          <li id="cli_comprof_sudo">
            <div class="question">
              <p>
                In bash, what is the purpose of the <code>sudo</code> command?
              </p>
            </div>

            <div class="answer">
              <p>
                The purpose of <code>sudo</code> is to "execute a command as
                another user." Often this is used to execute a command as the
                <span class="toDo">root user</span>. For instance, installing
                git requires use of <code>sudo</code>.
              </p>
            </div>
          </li>

          <li id="cli_glob">
            <div class="question">
              <p>What is a "glob"?</p>
            </div>

            <div class="answer">
              <p>
                "In computer programming, glob patterns specify sets of
                filenames with wildcard characters. For example, the Unix Bash
                shell command mv *.txt textfiles/ moves (mv) all files with
                names ending in .txt from the current directory to the directory
                textfiles".
              </p>

              <p>
                "The glob command, short for global, originates in the earliest
                versions of ... Unix. The command interpreters of the early
                versions of Unix... relied on a separate program to expand
                wildcard characters in unquoted arguments to a command:
                /etc/glob. That program performed the expansion and supplied the
                expanded list of file paths to the command for execution."
              </p>

              <p>
                This is not the same as a regular expression, which has much
                more possible symbols and is concerned with more than just
                wildcard characters, but patterns, etc. Still, the smaller glob
                scope uses the same syntax as a regex.
              </p>

              <p>Here's an example of a CLI glob:</p>
              <pre
                class="code CLI"
              ><code>$ prettier --write \"**/*.+(js|jsx|css)\"</code>
</pre>
              <p>
                Note the **/* pattern. Why would a double asterisk be needed?
                Zsh introduced this and this is enabled via the globstar option
                in bash. "With some shells, with some settings, ** is a
                recursive version of *, matching all files and directories in
                the current directory and subdirectories. If followed by a `/',
                two adjacent ``*'s will match only directories and
                subdirectories." So, in short, this line runs the prettier
                command with the --write flag, telling it to edit the files on
                disk, the files being any that match the glob pattern, which is,
                any files that end in .js, .jsx, or .css which reside in any
                directory below the current directory.
              </p>
            </div>
          </li>

          <h3 id="gitSection">Git / GitHub</h3>

          <li id="git_gitVsGitHub">
            <div class="question">
              <p>What is the difference between Git and GitHub?</p>
            </div>

            <div class="answer">
              <p>
                Git is a version control system located in the command line.
                GitHub is a code-sharing and publishing website that hosts Git
                repositories online, so you can share your code with other
                developers.
              </p>
            </div>
          </li>

          <li id="git_whatIsAVCS">
            <div class="question">
              <p>What is a version control system?</p>
            </div>

            <div class="answer">
              <p>
                "Version control is a system that records changes to a file or
                set of files over time so that you can recall specific versions
                later....a Version Control System (VCS)...allows you to revert
                selected files back to a previous state, revert the entire
                project back to a previous state, compare changes over time, see
                who last modified something that might be causing a problem, who
                introduced an issue and when, and more."
              </p>
            </div>
          </li>

          <li id="git_whatTypeOfVCSIsGit">
            <div class="question">
              <p>What type of version control system is Git?</p>
            </div>

            <div class="answer">
              <p>
                Git is a distributed version control system (DVCS). "In a
                DVCS...clients don’t just check out the latest snapshot of the
                files; rather, they fully mirror the repository, including its
                full history. Thus, if any server dies, and these systems were
                collaborating via that server, any of the client repositories
                can be copied back up to the server to restore it. Every clone
                is really a full backup of all the data."
              </p>
              <div class="sidenote">
                <p>
                  Let's dig a little more into the word "distributed" as it
                  relates to computer systems:
                </p>
                <p>
                  "While there is no single definition of a distributed system,
                  the following defining properties are commonly used:
                </p>
                <ul>
                  <li>
                    There are several autonomous computational entities
                    (computers or nodes), each of which has its own local
                    memory.
                  </li>
                  <li>
                    The entities communicate with each other by message
                    passing."
                  </li>
                </ul>
              </div>
            </div>
          </li>

          <li id="git_installConfigure">
            <div class="question">
              <p>How do I install and configure git on my machine?</p>
            </div>

            <div class="answer">
              <p>That's a big question, here are the notes I have:</p>
              <ul>
                <li>
                  <p>Installation</p>
                  <pre class="code CLI"><code>$ sudo git</code>
</pre>
                </li>
                <li>
                  <p>Configuration</p>
                  <pre
                    class="code CLI"
                  ><code>$ git config --global user.name "Jeff Gore"
$ git config --global user.email "jgore00@gmail.com" </code>
</pre>
                </li>
              </ul>
            </div>
          </li>
          <li id="git_synprof_commit">
            <div class="question">
              <p>What is a git "commit"?</p>
            </div>

            <div class="answer">
              <p>
                In git, a commit is a snapshot of your project at a given time.
              </p>
              <p>
                "In version control systems, a commit adds the latest changes to
                [part of] the source code to the repository, making these
                changes part of the head revision of the repository. Unlike
                commits in data management, commits in version control systems
                are kept in the repository indefinitely. Thus, when other users
                do an update or a checkout from the repository, they will
                receive the latest committed version, unless they specify they
                wish to retrieve a previous version of the source code in the
                repository."
              </p>
            </div>
          </li>

          <li id="git_synprof_repository">
            <div class="question">
              <p>What is a git repository?</p>
            </div>

            <div class="answer">
              <p>
                "A repository is an on-disk data structure which stores metadata
                for a set of files or directory structure....it is a directory
                where Git has been initialized to start version controlling your
                files."
              </p>
              <p>
                Let's say you have a folder called "puppies" and you want to use
                git to track changes to this folder. You would use a CLI to
                navigate to this folder, then, once inside, write:
              </p>
              <pre class="code CLI"><code>$ git init</code>
</pre>
              <p>
                This creates an empty Git repository - " basically a .git
                directory with subdirectories for objects, refs/heads,
                refs/tags, and template files." This hidden folder called .git
                will be used to hold all the commits.
              </p>
              <p>
                Note that this is still isolated to your hard drive without the
                use of GitHub.
              </p>
            </div>
          </li>

          <li id="git_flowWorkingStagingCommited">
            <div class="question">
              <p>
                What is the lifecycle/workflow for files managed with Git, and
                what are the commands associated with moving files through that
                cycle?
              </p>
            </div>

            <div class="answer">
              <p>See the graphic below:</p>
              <img src="_images/git_flowWorkingStagingCommitted.png" />
              <p>And here's another:</p>
              <img src="_images/git_flowWorkingStagingCommitted2.png" />
              <p>"The basic Git workflow goes something like this":</p>
              <ol>
                <li>
                  <p>
                    <strong>You modify files in your working directory</strong>.
                    Think of this as the typical doing work phase. You're
                    writing code, editing code, etc., in a folder that is being
                    tracked by git.
                  </p>
                  <p>
                    Technically, the working directory "is a single checkout of
                    one version of the project. These files are pulled out of
                    the compressed database in the Git directory and placed on
                    disk for you to use or modify."
                  </p>
                </li>
                <li>
                  "<strong>You stage those changes</strong> you want to be part
                  of your next commit, which adds only those changes to the
                  staging area." These are modified files whose chances we'd
                  like to see recorded in a commit. We add files to the staging
                  area using the <code>git add</code> command.
                  <ul>
                    <li>
                      <p>
                        To add all changes to staging (i.e. edits to existing
                        files, new files, file removals):
                      </p>
                      <pre class="code CLI"><code>$ git add .</code></pre>
                      <div class="sidenote">
                        That period (.) is git's shorthand for "all", equivalent
                        to SQL's asterisk (*). But as it turns out, the bash
                        shell's shorthand for "all" is also an asterisk (*).
                        Therefore you could technically use the asterisk in
                        place of the period - the asterisk would utilize shell
                        functionality to pass git the list of files - the
                        nuances are discussed in further detail
                        <a
                          href="https://stackoverflow.com/questions/26042390/git-add-asterisk-vs-git-add-period"
                          >here</a
                        >.
                      </div>
                    </li>
                    <li>
                      <p>To add only a specific file to staging:</p>
                      <pre
                        class="code CLI"
                      ><code>$ git add exampleFile.txt</code></pre>
                    </li>
                  </ul>
                </li>
                <li>
                  <p>
                    <strong>You make a commit</strong>, which takes the files as
                    they are in the staging area and stores that snapshot
                    permanently to your Git directory. (<a
                      href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics"
                      >Source</a
                    >)
                  </p>
                  <pre
                    class="code CLI"
                  ><code>$ git commit -m "initial commit, baby!"</code></pre>
                  Note the -m option used with the message/comment for the
                  commit. Always use this. Otherwise, a naked git commit wield
                  yield a confusing sub-menu forcing you to add a message
                  anyway. Here's what you'd see after a successfull commit:
                </li>
                <pre
                  class="code CLI"
                ><code>[master 799dfb0] initial commit, baby!
 2 files changed, 23 insertions(+), 5 deletions(-)
 create mode 100644 testing2.txt</code></pre>
                <p>Those insertions and deletions refer to lines of text.</p>
              </ol>
            </div>
          </li>

          <li id="git_comprof_status">
            <div class="question">
              <p>
                How do I see the status of all the files in my repository (i.e.
                untracked, tracked but changes not staged, staged, commited)?
              </p>
            </div>

            <div class="answer">
              <p>You would use the following command:</p>
              <pre class="code CLI"><code>$ git status</code></pre>
              <p>...and you would see something like the following:</p>
              <pre class="code CLI"><code>On branch master
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

	<span style="color:lightgreen">modified:   JGWebReference.htm
	new file:   testing2.txt</span>

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

	<span style = "color:red">modified:   JGWebReference.htm</span>

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

	<span style = "color:red">testing3.txt</span></code></pre>
              <p class="toDo">Define branch, branch's name is master.</p>
              <p>As you can see, we have...</p>
              <ol>
                <li>
                  Changes to be committed: These are files which were added to
                  the staging area.
                </li>
                <li>
                  Changes not staged for commit: these are files that are
                  tracked by git and have been part of at least one commit -
                  changes are compared to the previous commit.
                </li>
                <li>
                  Untracked files: initializing a git repository in a folder
                  means that git will be used to track changes to all the files
                  in that folder. But if you add a new file to that folder after
                  the repository was initialized and first committed, it will be
                  recognized as an "untracked file" and will need to be added to
                  the staging area, then committed.
                </li>
              </ol>
              <p>
                How, you ask, can the same file (JGWebReference.htm) be in two
                different stages? Well, the file was staged at some point
                (changes to be committed), but before it was committed, it was
                changed yet again (modified). Remember, staging is just a
                snapshot of that file as at existing at the moment you executed
                git add.
              </p>
              <p>
                Here's what git status will yield if your working directory on
                your hard drive matches the git repository perfectly:
              </p>
              <pre
                class="code CLI"
              ><code>nothing to commit, working tree clean</code></pre>
            </div>
          </li>

          <li id="git_comprof_log">
            <div class="question">
              <p>How do you see a log of your git commits?</p>
            </div>

            <div class="answer">
              <p>You would use the following command:</p>
              <pre class="code CLI"><code>$ git log</code></pre>
              <p>...and you would see something like the following:</p>
              <pre
                class="code CLI"
              ><code>commit 2ccb8af34ac46c5067205d875104748be844b124 <span style = "color:lightgreen">(HEAD -&gt; master)</span>
Author: Jeff Gore &lt;jgore00@gmail.com&gt;
Date:   Fri Jan 19 21:42:48 2018 -0500

    commit 2

commit faa14abf25b319dc54ff7550fae08261019b7928 <span style = "color:red">(origin/master)</span>
Author: Jeff Gore &lt;jgore00@gmail.com&gt;
Date:   Wed Jan 17 18:21:56 2018 -0500

    Initial commit</code></pre>
              <p>
                Notice how the log shows which commit the HEAD is pointing to,
                as well as the origin/master, which is our remote repository on
                GitHub. The above means that we have not yet pushed the most
                recent commit to GitHub, which still has only our
                second-from-last commit. But don't be confused, that's not why
                "origin/master" is in red font - in iTerm, at least, it is
                always in red font.
              </p>
              <p>
                "A head is simply a reference to a commit object...The HEAD in
                Git is the pointer to the current branch reference, which is in
                turn a pointer to the last commit you made or the last commit
                that was checked out into your working directory. That also
                means it will be the parent of the next commit you do. It's
                generally simplest to think of it as HEAD is the snapshot of
                your last commit.
              </p>
            </div>
          </li>

          <li id="git_comprof_rm">
            <div class="question">
              <p>
                Can I remove a file from my hard drive and the git repository
                simultaneously?
              </p>
            </div>

            <div class="answer">
              <p>
                Sort of. When you use the git rm command followed by the file(s)
                to be deleted, that file is / those files are removed from your
                hard drive, and that removal is / those removals are added to
                the staging area. Below is an example of this command in action:
              </p>
              <pre
                class="code CLI"
              ><code>$ git rm testing.txt testing2.txt</code></pre>
            </div>
          </li>

          <li id="git_howToPushToGitHub">
            <div class="question">
              <p>
                OK, I get Git - I know how to set up a Git repository on my
                local machine - how do I have this repository mirrored on
                GitHub?
              </p>
            </div>

            <div class="answer">
              <p>
                First, you would need to create an empty repository on GitHub
                into which your local Git repository will be pushed. Go to
                <a href="https://github.com/new">https://github.com/new</a> to
                do this.
              </p>
              <p>
                Right after you do this, you will see the below - copy this link
                to your clipboard, this is the location online of the .git file
                for this repository:
              </p>
              <img src="_images/git_howToPushToGitHub.png" />
              <p>
                Now let's return to our CLI and get into the Git repository. Now
                that we are in the Git project, we can name a designated remote
                repository with the following syntax:
              </p>
              <pre
                class="code syntax"
              ><code>$ git remote add [alias] [remote URL]</code></pre>
              <p>Therefore we could write:</p>
              <pre
                class="code CLI"
              ><code>$ git remote add origin https://github.com/jeffgore00/sandbox</code></pre>
              <p>
                What is going on here? The first argument, alias, is a nickname
                we can use to refer to the remote URL so that it is easy to
                push/pull from that remote repository frequently. (Note that
                this alias "is an alias on <em>your system</em> for a particular
                repository that exists elsewhere. It's not actually a property
                of that repository. The same repository might be aliased to
                origin by one developer and flub by another.") And then the
                second argument is the remote .git file itself.
              </p>
              <p>
                Why, then, if we have complete control of our alias, did we name
                the remote repository "origin"? It's a matter of convention -
                "When you clone a repository with git clone, it automatically
                creates a remote connection called origin pointing back to the
                cloned repository. This is useful for developers creating a
                local copy of a central repository since it provides an easy way
                to pull upstream changes or publish local commits.
                <strong
                  >This behavior is also why most Git-based projects call their
                  central repository origin.</strong
                >"
              </p>
              <p>
                To verify the remote repository for our current Git project, we
                can type:
              </p>
              <pre class="code CLI"><code>$ git remote -v</code></pre>
              <p>...and we would see:</p>
              <pre
                class="code CLI"
              ><code>origin	https://github.com/jeffgore00/sandbox.git (fetch)
origin	https://github.com/jeffgore00/sandbox.git (push)</code></pre>
              <p>
                Note how there is a designated remote repository for fetching
                (pulling from the web) and push (sending to the web). Keep in
                mind that the "-v" flag after remote does not mean "verify", it
                means "verbose" - given that name because git remote by itself
                only shows the aliases and not the URLs. The general purpose of
                git remote is to manage your remote repositories.
              </p>
              <p>
                Now, at this point, our online repository is properly linked to
                our local one, but it is still empty - we have to push our files
                from the local to the web.
              </p>
              <p>First-ever push:</p>
              <pre
                class="code CLI"
              ><code>$ git push -u origin master</code></pre>
              <p>Every push thereafter:</p>
              <pre class="code CLI"><code>$ git push</code></pre>
              <p>
                "master" is the name of a branch. The Git documentation
                translates this exact commmand: "Find a ref that matches master
                in the source repository (most likely, it would find
                refs/heads/master), and update the same ref (e.g.
                refs/heads/master) in origin repository with it. If master did
                not exist remotely, it would be created." In other words, we are
                pushing the most current commit to the master branch our remote
                repository nickamed "origin".
              </p>
              Our first run, with the -u option (upstream, which I still don't
              understand), sets up the default remote repository to receive the
              latest commit so that we can thereafter use git push without
              arguments.
            </div>
          </li>

          <li id="forkingvscloning">
            <div class="question toDo">
              <p>Forking vs cloning (under construction)</p>
            </div>

            <div class="answer">
              <p>
                http://bryanpendleton.blogspot.com/2014/07/git-clone-vs-fork.html
              </p>
            </div>
          </li>

          <h3 id="dumpSection">DUMP</h3>

          <li id="fsaNotesDump">
            <div class="question">
              <p>MY_BIG_FULLSTACK_NOTES_DUMP</p>
            </div>
            <div class="answer">
              <nav>(<a href="#fsEnd">go to end</a>)</nav>
              <div>
                <h3>F1-5-01 Object Properties:</h3>
                <p>
                  - Arrays and functions are themselves objects, meaning they
                  can have properties and methods like any other object.
                </p>

                <p>
                  <b
                    >With that said, Why does typeof array === "object", but
                    typeof function === "function"?
                  </b>
                </p>
                <p>
                  Functions are special types of objects because they are
                  callable. typeof checks to see if an object is callable (to be
                  precise, it implements the [[Call]] internal method in
                  ECMA-262 terms); if so, it returns function, otherwise, it
                  returns object.
                </p>

                <ul>
                  <li>
                    - All objects have the <code>__proto__</code> property,
                    which is the object's "internal prototype."
                  </li>
                  <li>
                    - Only function objects, however, have the
                    <code>prototype</code> property.
                  </li>
                </ul>

                <div class="sidenote">
                  <p>
                    You can use the console.dir(obj) method to "to see all the
                    properties of specified javascipt object in console by which
                    developer can easily get the properties of object."
                    Fullstack teachers called this a "deep inspection".
                  </p>
                </div>
                <p>- Dates are objects? True. Errors are objects? True.</p>

                <p>
                  - We know about datatypes already, but they can be
                  subclassified as primitive or complex aka "composite".
                </p>
                <img src="_images/datatypesPrimitiveVsComplex.png" />

                <p>
                  -Objects can be seen as wrappers to abstract away the
                  complexity inside them.
                </p>

                <p>-Here's an example of how primitive values are immutable:</p>

                <pre class="JS code"><code class="JS">var str = 'hello';
str[3] = 'n';
console.log(str);
// still is 'hello'</code></pre>
                <p>
                  -Objects are "an unordered collection of properties, each of
                  which contains a primitive value, object, or function." More
                  about that unordered part: think of objects like dictionaries,
                  you don't start from the beginning; rather, you just jump
                  straight to the word/property you're looking for (in fact,
                  object-like data structures are called dictionaries in
                  Python). If a property of your object has a space or special
                  character, it needs to be surrounded by quotes:
                </p>

                <pre class="JS code"><code class="JS">var jeff = {
    name: jeff,
    'baby-daddy': false
}</code></pre>
                <p>
                  -Even though we didn't require quotes around name, note that
                  the name property will be cast to string anyway. All object
                  keys are string. Do you see why baby-daddy would fail without
                  quotes? The hyphen, to the JS compiler, is a subtraction
                  symbol. It would think that we are trying to compute jeff.baby
                  minus daddy. Reminder that with bracket notation you can
                  evaluate an expression within the brackets to the property
                  name.
                </p>
                <pre
                  class="JS code"
                ><code class="JS">console.log(jeff['na'+'me']);
//pointless, but works</code></pre>
                <p>
                  Arrays are just objects with key:value pairs as properties.
                  You use arrays when order matters, often with member keys
                  being sequential integers. arr[0] is coerced into arr['0']
                  just like jeff['name'] is. Because arrays are objects, we can
                  add additional properties to them, just like we can normal
                  objects.
                </p>

                <pre class="JS code"><code class="JS">var arr = [33, 14, 89];
arr.hello = 'sup';
dir(arr); //yields:
    arr[33, 14, 89, hello: "sup"]
        0:33
        1:14
        2:89
        hello:"sup"
        length:3
        __proto__:Array(0)
</code></pre>
                <p>
                  --And YES, it is possible to chain bracket and dot notation,
                  like so:
                </p>
                <pre
                  class="JS code"
                ><code class="JS">mom.pets["sallie-mae"].neutered = true;
</code></pre>
              </div>
              <div>
                <h3>F1-5-02 Factory Functions:</h3>
                <p>
                  "A factory function is any function which is not a class or
                  constructor that returns a (presumably new) object." I.E. it
                  does so without the <code>new</code> keyword. More generally,
                  your function is acting as a factory for making a certain type
                  of object. For instance, the function below is used to create
                  new Twitter user objects:
                </p>
                <pre
                  class="JS code"
                ><code class="JS">function newTwitterUser(handle) {
    return {
        handle: '@'+handle,
        followers: [],
        addFollower: function(followerHandle) {
            this.followers.push(followerHandle);
        }
    }
}
</code></pre>
              </div>
              <div>
                <h3>F1-5-02 Factory Functions // C3-1 'this Keyword:</h3>
                <p>
                  The this keyword is created in the creation stage of the
                  execution context. The "call site" is the number of the line
                  of code from which a function is called. So if you call a
                  function on line 10 of your code, then line 10 is the call
                  site. The keyword --this-- can refer to:
                </p>
                p
                <ul>
                  <li>The Global Object</li>
                  <li>An instance of a constructor function</li>
                  <li>An object a method is attached to</li>
                  <li>A specific object</li>
                </ul>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C3-2 Misconceptions of this:
                </h3>
                <ol>
                  <li>
                    <code>this</code> does not refer to the function in whose
                    code block it resides Example: the below function, when
                    called, does not log itself. Instead, if we are running this
                    in a browser, it logs Window.
                    <pre
                      class="JS code"
                    ><code class="JS">function whatIsThis() {
    console.log(this);
}
</code></pre>
                  </li>
                  <li>
                    this does not refer to a function's scope. this is, rather,
                    determined by the execution context, i.e. HOW a function is
                    called.
                  </li>
                </ol>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C3-3 Call Site and Execution
                  Context:
                </h3>
                <p>
                  The most important factor in determining --this-- is to check
                  the call site of the function where this is used. When you
                  invoke or call a function, the function creates its own
                  execution context, [which is] a record of [execution metadata]
                  such as where it was called, where it is on the stack, how it
                  was invoked, its Scope Chain, and the value of --this--. There
                  are four different ways to invoke a function:
                </p>
                <ol>
                  <li>Normal function call i.e. greet('jeff');</li>
                  <li>Method i.e. [].push('LeBron');</li>
                  <li>Constructor i.e. new RegExp('[a-zA-Z]');</li>
                  <li>Indirectly i.e. Object.prototype.toString.call([]);</li>
                </ol>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C3-4 --this-- binding rule 1 -
                  default binding rule:
                </h3>
                <p>
                  If you were to use the --this-- keyword in the global scope,
                  meaning, outside of any function body, then --this-- refers to
                  the Global Object:
                </p>
                <pre
                  class="JS code"
                ><code class="JS">console.log(this); //  this === Global object (in browsers, that's the Window object)
</code></pre>
                <p>
                  "By default, --this-- references the Global object for the
                  current runtime environment. Think about it as: if --this-- is
                  not being invoked through --.call()--, or within a method, nor
                  with --new--, then it will revert to default binding, which is
                  the Global scope. What about this example below, for a
                  function defined in the global scope?"
                </p>
                <pre class="JS code"><code class="JS">function whatIsThis() { 
    return this;
}

whatIsThis();

// this ==== Global object, no .call(), nor being
// used in a method, nor a constructor
</code></pre>
                <p>
                  What about this example below, for a nested function within a
                  function defined in the global scope?
                </p>
                <pre class="JS code"><code class="JS">function whatIsThis() {
    return function () {
    	return this;
    }
}

whatIsThis()();

// this ==== Global object, no .call(), nor being
// used in a method, nor a constructor

// <span class = "hghlt">whatIsThis()</span>() is evaluated first, which returns the 
// inner fuction to the global scope, so ultimately it is 
// still the Global Object which is calling the
// inner anonymous function.
</code></pre>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C3-5 --this-- binding rule 2 -
                  implicit binding rule:
                </h3>
                <p>
                  The Implicit Binding Rule describes the case where a
                  <strong>method</strong> references the --this-- keyword. This
                  is also called the "method invocation rule." When a method
                  uses --this--, then --this-- references the object the method
                  is called on. (The object itself doesn't call the method, the
                  call stack is only comprised of little programs, i.e.
                  functions)
                </p>
                <p>Here's an example:</p>
                <pre class="JS code"><code class="JS">var leBron = {
    title: 'King',
    assert: function() {
        return 'I am the ' + this.title;
    }
}
</code></pre>
                <p>
                  In the example above, --leBron.assert()-- will return "I am
                  the King", because --this-- is being used in an object method,
                  therefore --this-- refers to the object the method is called
                  upon.
                </p>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C3-6 --this-- binding rule 3 -
                  explicit binding rule:
                </h3>
                <p>
                  The Explicit Binding Rule for this describes the scenario when
                  --.call()--, --.apply()--, or --.bind()-- is used.
                </p>
                <p>
                  All functions have access to --.call()-- because --.call()--
                  is on --Function.prototype--. Good example of a legitimate
                  --call-- usage:
                </p>
                <pre
                  class="JS code"
                ><code class="JS">var jeff = {first: 'Jeff', last: 'Gore'};
                            
function greet (greeting) {
    console.log(greeting + ' ' + this.first + ' ' + this.last + '!');
}
</code></pre>
                <p>
                  You see the dilemma here. We want the --jeff-- object to be
                  able to call --greet--, but it was defined as a standalone
                  function and not a method of --jeff--. Luckily, we have
                  --call()--, which "calls a function with a given --this--
                  value and arguments provided individually."
                </p>
                <pre
                  class="JS code syntax"
                ><code class="JS">function.call(thisArg, arg1, arg2, ...)</code></pre>
                <pre class="JS code"><code class="JS">greet.call(jeff, "hello");
                                
// returns "hello jeff gore!"</code></pre>
                <p>
                  As you can see, --call() gets the --this-- value first,
                  followed by any arguments that --greet()-- would normally
                  take.
                </p>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C3-6 --this-- binding rule 4 -
                  --new-- binding rule:
                </h3>

                <p class="sidenote">
                  The default return value of a function without an explicitly
                  set --return-- value is --undefined--.
                </p>
              </div>
              <div class="sidenote">
                <h3>What is Test Driven Development (TDD)?</h3>
                <p>Here are the steps in TDD.</p>
                <ol>
                  <li>Before writing any code, write a test for your code.</li>
                  <li>
                    Run test, it will fail, because code is nonexistent. If test
                    does not fail, it's not a real test!
                  </li>
                  <li>
                    Start coding until it passes all tests. (Think of this as a
                    "good enough" rough draft.)
                  </li>
                  <li>
                    Now start refactoring, and as long as the tests pass, you're
                    good!
                  </li>
                </ol>
                <p>
                  Theses tests are often called "unit tests". "One can view a
                  unit as the smallest testable part of an application. Unit
                  testing refers to writing a set of functions that sit next to
                  a given module of program code."
                </p>
                <img src="_images/general_TDDdiagram.jpg" />
              </div>
              <div>
                <h3>F1-5-02 Factory Functions // C2-1 Runtime Environment</h3>
                <p>What is a runtime environment?</p>
                <ul>
                  <li>
                    The runtime environment is the code that runs your code.
                  </li>
                  <li>
                    Usually, the runtime environment uses a lower-level language
                    such as C or C++.
                  </li>
                </ul>
                <p>What does the runtime environemnt do?</p>
                <ul>
                  <li>
                    The runtime environment compiles the code, meaning it adds
                    the variables and functions to memory so our program can
                    call them.
                  </li>
                  <li>
                    Creates contexts and scopes for global and function
                    execution contexts.
                  </li>
                  <li>
                    Pushes "code-executing-code" onto the call stack. (JS's call
                    stack uses a basic "last in, first out" principle.
                  </li>
                  <li>
                    Provides an Event Loop which manages code placed in the
                    Queue.
                  </li>
                </ul>
                <p>
                  Both Google Chrome and node.js use the V8 Engine for its
                  runtime environment.
                </p>
                <p class="todo">
                  Go to the usingTheEventLoop function at 4:30 in the video and
                  try to understand it for a refresher on setTimeout.
                </p>
              </div>
              <div class="sidenote">
                <p>
                  In the call stack in Chrome, when you see (anonymous) at the
                  bottom of the stack, that's the Chrome debugger. Normally that
                  wouldn't be there.
                </p>
              </div>
              <div>
                <h3>F1-5-02 Factory Functions // C2-2 Execution Context</h3>
                <p>
                  Execution context is a record of information when code is
                  executed. Information stored includes:
                </p>
                <ul>
                  <li>WHERE a function is called from (i.e. the call stack)</li>
                  <li>HOW the function is invoked (i.e. method? .call()?)</li>
                  <li>The scope chain</li>
                  <li>The value of --this--</li>
                </ul>
                <p>There are three types of executable code:</p>
                <ul>
                  <li>
                    Global code (anything not inside the body of a function)
                  </li>
                  <li>Function code (inside the body of a function)</li>
                  <li>Eval code</li>
                </ul>
              </div>
              <div class="sidenote">
                <p>
                  Using debugger; in your code will make your runtime
                  environment enter debugging mode at that line when executed.
                </p>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C2-3 Global Execution Context
                </h3>
                <p>Here are the two execution contexts (ECs):</p>
                <ul>
                  <strong>Global</strong
                  >: Created when a program executes, a Global object is created
                  as well, there is only one Global EC per program.
                </ul>
                <ul>
                  <strong>Function</strong
                  >: Created when a function executes.
                </ul>
                <p>
                  What is scope? Scope determines the accessibility of variables
                  and other values in a particular section of your code during
                  runtime (it determines what your program has access to).
                </p>
              </div>
              <div>
                <h3>
                  F1-5-02 Factory Functions // C2-4 How EC is Created Pt. 1,
                  C2-5 How EC is Created Pt. 2
                </h3>
                <p>Every execution context has two stages:</p>
                <ul>
                  <strong>Creation Stage</strong
                  >: Create the scope chain / create variables, functions (with
                  accompanying arguments if applicable) / determine --this--
                  binding.
                </ul>
                <ul>
                  <strong>Execution Stage</strong
                  >: Assign values and execute code!
                </ul>
                <p>
                  In essence your code is read twice (Creation Stage and
                  Execution Stage), and executed once (Execution Stage). This is
                  why you can assign values to variables before they're defined,
                  because in reality, they've already been defined in the
                  Creation stage, and the assignment of value only occurs in the
                  Execution Stage.
                </p>
                <p>
                  For example, this works (function called, and then defined):
                </p>
                <pre class="JS code"><code class="JS">jupiter();

function jupiter() {
    console.log("It's big.");
}
</code></pre>

                <p>...and this doesn't:</p>
                <pre class="JS code"><code class="JS">jupiter();

var jupiter = function() {
    console.log("It's big.");
}
</code></pre>
                <p>
                  Why is this? Because function declarations are processed in
                  the Creation Stage, but value assignments (=) are not
                  processed until the Execution Stage. Below is a good diagram
                  of this courtesy of David Shariff. First is an example
                  function:
                </p>
                <pre class="JS code"><code class="JS">function foo(i) {
    var a = 'hello';
    var b = function privateB() {

    };
    function c() {}
}

foo(22);
</code></pre>
                <p>Here's how it would look in the Creation Stage:</p>
                <pre
                  class="JS code syntax"
                ><code class="JS">fooExecutionContext = {
    scopeChain: { ... },
    variableObject: {
        arguments: {
            0: 22,
            length: 1
        },
        i: 22,
        c: pointer to function c()
        a: undefined,
        b: undefined
    },
    this: { ... }
}
</code></pre>
                <p>And here's how it would look in the Execution Stage:</p>
                <pre
                  class="JS code syntax"
                ><code class="JS">fooExecutionContext = {
    scopeChain: { ... },
    variableObject: {
        arguments: {
            0: 22,
            length: 1
        },
        i: 22,
        c: pointer to function c()
        a: 'hello',
        b: pointer to function privateB()
    },
    this: { ... }
}
</code></pre>
                <p>
                  Did you see that? foo(i) is the example function, and foo's
                  argument i already has its value of 22 in the Creation Stage.
                  That's because function arguments are actually included in the
                  Creation Stage, which may seem like an exception to the rule,
                  but function arguments are not the same as value assignments -
                  there is no use of the = operator.
                </p>
                <p>The --return-- statement is part of the Execution Stage.</p>
                <p>
                  "It is possible to represent each execution context
                  conceptually
                  <span class="toDo"
                    >(is it really conceptual? or does the runtime environment
                    literally create an object that looks like this?)</span
                  >
                  as an object with 3 properties:"
                </p>
                <pre
                  class="JS code syntax"
                ><code class="JS">executionContextObj = {
    'variableObject': { 
        function declarations,
        variable declarations,
        function arguments 
    },
    'scopeChain': {
        variableObject,
        all parent execution contexts' variableObjects 
    },    
    'this': {/* depends on EC */}
}
</code></pre>
                <p>
                  The Variable Object, VO, is where the EC's functions and
                  variables are kept.
                </p>
              </div>
              <div>
                <h3>F1-5-02 Factory Functions // C2-6 Call Stack Basics</h3>
                <p>
                  I knew most of this due to delving into the call stack myself,
                  but one note: "JavaScript is single-threaded, meaning it can
                  execute one task at a time. To manage this, it uses the call
                  stack."
                </p>
              </div>
              <div>
                <h3>F1-5-03 Constructor Functions</h3>
                <p>
                  Here's an advantage of constructor functions over factory
                  functions: When you update the --protoype-- of a constructor
                  function, all objects created from that function - i.e. all
                  instances of the function -- are updated as well, and that
                  property is reflected in their internal prototype __proto__,
                  because constructedObject.__proto__ points to literally the
                  same exact object in memory as constructorFn.prototype!
                </p>
                <pre class="JS code"><code class="JS">function Person(name) {
    this.name = name;
}

var jeff = new Person('Jeff Gore');

Person.prototype.fart = function() {
    console.log("pffffft");
}

jeff.fart();
//console: "pffffft"
</code></pre>
                <p>
                  Just FYI, "__proto__" is pronounced "dunder proto" because of
                  the <u>d</u>ouble <u>u</u>nderscores before and after the word
                  "proto".
                </p>
              </div>
              <div>
                <h3>
                  F1-5-03 Constructor Functions // C5-1 The Prototype Chain
                </h3>
              </div>
              <div>
                <h3>
                  F1-5-03 Constructor Functions // C5-2 Internal Prototype vs
                  func.prototype
                </h3>
                <p>
                  Beware, __proto__ is not the same as prototype, which is a
                  property unique to functions. The only property of prototype,
                  besides __proto__ of course, is constructor, which is a copy
                  of the function itself.
                </p>
                <p>
                  "prototype is the object that is used to build __proto__ when
                  you create an object with new. prototype is not available on
                  the instances themselves (or other objects), but only on the
                  constructor functions."
                </p>
              </div>

              <div>
                <h3>
                  F1-5-03 Constructor Functions // C5-3 Constructor Functions
                  Overview, C5-4 'new'
                </h3>
                <p>
                  I either already knew this stuff or it was covered elsewhere.
                </p>
              </div>

              <div>
                <h3>
                  F1-5-03 Constructor Functions // C5-5 func.prototype property
                  and constructors
                </h3>
                <p>
                  func.prototype is just an object, and because it's an object
                  like any other, it has its own internal prototype (__proto__).
                </p>
                <p>Let's take these two blocks of code:</p>
                <h4>1. Constructor Function</h4>
                <pre
                  class="JS code"
                ><code class="JS">function Baller (pts, rebs, asst) {
  this.pts = pts;
  this.rebs = rebs;
  this.asst = asst;
}</code></pre>
                <h4>2. Creation of Object Using Constructor</h4>
                <pre
                  class="JS code"
                ><code class="JS">var jeff = new Baller(30,12,11);
</code></pre>
                <ul>
                  <li>Baller.prototype is an object.</li>
                  <li>jeff.__proto__ is an object.</li>
                  <li>
                    <strong
                      >These two objects are actually the same object!</strong
                    >
                    In other words, Baller.prototype and jeff.__proto__ are
                    pointers to the exact same object in memory, which would
                    look like this:
                  </li>
                </ul>
                <pre class="JS code syntax"><code class="JS">{
    constructor: Baller,
    __proto__: {..}
}
</code></pre>
                <div>
                  <h3>
                    F1-5-03 Constructor Functions // C5-6 Adding methods to
                    .prototype
                  </h3>
                  <p>
                    How to test if an object came from a specific constructor -
                    use --instanceof-- operator:
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS">jeff instanceof Baller; // returns true 
</code></pre>

                  <p>
                    OK, now to the important part: if you want
                    methods/properties to be shared across all objects created
                    from a given constructor, then those should be added to that
                    constructor function's --prototype-- property AFTER the
                    constructor function declaration.
                  </p>
                  <p>Consider the following constructor:</p>
                  <pre
                    class="JS code"
                  ><code class="JS">function Baller (pts, rebs, asst) {
  this.pts = pts;
  this.rebs = rebs;
  this.asst = asst;
}</code></pre>
                  <p>
                    The properties pts, rebs, and asst will be unique to that
                    constructed object (because --this-- refers to that specific
                    object).
                  </p>
                  <p>
                    The best practice for using constructors is to define them
                    with only this.____ in the function body for properties that
                    would be unique to that specific object, such as "ID",
                    "Name", etc...and then for methods (common) and properties
                    (rarer) that you want ALL objects to share, then add them
                    later, like so:
                  </p>
                  <pre
                    class="JS code"
                  ><code class="JS">Baller.prototype.breakAnkles = function() {
    return 'oh snap!';
}</code></pre>
                  <p>
                    Fullstack has a good explanation of why you should add
                    methods to the prototype later rather than defining a method
                    within the constructor. First, the diagram:
                  </p>
                  <img src="_images/fsa_prototypeMethodsWrong.png" />
                  <p>
                    "Even though this works, notice the same methods are created
                    multiple times on each instance. This can become taxing on
                    the performance of our program since we are using additional
                    memory for each function, even though the functions are
                    identical to each other. Furthermore, if we had a bug in one
                    of our methods, or wanted to update a method, we would need
                    to access each instance and update each method one instance
                    at a time."
                  </p>
                  <p>
                    "How can we refactor our program, so each method is
                    discovered in an instances' prototype chain rather than
                    directly on the instance? We can attach the methods to the
                    constructor functions func.prototype property." Below is a
                    revised diagram:
                  </p>
                  <img src="_images/fsa_prototypeMethodsRight.png" />
                  <p>
                    Now let's revisit that Baller.prototype / jeff.__proto__
                    object from earlier. Here's what it looks like after the
                    above add.
                  </p>
                  <pre class="JS code syntax"><code class="JS">{
    breakAnkles: ƒ ()
    constructor: ƒ Baller(pts, rebs, asst)
    __proto__: Object
}
</code></pre>

                  <div>
                    <h3>
                      F1-5-03 Constructor Functions // C5-7 Nested Constructors
                    </h3>

                    <h3>
                      F1-5-03 Constructor Functions // C5-8 Introduction to
                      Object.create()
                    </h3>
                  </div>
                  <div>
                    <h3>
                      F1-5-03 Constructor Functions // C5-9 Prototype Chains and
                      Methods
                    </h3>
                    <p class="toDo">
                      Give some love to the ES6 .find() method!
                    </p>
                  </div>
                  <div>
                    <h3>F1-5-04 All Kinds of Loops</h3>
                    <p>
                      A for...in loop includes all ENUMERABLE PROPERTIES on both
                      an object AND its prototype chain.
                    </p>
                    <p>
                      What is an enumerable property? "Enumerable properties are
                      those properties whose internal [[Enumerable]] flag is set
                      to true, which is the default for properties created via
                      simple assignment or via a property initializer." See this
                      <a
                        href="https://stackoverflow.com/questions/36535221/what-do-the-colors-mean-in-chrome-developer-tools-scope-panel/36545767#36545767"
                        >excellent Stack Overflow post</a
                      >
                      for an thorough explanation, but basically, it means all
                      the non-built-in properties. In the Google Chrome
                      DevTools, the non-enumerable properties are slightly faded
                      (for example, __proto__).
                    </p>
                    <p>
                      How to get an array of property keys for a given object
                      <i>obj</i>: Object.keys(obj)
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">var jeff = {thug: true, women: Infinity}
var jeffkeys = Object.keys(jeff);

// returns ['thug','women']
</code></pre>
                  </div>
                  <div>
                    <h3>F1-5-04 All Kinds of Loops / C1-4 For Loops</h3>
                    <p>
                      It is possible to have multiple initializations,
                      conditions, and counters in a --for-- loop! Remeber that a
                      for loop head consists of three optional expressions, and
                      you signify the end of those expressions with a semicolon.
                      But one expression can contain multiple assignments, as
                      you see below:
                    </p>
                    <pre class="JS code"><code class="JS">var a = 1, b = 2;
</code></pre>
                    <p>
                      So, using this knowledge of building a multi-assignment
                      expression with comma separation, we can extend that to
                      the for loop:
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">for (var a = 1, b = 26; a &lt;= 26, z &gt;= 1; a++, z--) {
  console.log(a, z);
}

// 1 26
// 2 25
// 3 24
// etc
</code></pre>
                    <p>
                      Another mind-blower: your counter doesn't have to be a
                      number! Makes sense, since, per MDN, the first expression
                      in for loop head is "an expression (including assignment
                      expressions) or variable declaration. Typically used to
                      initialize a counter variable." A couple examples of such
                      for loops (heads only):
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">for (var str = 'x'; str.length &lt; 10; str += 'x');
for (var arr = []; arr.length &lt; 10; arr.push(1));
</code></pre>
                  </div>
                  <div>
                    <h3>
                      F1-5-04 All Kinds of Loops / C1-5 Traversing Objects
                    </h3>
                    <p>
                      Objects can be defined as "an unordered collection of
                      key-value pairs."
                    </p>
                    <p>
                      The most interesting term there is unordered. But wait,
                      isn't there an order?
                    </p>
                    <pre class="JS code"><code class="JS">var umbrella = {
  color: 'red',
  length: 24
}
</code></pre>
                    <p>
                      Is it not the case that 'color' is first, and 'length'
                      'second?
                    </p>

                    <p>
                      Well, yes and no. There is an "insertion order", but then
                      there is a "traversal order."
                      <a
                        href="http://2ality.com/2015/10/property-traversal-order-es6.html"
                        >See this post</a
                      >
                      for more details on how engines traverse objects per the
                      ES6 specs.
                    </p>
                    <p>What's important to know is:</p>
                    <ul>
                      <li>
                        <p>
                          using a for...in loop does not guarantee the
                          properties will be returned in insertion order. Using
                          this on an array is a bad idea!
                        </p>
                        <pre
                          class="JS code"
                        ><code class="JS">var myArray = [0, 1, 2, 3, 4, 5];
for (var index in myArray) {
    console.log(myArray[index+1]);
}

// index is a string, because all props are strings,
// so first pass will be:
// myArray['0' + 1]
// myArray['01'] - which is undefined

// This loop will log 'undefined' six times.
</code></pre>
                      </li>
                      <li>
                        again, A for...in loop includes all ENUMERABLE
                        PROPERTIES on both an object AND its prototype chain.
                      </li>
                    </ul>
                    <p>
                      There are instance methods, and there are class methods.
                    </p>
                    <ul>
                      <li>
                        <h4>
                          Instance method example: lebron.hasOwnProperty('king')
                        </h4>
                        <p>
                          This is considered an instance method because it is
                          called on an object that is an instance of a
                          prototype, which is effectively a class. It is called
                          directly on the instance object.
                        </p>
                      </li>
                      <li>
                        <h4>Class method example: Object.keys(myInventory)</h4>
                        <p>
                          This is considered a class method because it is called
                          on the larger "class" of Object, with the instance
                          object passed in as an argument.
                        </p>
                      </li>
                    </ul>
                  </div>
                  <div>
                    <h3>F1-5-05 Functions and Closure</h3>
                    <p>
                      A HIGHER-ORDER FUNCTION either (1) takes a function as its
                      argument or (2) returns a function.
                    </p>
                  </div>
                  <div>
                    <h3>
                      F1-5-05 Functions and Closure / C6-1 Dive Into Functions,
                      C6-2 Function --arguments-- keyword
                    </h3>
                    <p>
                      Functions are CALLABLE objects. --typeof-- returns
                      "function" because it is a callable object. But a function
                      ultimately is still just an object, and you can add
                      properties.
                    </p>
                    <p class="sidenote">
                      We already know about the instance method
                      obj.hasOwnProperty(). But there is related class method
                      called Object.getOwnPropertyNames(). Pass in an object,
                      and you will get an array of the object's enumerable AND
                      non-enumerable properties.
                    </p>
                    <p>
                      Let's see what happens when we view all of the properties
                      of the Function.prototype object:
                    </p>
                    <img src="_images/FunctionObjectProperties.png" />
                    <p>...and let's go into a few of these properties:</p>
                    <ul>
                      <li>
                        <p>
                          <strong>length</strong>: this refers to the
                          <em>arity</em> of the function, which in math/comp sci
                          terms, is the number of arguments <em>expected</em> by
                          the function, or in JS terms, the number of parameters
                          in the function's definition.
                        </p>
                      </li>
                      <li>
                        <p>
                          <strong>name</strong>: this is the function's name.
                          Priority goes first to names given in a function
                          declaration, next to the name of the variable if a
                          function is assigned to it. Examples below:
                        </p>
                        <pre
                          class="JS code"
                        ><code class="JS">function hello (){}             // name: 'hello'
var hi = function hello (){}    // name: 'hello'
var hi = function (){}          // name: 'hi'
function (){}                   // name: ''
</code></pre>
                        <p>
                          Those first three examples could actually be entered
                          into code verbatim without an error, but the last one
                          could not stand alone; it would have to be a callback
                          function of some type.
                        </p>
                      </li>
                      <li>
                        <p>
                          <strong>caller</strong>: this is a reference to the
                          function that is calling the function. Note that "the
                          caller property is defined for a function only while
                          that function is executing. " If the function is being
                          called at the global level, then this would be
                          --null--.
                          <span class="toDo"
                            >Note: caller was showing --null-- for a callback
                            function used by --.reduce()--, I'm not sure how
                            that property works for CBs...</span
                          >
                        </p>
                        <p class="warning">
                          A warning from MDN about function.caller: "This
                          feature is non-standard and is not on a standards
                          track. Do not use it on production sites facing the
                          Web: it will not work for every user. There may also
                          be large incompatibilities between implementations and
                          the behavior may change in the future."
                        </p>
                      </li>
                      <li>
                        <p id="funcArgumentsKeyword">
                          <strong>arguments</strong>: this is an "array-like
                          object" of all arguments supplied to the function.
                          This is useful because a function can accept any
                          number of arguments and this a good way to capture a
                          variable number of arguments that may not be able to
                          neatly fit into a pre-defined parameter. Note that MDN
                          recommends you simply use the --arguments-- local
                          variable within the function, rather than invoking
                          arguments as a property of the function (i.e.
                          func.arguments). Note also that this property is not
                          available to arrow functions.
                        </p>
                        <p>
                          What do we mean by "array-like object"? Well, it looks
                          like an array:
                        </p>
                        <pre class="JS code"><code class="JS">function hello() {
    var greetees = [];
    for (let i = 0; i &lt; arguments.length; i++) {
        greetees.push(arguments[i])
    }
    return "Hello: " + greetees.join(', ');
}

hello('John','Brad','Rob','Bae');
// returns "Hello: John, Brad, Rob, Bae"
</code></pre>
                        <p>
                          ...but in fact its internal prototype is linked to
                          Object, not Array. Why does this matter? Well, check
                          this error out:
                        </p>
                        <pre class="JS code"><code class="JS">...
greetees.push(arguments.slice(1))
...

<span class = "warning">Uncaught TypeError: arguments.slice is not a function</span>
</code></pre>
                        <p>
                          You know why. slice() is not in arguments' prototype
                          chain because arguments is not really an array.
                          Solution? CALL, baby!
                        </p>
                        <pre class="JS code"><code class="JS">...
greetees.push(Array.prototype.slice.call(arguments, 1))
...
<span class = "comment">// arguments satisfies the parameter of call that
// expects the this value, then
// every argument thereafter is that of the called
// function, translating to slice(1)</span>
</code></pre>
                        <p>
                          On another note, the --arguments-- object has a
                          property --callee-- which is a reference to the
                          currently executing function.
                        </p>
                        <p class="sidenote">
                          If you use the Array slice() function without
                          arguments, then it simply makes a copy of the array.
                        </p>
                      </li>
                    </ul>
                  </div>
                  <div>
                    <h3>
                      F1-5-05 Functions and Closure / C6-3 Higher-Order
                      Functions
                    </h3>
                    <p>
                      Reminder: you call a function nested within another
                      function by calling the outer function, then adding an
                      extra pair of parentheses:
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS"><span style = "color:blue">createsAFn()</span><span style = "color:lawngreen">()</span>
// as soon as the first pair of parentheses is encountered,
// createsAFn is called, then returns returnedFn, then
// the second pair of parentheses calls returnedFn
<span style = "color:blue">returnedFn</span><span style = "color:lawngreen">()</span>
</code></pre>
                    "Decorating" a function means creating a new version of a
                    function, by accepting the function as an argument and
                    executing that function but with extras or changes.
                    <pre
                      class="JS code"
                    ><code class="JS">function decoratedFunc() {
    /* new, extra, stuff - the decoration */
    originalFunc();
}
</code></pre>
                    <p class="sidenote">
                      JavaScript is cool: functions are objects. "In many
                      [other] languages, functions are simply subroutines and
                      are not capable of being passed around as a value.
                    </p>
                  </div>
                  <div>
                    <h3>
                      F1-5-05 Functions and Closure / C4-1 Introduction to Scope
                    </h3>
                    <p>
                      <strong>Scope</strong> "determines the accessibility of
                      identifiers and values in a particular section of your
                      code." In other words, scope determines what your program
                      has access to.
                    </p>
                    <pre class="JS code"><code class="JS">var city = 'NYC';
                                        
function logCity() {
    var city = 'CHI'; 
    console.log(city);
}

// logs 'CHI' because local scope variables have 
// precedence over global scope
</code></pre>
                    <p>
                      The <strong>global scope</strong> simply refers to the
                      global object, whatever that may be.
                    </p>
                    <p>
                      The <strong>local scope</strong> is created in a function
                      execution context and consists of:
                    </p>
                    <ul>
                      <li>
                        locally-defined variables attached to the function EC's
                        variable object*
                      </li>
                      <li>reference to the parent scope</li>
                    </ul>
                    <p>
                      <i
                        >*Again, the variable object (VO) is something that only
                        our runtime environment has access to, not us.</i
                      >
                    </p>
                  </div>
                  <div>
                    <h3>
                      F1-5-05 Functions and Closure / C4-2 The Scope Chain
                    </h3>
                    <p>
                      "The <strong>scope chain </strong> is the mechanism used
                      by a JS runtime that references a chain of parent scopes
                      to resolve an identifer."
                    </p>
                    <p>
                      So if a function references the variable --lemon--, it
                      will first look in its local scope, then its parent's
                      scope, then its parent's parent's scope, and so on. Below
                      is an infographic example from Fullstack:
                    </p>
                    <img src="_images/fsa_ScopeChainExample.png" />
                    <p>
                      Reference errors occur when a variable is not found at any
                      scope on or above the caller's local scope.
                    </p>
                    <p class="toDo">
                      Scott at 4:44: "All functions always have a reference to
                      themselves." What does that mean? I think he's referring
                      to the function's prototype property, which itself is an
                      object containing a constructor property, which is the
                      function itself.
                    </p>
                    <p>
                      For every execution context (EC) there is a scope chain
                      connected to it. As you can see from the diagram above,
                      the scope chain within an EC contains a reference to the
                      variable object within that same EC.
                    </p>
                    <p>
                      Again, scope chain is merely the sum of the local VO with
                      all parent VOs (not any siblings, i.e. if functions are
                      declared one after another, they don't have access to each
                      others' variables.)
                    </p>
                  </div>
                  <div>
                    <h3>F1-5-05 Functions and Closure / C4-3 Shadowing</h3>
                    <p>
                      <strong>Shadowing</strong> "occurs when a variable
                      declared within a certain scope (decision block, method,
                      or inner class) has the same name as a variable declared
                      in an outer scope." Scroll up to the example in C4-1 to
                      see what I'm talking about.
                    </p>
                  </div>
                  <div>
                    <h3>
                      F1-5-05 Functions and Closure / C4-4 Lexical vs. Dynamic
                      Scoping
                    </h3>
                    <p>
                      There are two main types of scopes in programming
                      languages:
                    </p>
                    <ul>
                      <li>Lexical Scope</li>
                      <li>Dynamic Scope</li>
                    </ul>
                    <p>JavaScript does not have Dynamic Scope.</p>
                    <p>
                      The below works because it obeys the laws of lexical
                      scoping - logger() is defined within the definition of
                      manhattan(), therefore manhattan is in logger's scope
                      chain. When --chelsea-- is not found in logger, we go up
                      the scope chain to manhattan, and it is found:
                    </p>
                    <pre
                      class="valid JS code"
                    ><code class="JS">function manhattan() {
  var chelsea = 'chelsea';
  function logger() {
    console.log(chelsea);
  }
  logger();
}

manhattan();
</code></pre>
                    <p>
                      The below does not work because JS does not implement
                      dynamic scoping. If it were dynamic, then when logger was
                      called it could look to the scope of whatever function was
                      calling it at the time.
                      <strong
                        >But JS's scope chain is structured around where
                        functions are <em>defined</em>, not where they're
                        executed.
                      </strong>
                    </p>
                    <pre
                      class="invalid JS code"
                    ><code class="JS">function manhattan() {
  var chelsea = 'chelsea';
  logger();
}

function logger() {
  console.log(chelsea);
}

manhattan();
</code></pre>
                  </div>
                  <div>
                    <h3>
                      F1-5-05 Functions and Closure / C4-5 Introduction to
                      Closure
                    </h3>
                    <p>
                      "Closures are functions that keep track of variables from
                      their containing/enclosing scopes. In other words, closure
                      is when a function is able to remember and access its
                      lexical scope even when that function is executing outside
                      its lexical scope."
                    </p>
                    <p>
                      Closures refer to variables defined in outer, enclosing
                      functions even after those outer functions have returned
                      (returned is equivalent to ‘exiting’). Thus, closures
                      outlive the functions that made them.
                    </p>
                    <pre class="JS code"><code class="JS">function sum() {
  var startVal = Math.floor(Math.random()*100)+1;
  return function(num) {
    return startVal + num;
  }
}

var xPlus1to100_1 = sum();
var xPlus1to100_2 = sum();
var xPlus1to100_3 = sum();

xPlus1to100_1(5); // 55
xPlus1to100_2(5); // 13
xPlus1to100_3(5); // 64
</code></pre>
                    <p>
                      The new function xPlus1to100 creates a closure around
                      startVal, freezing that variable in time, however it
                      looked when the function is returned. That's why we can
                      create three new variables with the same function and pass
                      it the same argument and get different results.
                    </p>
                    <p>
                      Google DevTools is even cool enough to show you closures
                      during a function's execution.
                    </p>
                    <img src="_images/closureInGoogleDevTools.png" />
                    <p class="toDo">
                      Closures are only created when functions are returned,
                      right?
                    </p>
                    <p>
                      The "lexical environment" can be thought of as the code
                      block <em>within which</em> a function is defined.
                    </p>
                  </div>
                  <div>
                    <h3>F2-2-06 Functional Programming</h3>
                    <p>
                      <strong>Functional programming</strong> is a programming
                      paradigm, which can be thought of as style of programming
                      or a school of thought about programming. Other paradigms
                      include imperative programming and object-oriented
                      programming.
                    </p>
                  </div>
                  <div>
                    <h3>
                      F1-5-06 Functional Programming / C6-4 So what is
                      functional programming, anyway?
                    </h3>
                    <p>First, let's talk about other paradigms:</p>
                    <ul>
                      <li>
                        <p>
                          <strong>Imperative</strong>: performs commands line by
                          line, in order. There are "side effects" - when
                          execution of the code affects something outside of the
                          program itself. C is primarly an imperative language
                        </p>
                      </li>
                      <li>
                        <p>
                          <strong>Object-Oriented</strong>: Java is a good
                          example of this, and of course JS is itself
                          object-oriented, see my personal materials for more.
                        </p>
                      </li>
                    </ul>
                    <p>Alright, now for functional programming tenets:</p>
                    <ul>
                      <li>
                        <p>
                          <strong>Pure Functions</strong>: Pure functions do not
                          produce side effects,which includes affecting global
                          variables. They are onliy concerned with the arguments
                          passed to them and the code inside them. Data In, Data
                          Out.
                        </p>
                      </li>
                      <li>
                        <p>
                          <strong>Immutable Data</strong>: New values are
                          computed rather than modifying existing values. An
                          example would be making a copy of a variable, then
                          editing that variable, rather than the original..
                        </p>
                      </li>
                      <li>
                        <p>
                          <strong>Functions are Values</strong>: These functions
                          are passed around between each other as values.
                          Functions that are passed into other functions are
                          called callback functions.
                        </p>
                      </li>
                    </ul>
                  </div>
                  <div>
                    <h3>
                      F1-5-06 Functional Programming / C6-5 Understanding .map()
                    </h3>
                    <p>
                      .map() is named as such because in programming, a map is a
                      pairing of one set to another:
                    </p>
                    <img src="_images/fsa_MapDiagram.png" width="300px" />
                    <p>
                      "In many programming languages, map is the name of a
                      higher-order function that applies a given function to
                      each element of a list, returning a list of results in the
                      same order."
                    </p>
                    <p>
                      Remember that you can chain methods, so this is possible:
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">[1,3,5].map((x) =&gt; {return x + 2}).map((x) =&gt; {return x * 2});
// returns [6, 10, 14]
</code></pre>
                  </div>
                  <div>
                    <h3>
                      F1-5-06 Functional Programming / C6-6 Understanding
                      .reduce()
                    </h3>
                    <p>
                      "Reduce", aka "fold", "accumulate", "aggregate", or
                      "concentrate", is a computer science term meaning to
                      combine the pieces of a collection into one unit. In
                      computer science you'd say "reducing a collection."
                    </p>
                    <p>
                      Array.prototype.reduce() can be called a "combiner
                      function." First, let's look at reduce in action, then
                      we'll break it down:
                    </p>
                    <pre class="JS code"><code class="JS">var arr = [1,2,3,4,5];
function addingFunc(sum, curElement) {
    return sum + curElement;
}

var sumPlus3 = arr.reduce(addingFunc, 3)
// sumPlus3 === 18
</code></pre>
                    <p>
                      As you can see, reduce is a pretty simple function - on
                      the surface. It takes a callback function as its first
                      argument, and the second argument, which specifies the
                      initial value pre-aggregation, is optional. Here's the
                      syntax:
                    </p>
                    <pre
                      class="JS code syntax"
                    ><code class="JS">arr.reduce(callback[, initialValue])
</code></pre>
                    <ul>
                      <li>
                        If initialValue <u>is</u> provided, then reduce executes
                        the callback for
                        <strong>each and every element</strong> in the array.
                      </li>
                      <li>
                        "If initialValue <u>isn't</u> provided, reduce() will
                        execute the callback function
                        <strong
                          >starting at index 1, skipping the first [array
                          element]."</strong
                        >
                      </li>
                    </ul>
                    <p>
                      Either way, reduce is executing a callback function which
                      determines <em>how</em> exactly the array will be reduced.
                      How does this work? Well, regardless of the callback
                      function, reduce will be passing it four arguments:
                    </p>
                    <ol>
                      <li>
                        <strong>accumulator</strong>: "The accumulator
                        accumulates the callback's return values; it is the
                        accumulated value previously returned in the last
                        invocation of the callback, or initialValue, if
                        supplied."
                      </li>
                      <li>
                        <strong>currentValue</strong>: "The current element
                        being processed in the array."
                      </li>
                      <li>
                        <strong>currentIndex</strong>: "The index of the current
                        element being processed in the array. Starts at index 0,
                        if an initialValue is provided, and at index 1
                        otherwise."
                      </li>
                      <li>
                        <strong>array</strong>: "The array reduce() was called
                        upon."
                      </li>
                    </ol>
                    <p>
                      Most likely your callback function will only need two
                      parameters, corresponding to --accumulator-- and
                      --currentValue--.
                    </p>
                    <p>
                      Let's go through the above function again, though this
                      time, with the function passed anonymously to reduce:
                    </p>
                    <pre class="JS code"><code class="JS">var arr = [1,2,3,4,5];
var sumPlus3 = arr.reduce(function (sum, curElement) {
    return sum + curElement;
}, 3)

<span class = "comment">//// PSEUDOCODE
// FIRST PASS
Initial Value provided? YES. Accumulator = reduce's initialValue.
arr.reduce(
    callback([accumulator], [currentValue])
    callback(reduceInitialValue, arr[0])
    callback(3, 1)
    return value: 4
)

// SECOND PASS
arr.reduce(
    callback([accumulator], [currentValue])
    callback(firstReduceReturn, arr[1])
    callback(4, 2)
    return value: 6
)

// AND SO ON</span>
</code></pre>
                    <p>
                      And now let's go through the scenario in which reduce() is
                      <u>not</u> provided an initial value:
                    </p>
                    <pre class="JS code"><code class="JS">var arr = [1,2,3,4,5];
var plainOlSum = arr.reduce(function (sum, curElement) {
    return sum + curElement;
})

<span class = "comment">//// PSEUDOCODE
// FIRST PASS
Initial Value provided? NO. Accumulator = arr[0].
arr.reduce(
    callback([accumulator], [currentValue])
    callback(arr[0], arr[1])
    callback(1, 2)
    1 + 2
    3
    return value: 3
)

// SECOND PASS
arr.reduce(
    callback([accumulator], [currentValue])
    callback(firstReduceReturn, arr[2])
    callback(3,3)
    3 + 3
    6
    return value: 6
)

// AND SO ON</span>
</code></pre>
                    <div class="sidenote">
                      <p>Note that the function provided below:</p>
                      <pre
                        class="JS code"
                      ><code class="JS">arr.reduce(function (sum, curElement) {
    return sum + curElement;
}, 0)
</code></pre>
                      <p>
                        ...can be written even more concisely with arrow syntax
                        and shorter (albeit less descriptive) variable names:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">arr.reduce((a, b) =&gt; a + b, 0);
</code></pre>
                    </div>
                    <p>
                      Alright, that was baby stuff, let's get to a more complex
                      example.
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">var twoDimArray = [[1,2],[3,4],[5,6,7]];
var flattened = twoDimArray.reduce(function(flattened, arr) {
    returned flattened.concat(arr);
})

<span class = "comment">//// PSEUDOCODE
// FIRST PASS
Initial Value provided? NO. Accumulator = arr[0].
arr.reduce(
    callback([accumulator], [currentValue])
    callback(arr[0], arr[1])
    callback([1,2],[3,4])
    [1,2].concat([3,4])
    [1,2,3,4]
    return value: [1,2,3,4]
)

// SECOND AND FINAL PASS
arr.reduce(
    callback([accumulator], [currentValue])
    callback(firstReduceReturn, arr[2])
    callback([1,2,3,4],[5,6,7])
    [1,2,3,4].concat([5,6,7])
    [1,2,3,4,5,6,7]
    return value: [1,2,3,4,5,6,7]
)</span>
</code></pre>
                    <p>
                      That was still generally baby-like, here's something even
                      more complex.
                    </p>
                    <pre
                      class="JS code"
                    ><code class="JS">function myFilter(arr, filterFunc) {
  return arr.reduce(function(filtered, element) {
<span class = "comment">    // if the filter function executed on the current
    // element evaulates to something truthy, then
    // let's push that to the return array.</span>
    if (filterFunc(element)) {
        filtered.push(element);
    }
    return filtered;
  }, [])
}

var evensOnly = myFilter([1,2,3,4,5], function (num) {
    return num % 2 === 0;
})

<span class = "comment">//// PSEUDOCODE
// FIRST PASS
Initial Value provided? YES. Accumulator = reduce's initialValue.
arr.reduce(
    callback([accumulator], [currentValue])
    callback(reduceInitialValue, arr[0])
    callback([], 1)
    1 is not even, so nothing is pushed to array.
    return value: []
)

// SECOND PASS
arr.reduce(
    callback([accumulator], [currentValue])
    callback(firstReduceReturn, arr[1])
    callback([], 2)
    2 is even, therefore it is pushed to array.
    return value: [2]
)</span>
</code></pre>
                    <div class="sidenote">
                      <p>
                        Please note that the above is never a function you
                        should actually use, since you have
                        Array.prototype.filter which can accomplish this much
                        more easily:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">[1,2,3,4,5].filter(function (num) {
    return num % 2 === 0;
})</code></pre>
                    </div>
                    <div>
                      <h3>
                        F2-2-06 Functional Programming / C6-7 Intro to Recursion
                      </h3>
                      <p>
                        "Recursion is formed from two parts: the base case and
                        the recursive case."
                      </p>
                      <ul>
                        <li>
                          The <strong>base case</strong> defines the condition
                          when the function should no longer call itself.
                        </li>
                        <li>
                          The <strong>recursive case </strong>calls the function
                          again, altering the arguments so you get closer to the
                          base case.
                        </li>
                      </ul>
                      <p>
                        The code of a recursive function often looks like this:
                      </p>
                      <pre
                        class="JS code syntax"
                      ><code class="JS">if (some condition)
  return a value (base case)
else
  recurse, getting closer to the base</code></pre>
                      <p>
                        Let's look at a real example of this with a function
                        that repeats a string:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">function repeat(str,num) {
    if(!num) {
      return '';
    }
    return str + repeat(str, num - 1);
}

<span class = "comment">/*
If we call repeat('hi', 3), here's what happens:

return 'hi' + repeat('hi', 2);
  return 'hi' + repeat('hi', 1);
    return 'hi' + repeat('hi', 0);
    'hi' + '';
  'hi' + ('hi' + '')
'hi' + ('hi' + ('hi' + ''))

Final return: 'hihihi'
*/</span>
</code></pre>
                      <p>
                        If the same line of code appears in your base case and
                        recursive case, then your base case is probably
                        incorrect.
                      </p>
                      <p>
                        Here's another example: here, we'll create our own
                        forEach function. Like the standard
                        Array.prototype.forEach, this function "returns the
                        value undefined.... The typical use case is to execute
                        side effects."
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">function forEach(arr, func) {
  if (arr.length) {
    func(arr[0]);
    forEach(arr.slice(1), func);
  }
}

<span class = "comment">/*
If we call forEach([1,2,3],console.log), here's what happens:

forEach([1,2,3],console.log)
  console.log(1)
  forEach([2,3], console.log)
    console.log(2)
    forEach([3], console.log)
      console.log(3)
      forEach([], console.log)
      return undefined

    return undefined

  return undefined
  
return undefined  
*/</span>
</code></pre>
                      <p>
                        Here's yet another example, since we really want to
                        hammer this difficult concept home. Although this is
                        back at baby-level in terms of difficulty. Below we will
                        pretend that Array.length does not exist, and we will
                        create a recursive function to return the length of an
                        array:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">function countElements(arr) {
  if(arr.length) {
    return 1 + countElements(arr.slice(1));
  }
  return 0;
}

<span class = "comment">/*
If we call countElements(['hi','you','guys']), here's what happens:

countElements(['hi','you','guys'])
  return 1 + countElements(['you','guys'])
    return 1 + countElements(['guys'])
      return 1 + countElements([])
      return 1 + 0
    return 1 + (1 + 0)
  return 1 + (1 + (1 + 0))
  
Final return: 3
*/</span>
</code></pre>
                    </div>
                  </div>
                  <div>
                    <h3>F2-2-07 Prototypical Inheritance</h3>
                    <div class="sidenote">
                      <pre class="JS code"><code class="JS">function Bear() {};
var smokey = new Bear();

console.log(<span class = "hghlt">Bear.prototype.isPrototypeOf(smokey)</span>)
// true
</code></pre>
                      <p>
                        The obj1.isPrototypeOf(obj2) method searches the
                        prototype chain of obj2 for obj1. It asks: does
                        obj2.__proto__ equal obj1.prototype?
                      </p>
                      <p>
                        The question posed by
                        <span class="hghlt"
                          >Bear.prototype.isPrototypeOf(smokey)</span
                        >
                        is, figuratively:
                      </p>
                      <ul>
                        <li>
                          Is smokey.__proto__ one and the same as
                          Bear.prototype?
                        </li>
                        <li>
                          Put differently, does smokey's internal blueprint
                          match the blueprint used for Bears?
                        </li>
                      </ul>
                      <p>And the answer is yes.</p>
                      <p>
                        Let's say that we have a more broad constructor, Mammal,
                        which we'd like Bear to be based upon.
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">Bear.prototype = Object.create(Mammal.prototype);
Bear.prototype.constructor = Bear;
</code></pre>
                      <p>
                        A bear is a mammal after all, so above we are saying
                        "set the internal blueprint of Bear to a new empty
                        object whose own internal blueprint is that of Mammal.
                        Let's do this first before getting into the particulars
                        of bears."
                      </p>
                      <p>
                        Not all mammals, however, have the ability to scratch
                        their ass. So we will give Bears this ability:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">Bear.prototype.scratchAss = function(){return 'ahh';};
</code></pre>
                      <p>
                        Let's test out our obj1.isPrototypeOf(obj2) function out
                        again:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">Mammal.prototype.isPrototypeOf(Bear) <span class = "comment">// false
                      
// Why? Bear is the constructor function, therefore 
// its internal prototype (__proto__) equals 
// Function.prototype.
</span>
Mammal.prototype.isPrototypeOf(Bear.prototype) <span class = "comment">// true

// The internal blueprint for a bear blueprint, which is
// Bear.prototype.__proto__, is equal to the blueprint
// for mammals, which is Mammal.prototype.</span>
</code></pre>
                      <p>
                        Let's create a larger prototype chain for myself. The
                        object will be named jeff, and it will be based on this
                        chain of constructors:
                      </p>
                      <ul>
                        <li>Orlandoan</li>
                        <li>Floridian</li>
                        <li>American</li>
                      </ul>
                      <pre
                        class="JS code"
                      ><code class="JS">function Orlandoan() {};
function Floridian() {};
function American() {};

Floridian.prototype = Object.create(American.prototype);
Orlandoan.prototype = Object.create(Floridian.prototype);

American.prototype.voteForPres = function(vote){
  return 'I voted!'
};

var jeff = new Orlandoan();
jeff.voteForPres();
</code></pre>
                      <p>
                        An "object’s internal [[prototype]] linkage defines
                        where the [[Get]] operation will look next." Here's the
                        traversal of the prototype chain when .voteForPres() is
                        called on jeff.
                      </p>
                      <ol>
                        <li>
                          Does voteForPres() exist directly on the jeff object?
                        </li>
                        <li>
                          No, check jeff's internal prototype, jeff.__proto__,
                          which is the same as Orlandoan.prototype.
                        </li>
                        <li>
                          No, check Orlando.prototype.__proto__, which is the
                          same as Floridian.prototype.
                        </li>
                        <li>
                          No, check Floridian.prototype.__proto__, which is the
                          same as American.prototype.
                        </li>
                        <li>Yes, it's there, execute function.</li>
                      </ol>
                    </div>
                    <div>
                      <h3>Checkpoint 1 Feedback - 1, Object.keys</h3>
                      <p>How can this code be refactored?</p>
                      <pre
                        class="JS code"
                      ><code class="JS">function findObjKeys(obj) {
    var objProps = Object.keys(obj);
    return objProps.join(", ")
}</code></pre>
                      <p>
                        "Array methods can be joined, so findObjKeys can simply
                        be:"
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">function findObjKeys(obj) {
    return Object.keys(obj).join(", ")
}</code></pre>
                    </div>
                    <div>
                      <h3>Checkpoint 1 Feedback - 2, Closure</h3>
                      <p>
                        Closure applies to the below returned object, so that
                        .getSecret() returns the secret that was passed in at
                        that particular time - true or false?
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">function dontSpillTheBeans(secret) {
  return {
    getSecret: function() { return secret; },
    setSecret: function(v) { secret = v; }
  };
}</code></pre>
                      <p>
                        True. Both functions are part of an object that is
                        returned they have references to that the external
                        variable --secret--.
                      </p>
                      <p>
                        Analogy coming to me. When you return a function, that
                        is the equivalent of a transaction...it is passing from
                        the hands of the parent function into another scope. In
                        commerce, a product transaction often qualifies the
                        product as "as-is", and conditions that existed at the
                        time of purchase are often guaranteed indefinitely for
                        customer satisfaction.
                      </p>
                      <p>
                        Therefore returning a function with a reference to a
                        condition outside of itself is like buying a car with a
                        special warranty package - sure, the car company could
                        discontinue that offer a month later, but that instance,
                        YOUR instance, of that car purchase is still under that
                        sweet warranty deal for the next 3 years. That offer was
                        part of the environment at the time, and making a
                        transaction in that environment at that time allowed you
                        to essentially "lock in" those conditions.
                      </p>
                      <p>
                        In that same way, functions which are returned and refer
                        to something in a parent scope rightfully refer to the
                        environment that existed when they were created.
                      </p>
                      <p>
                        Not to say that that version of their external
                        environment can't be changed. See: setSecret, which
                        changes the value of the secret parameter in the
                        returned object's parent scope. "Closures store
                        references to variables defined within their enclosing
                        scopes rather than copying their values. So any changes
                        to these variables are accessible to the closure."
                      </p>
                    </div>
                    <h2>Foundations Pt. 4 - Guessing Game Pt. 3 - JQuery</h2>
                    <div>
                      <h3>F4-3-01-JQ01 Intro to jQuery</h3>
                      <p>
                        Remember that "the Document Object Model (DOM) is an
                        application programming interface (API) for HTML and XML
                        documents."
                      </p>
                      <p>
                        When a browser receives a webpage, it starts building a
                        DOM, node by node. "Before the browser can render the
                        page, it needs to construct the DOM and CSSOM trees."
                      </p>
                      <p>
                        "...the DOM always becomes ready before the page is
                        fully loaded."
                      </p>
                      <p>
                        "HTML markup is transformed into a Document Object Model
                        (DOM); CSS markup is transformed into a CSS Object Model
                        (CSSOM)," these data structures are independent from
                        each other.
                        <a
                          href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model"
                          >Quotes courtesy of this Google article that I really
                          should read more.</a
                        >
                      </p>
                      <p>
                        "Different browsers have different implementations of
                        the DOM, and these implementations exhibit varying
                        degrees of conformance to the actual DOM standard ...
                        but every web browser uses some document object model to
                        make web pages accessible via JavaScript."
                      </p>
                      <p>
                        We want jQuery to be operating on our fully created DOM.
                        In order to do that we can house our code within an
                        anonymous function passed as an argument to
                        $(document).ready:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">$(document).ready(function() {
  // code here
}</code></pre>
                      <p>
                        This is all housed in one anonymous function because the
                        spec states that ready() "specifies a function to
                        execute when the DOM is fully loaded."
                      </p>
                      <p class="sidenote">
                        Interesting: it appears that $(document).ready() is now
                        deprecated and the ideal shorthand is to simply put your
                        anonymous function inside of a jQuery object, i.e.
                        $([handler]). "The $ function calls the
                        $(document).ready function when passed a function as an
                        argument."
                      </p>
                      <p>
                        In jQuery, here's how you'd set the text of all
                        &lt;h2&gt; elements to "CAW".
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">$('h2').text('CAW');</code></pre>
                      <p>
                        Like many jQuery methods, .text() is both a getter and a
                        setter. When used without arguments, it "gets the
                        combined text contents of each element in the set of
                        matched elements, including their descendants." When
                        used as a setter, it "sets the text contents of the
                        matched elements."
                      </p>
                    </div>
                    <div>
                      <h3>F4-3-01-JQ02 Traversing the DOM</h3>
                      <p>
                        As you know, jQuery objects are created by passing
                        arguments to $([arg]), and one type of said [arg] can be
                        a CSS selector. But jQuery also has its own special
                        selectors called "jQuery extensions" which differ from
                        "pure" CSS selectors.
                      </p>
                      <p>
                        An example of this are the :odd and :even selectors,
                        which do not exist in the CSS spec. Crucial to
                        understand about these selectors is that they're
                        zero-indexed - , so "counter-intuitively, :odd selects
                        the second element, fourth element, and so on within the
                        matched set." Here's an example:
                      </p>
                      <pre
                        class="HTML code"
                      ><code class="HTML">&lt;p&gt;Paragraph 1 - Index 0&lt;/p&gt;
&lt;p&gt;Paragraph 2 - Index 1&lt;/p&gt;
&lt;p&gt;Paragraph 3 - Index 2&lt;/p&gt;
&lt;p&gt;Paragraph 4 - Index 3&lt;/p&gt;</code></pre>
                      <pre
                        class="JS code"
                      ><code class="JS">let oddPars = $('p:odd')
  
// oddPars = Paragraphs 2 and 4, beause in a 0-based-index, 
// they are at positions 1 and 3.  </code></pre>
                      <p>I don't think I need to explain how :even works.</p>
                      <p>
                        You may be tempted to get whatever object you desire on
                        the page by feeding jQuery a CSS selector, perhaps an
                        elaborate one. But the preferred method is traversal.
                        What do we mean by that? Let's look at the selector
                        strategy and the traversal strategy side by side.
                      </p>
                      <table style="width: 100%">
                        <thead>
                          <tr>
                            <td>Selector</td>
                            <td>Traversal</td>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>$('#destinations li')</td>
                            <td>$('#destinations').find('li')</td>
                          </tr>
                          <tr>
                            <td>$('#destinations &gt; li')</td>
                            <td>$('#destinations').children('li')</td>
                          </tr>
                          <tr>
                            <td>$('li:first')</td>
                            <td>$('li').first()</td>
                          </tr>
                        </tbody>
                      </table>
                      <p>
                        With traversal, we make our initial CSS selector less
                        specific, and then "walk the DOM" from there. Before we
                        get into the new methods described above, why is
                        traversal preferred?
                      </p>
                      <p>
                        Remember how the browser reads CSS rules - from right to
                        left. Let's say your selector is 'div p a' - all links
                        that are within paragraphs that are within divs. For
                        each a element that the browser finds, it has to then
                        check if that a is part of a p element, and in turn, if
                        that p element is part of a div. This is an expensive
                        operation (relatively, but to human eyes probably
                        negligible) .
                        <a
                          href="https://stackoverflow.com/questions/26693471/jquery-traversing-vs-pseudo-classes"
                          >This post shows</a
                        >
                        quite literally how many more steps it requires for
                        jQuery to sort out a complicated selector over
                        traversal.
                      </p>
                      <p>
                        Now, let's get to some of those new jQuery methods
                        you're seeing. From now on, you can take "jqObj" to mean
                        a jQuery object. This object can be one, or a set (i.e.
                        array), of DOM elements. We will use the below HTML as
                        exaple, please note that the all-caps paragraphs should
                        certainly be list items, but I am leaving them as
                        paragraph elements for the sake of demonstration:
                      </p>
                      <pre
                        class="HTML code"
                      ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
  &lt;div id = 'brunoHits'&gt;
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
                      <ul>
                        <li>
                          <p>
                            <i>jqObj</i><b>.find([selector])</b>: this returns
                            <em>all</em> descendants of jqObj which match
                            [selector]. This is equivalent to a CSS descendant
                            selector.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS">let brunoPs = $('#bruno').find('p');
  
// brunoPs = all five paragraphs.  </code></pre>
                        </li>
                        <li>
                          <p>
                            <i>jqObj</i><b>.children([selector])</b>: this
                            returns <em>only the immediate children</em> of
                            jqObj which match [selector]. This is equivalent to
                            a CSS child selector.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS">let brunoTopLevel = $('#bruno').children('p');
  
// brunoPs = first two paragraphs.</code></pre>
                        </li>
                        <li>
                          <p>
                            There's also <b>.first([selector])</b> and
                            <b>.last([selector])</b>, which will return the
                            first or last element of a set, and there's also
                            <b>.next([selector])</b> and
                            <b>.prev([selector])</b> which are helpful. Say, for
                            example, we wanted to select the CARBICIDE
                            paragraph. Here's how we could do it:
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS">let c = $('#brunoHits').children('p').first().next();
  
<span class = "comment">// or the following would do the same:</span>

let c = $('#brunoHits').children('p').last().prev();

<span class =  "comment">// Let's go through number two:
// 1. select the #brunoHits div
// 2. within that div, get all the children which
// are paragraphs
// 3. select the last of those children in the set
// 4. select the previous sibling element</span>
</code></pre>
                        </li>
                        <li>
                          <p>
                            There's also <b>.parent([selector])</b>, which gets
                            only the <em>distinct immediate parents</em> from
                            the "current set of matched elements, optionally
                            filtered by a selector." What happens if we run this
                            on all the &lt;p&gt;s in the above example?
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS">let listParents = $('p').parent();
  
<span class = "comment">// listParents = [div#bruno, div#brunoHits]</span></code></pre>
                          <p>
                            Interesting. Note that a simple selector of 'p'
                            would return five paragraphs, but when we run
                            parent() we are not getting an array of five
                            corresponding immediate parent elements - instead we
                            are getting an array of only the
                            <em>distinct</em> immediate parents.
                          </p>
                        </li>
                        <li>
                          <p>
                            Let's not confuse that with the plural
                            <b>.parents([selector])</b>, which gets
                            <em>all the distinct parents</em> "of each element
                            in the current set of matched elements, optionally
                            filtered by a selector." Let's try that one on all
                            the &lt;p&gt;s in the above example.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS">let listAllParents = $('p').parents();
  
<span class = "comment">// listParents = [div#brunoHits, div#bruno, body, html]</span></code></pre>
                          <p>
                            Note that we go all the way up to the granddaddy,
                            html. Also note the ordering of the the result set -
                            results are ordered "from immediate parent on up;
                            the elements are returned in order from the closest
                            parent to the outer ones.
                            <em
                              >When multiple DOM elements are in the original
                              set, the resulting set will be in reverse order </em
                            >of the original elements as well, with duplicates
                            removed.
                          </p>
                          <p>If this were a SQL statement, we'd see:</p>
                          <pre class="JS code syntax"><code class="JS">ORDER BY
  ResultSet DESC, /* start with last element first*/
  ParentLevel</code></pre>
                        </li>
                        <li>
                          <p>
                            I should also mention <b>.closest([selector])</b>,
                            which, for each element in the matched set, finds
                            the closest ancestor that meets the criteria.
                            Therefore for each element in the matched set,
                            .closest will either return 0 or 1 results.
                          </p>
                          <p>
                            Take this website, for example. It is essentially a
                            giant ordered list, and one &lt;li&gt; element can
                            contain a whole world of other elements inside it.
                            Within each &lt;li&gt;, the structure is
                            unpredictable. Here's how, using the event handlers
                            we'll discuss later, always grab the parent
                            .question &lt;li&gt;.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"><span class = "comment">// assuming 'this' is any clicked element
</span>let activeQuestion = $(this).closest('.question'); 
</code></pre>
                        </li>
                        <li>
                          <p>
                            We can also filter our selection with
                            <b>.filter()</b>. Say we have the following HTML,
                            and we only want to grab the .vaca element that also
                            has the .sale class:
                          </p>
                          <pre class="HTML code"><code class="HTML">&lt;ul&gt;
  &lt;li class = 'vaca'&gt;Aruba&lt;/li&gt;
  &lt;li class = 'vaca sale'&gt;Ottawa&lt;/li&gt;
  &lt;li class = 'vaca'&gt;Morocco&lt;/li&gt;
&lt;/ul&gt;</code></pre>
                          <p>We would do the following:</p>
                          <pre
                            class="JS code"
                          ><code class="JS">let saleVaca = $('.vaca').filter('.sale'); 
</code></pre>
                        </li>
                      </ul>
                    </div>
                    <div>
                      <h3>F4-3-01-JQ03 Working With the DOM</h3>
                      <p>
                        Let's talk about how we'd create a new DOM node with
                        jQuery.
                      </p>
                      <p>
                        Say we want to add a paragraph to the page when a button
                        with id #addBrunoHit is clicked. First we'd have to
                        create the new element:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">let brunoExtraHit = $('&lt;p&gt;MORE DANCING&lt;/p&gt;');</code></pre>
                      <p>
                        That's all well and good, but price is just an object
                        floating about, it is not yet a DOM node. Let's again
                        use our Bruno HTML, since I'm lazy:
                      </p>
                      <pre
                        class="HTML code"
                      ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
  &lt;div id = 'brunoHits'&gt;
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
                      <p>
                        Obviously, given the context, this new paragraph should
                        be added at the end of the div with the id of
                        'brunoHits'. So, how do we do that?
                      </p>
                      <p>
                        First, we need to identify an existing element as a
                        reference point - the add will then occur in relation to
                        that point. Well, we've already done that - #brunoHits
                        is our reference point. We'll refer to it as "refNode"
                        from here. Now, there are several methods we have at our
                        disposal:
                      </p>
                      <ul>
                        <li>
                          <p>
                            <i>refNode</i><b>.after([newObj])</b>: newObj will
                            be added as a node immediately after refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> $('#brunoHits').after(brunoExtraHit);</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
  <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
  <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                        <li>
                          <p>
                            <i>refNode</i><b>.before([newObj])</b>: newObj will
                            be added as a node immediately before refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> $('#brunoHits').before(brunoExtraHit);</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
  <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                        <li>
                          <p>
                            <i>refNode</i><b>.prepend([newObj])</b>: newObj will
                            be added as a first child node within refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> $('#brunoHits').prepend(brunoExtraHit);</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                        <li>
                          <p>
                            <i>refNode</i><b>.append([newObj])</b>: newObj will
                            be added as a last child node within refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> $('#brunoHits').append(brunoExtraHit);</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
    <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
 <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                      </ul>
                      <p>
                        You may have noticed that the method is called on the
                        result of a selector, and the argument is the object to
                        be added. You may wonder, are there any methods that
                        work the other way around, where the argument is the
                        selector and the method object is the one to be added?
                        YES!
                      </p>
                      <ul>
                        <li>
                          <p>
                            <i>newObj</i><b>.insertAfter([refNode])</b>: newObj
                            will be added as a node immediately after refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> brunoExtraHit.insertAfter($('#brunoHits'));</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
  <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
  <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                        <li>
                          <p>
                            <i>newObj</i><b>.insertBefore([refNode])</b>: newObj
                            will be added as a node immediately before refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> brunoExtraHit.insertBefore($('#brunoHits'));</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
  <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                        <li>
                          <p>
                            <i>newObj</i><b>.prependTo([refNode])</b>: newObj
                            will be added as a first child node within refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> brunoExtraHit.prependTo($('#brunoHits'));</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                        <li>
                          <p>
                            <i>newObj</i><b>.appendTo([refNode])</b>: newObj
                            will be added as a last child node within refNode.
                          </p>
                          <pre
                            class="JS code"
                          ><code class="JS"> brunoExtraHit.appendTo($('#brunoHits'));</code></pre>
                          <pre
                            class="HTML code"
                          ><code class="HTML">&lt;div id = 'bruno'&gt;
  &lt;p&gt;Hi there, I'm Bruno. Harrison Ford interview coming soon.&lt;/p&gt;
  &lt;p&gt;But first, some of my other hits:&lt;/p&gt;
 <span style = "color:blue; font-weight:bold;"> &lt;div id = 'brunoHits'&gt;</span>
    &lt;p&gt;CELEBRITY MAX OUT&lt;/p&gt;
    &lt;p&gt;CARBICIDE&lt;/p&gt;
    &lt;p&gt;GAYBY&lt;/p&gt;
    <span class = "hghlt">&lt;p&gt;MORE DANCING&lt;/p&gt;</span>
 <span style = "color:blue; font-weight:bold;"> &lt;/div&gt;</span>
&lt;/div&gt;</code></pre>
                        </li>
                      </ul>
                      <p>
                        You can remove an element/set of matched elements using
                        the aptly-named .remove() method:
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS"> $('#brunoHits').remove();</code></pre>
                      <h4>jQuery Event Handlers</h4>
                      <p>
                        One of the more common/intuitive ways to handle events
                        using jQuery is the .on() function. Here is the syntax:
                      </p>
                      <pre
                        class="JS code syntax"
                      ><code class="JS">$(jqObj).on('event', callbackFunction);</code></pre>
                      <p>
                        ..and here's a very common example, running a function
                        when a button is clicked.
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">$('button').on('click', function () {
  $(this).addClass('clicked');
});</code></pre>
                      <p>
                        As you may have guessed, --this-- within the context of
                        a jQuery event handler means the source of the event -
                        in the above example, --this-- dynamically refers to
                        whichever button was clicked.
                      </p>
                      <p>
                        We can supply the .on() method with a filter in the
                        second argument to further limit the results.
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">$('#optionGrid').on('click',<span class = "hghlt">'button'</span>,function () {
  $(this).addClass('optionSelected');
});</code></pre>
                      <p>
                        Why bother with the separation of selectors when we
                        could have just used $('#optionGrid button')? There is a
                        real difference. Let's say that there are 15
                        &lt;button&gt; elements within that one #optionGrid
                        element, probably a &lt;div&gt;.
                      </p>
                      <ul>
                        <li>
                          If we use .on() with $('#optionGrid button'), then we
                          create 15 different event handlers, one for each
                          button.
                        </li>
                        <li>
                          If instead we use the approach above, we only create
                          one event handler, on #optionGrid, which will only
                          react if the event bubbling up to #optionGrid comes
                          from a &lt;button&gt; element. (Remember that by
                          default, events "bubble up" the DOM tree, i.e.,
                          parents always find out what their kids are doing,
                          sooner or later, any event that happens in the child's
                          life, happens in the parent's life.) This is called
                          <b>event delegation</b>.
                        </li>
                      </ul>
                      <h4>Using the HTML data-* attributes</h4>

                      <p>
                        You can give any HTML element a data-___ attribute. "Any
                        attribute on any element whose attribute name starts
                        with data- is a data attribute." In said attribute you
                        can store metadata, whatever data you like. For
                        instance:
                      </p>
                      <pre
                        class="HTML code"
                      ><code class="HTML">&lt;li id = 'happyGilmore' data-sku = '38421231'&gt;
  Happy Gilmore - Collectors Edition
&lt;/li&gt;</code></pre>

                      <p class="sidenote">
                        Originally, I had named this attribute "data-SKU", and
                        noticed that Chrome had changed it to 'data-sku.' As it
                        turns out, per the W3C, "all attribute names on HTML
                        elements in HTML documents get ASCII-lowercased
                        automatically, so the restriction on ASCII uppercase
                        letters doesn't affect such documents."
                      </p>
                      <p>
                        Now let's look at the jQuery .data() method, which can
                        help us extract that SKU value from the element.
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">var happySKU = $('#happyGilmore').data();
<span class = "comment">// returns {sku: 38421231}</span>

var happySKU = $('#happyGilmore').data('sku');
<span class = "comment">// returns '38421231'</span>
</code></pre>

                      <p>
                        Note that when we provide no arguments to .data(), it
                        returns an object, yet when we specify the exact data
                        attribute we want, we get a the string that is stored in
                        that data value
                      </p>
                      <p>
                        Yes, all data-* values are stored as strings. But
                        there's a cool little trick in standard JS using the +
                        operator as a "unary operator" (i.e. used with only one
                        operand) to convert a string result to a number. Let's
                        pretend that the #happyGilmore element also has a
                        data-price attribute with a value of '29.99'.
                      </p>
                      <pre
                        class="JS code"
                      ><code class="JS">var happyPrice = <span class = "hghlt">+</span>$('#happyGilmore').data('price');
<span class = "comment">// happyPrice = 29.99</span>
</code></pre>
                      <p>
                        As you can see, prepending the jQuery selector with the
                        + operator converts the result into a number. If we were
                        to prepend it with a - symbol, it would convert it to a
                        number, then negate it.
                      </p>
                      <h4>Adding and Removing Classes</h4>
                      <p>
                        It's so easy that it's not even worth explaining, you
                        saw it up above. jqObj.addClass('classToAdd'), same for
                        .removeClass('classToRemove'), or if you call
                        .removeClass() without arguments, then it removes all
                        classes. There is cool extra functionality in both in
                        terms of passing in a function that you can look into
                        more.
                      </p>
                    </div>
                    <div>
                      <h3>F4-3-01-JQ04 Listening to DOM Events</h3>
                      <p>
                        jQuery has some cool animation potential. Click the
                        below to see an example:
                      </p>
                      <div id="popQuote">
                        <p id="popHeader">
                          CLICK HERE FOR WORDS FROM THE WISE GREGG POPOVICH
                        </p>
                        <p id="popBody">
                          “We would have two less championships here if it was
                          not for Manu Ginobili. In my eyes, he’s the stud of
                          the world.”
                        </p>
                      </div>
                      <p>Here's the code for the above banger:</p>
                      <pre
                        class="JS code"
                      ><code class="JS">$('#popQuote').on('click',function() {
  $('#popBody').slideToggle();
})
</code></pre>
                      <p>
                        .slideToggle() is a handy little jQuery method that
                        encapsulates both the .slideUp() and .slideDown()
                        methods. .slideUp() will set an item's display attribute
                        to none, while animating the element as sliding upward
                        beneath whatever's above it; while .slideDown() will
                        display the item if it is hidden. .slideToggle() stores
                        the previous display state of the element so if it is
                        unhidden, it will return to its normal form.
                      </p>
                      Like most jQuery methods discussed here, this is a deep
                      method with lots of options that I won't cover here. But I
                      will give some love to the first optional parameter,
                      duration (in milliseconds). The default value is 400.
                      Watch what happens when we set the value to 2000:
                      <pre
                        class="JS code"
                      ><code class="JS">$('#popQuoteSlow').on('click',function() {
  $('#popBodySlow').slideToggle(2000);
})
</code></pre>
                      <div id="popQuoteSlow">
                        <p id="popHeaderSlow">
                          SLOWLY UNFOLDING WORDS FROM THE WISE GREGG POPOVICH
                        </p>
                        <p id="popBodySlow">
                          “We would have two less championships here if it was
                          not for Manu Ginobili. In my eyes, he’s the stud of
                          the world.”
                        </p>
                      </div>
                      <h4>.fadeIn(), fadeOut(), fadeToggle()</h4>
                      <p>
                        .fadeOut is covered earlier (added it to the LeBron hide
                        section), just know that you can fade in and toggle,
                        very similar to slideUp/Down/Toggle methods.
                      </p>
                      <h4>
                        Given a function showTicket() used as a callback...
                      </h4>
                      <pre
                        class="JS code"
                      ><code class="JS">$('.vaca').on('click','button', showTicket);</code></pre>
                      <p>
                        Note that when assigning the callback function, we are
                        <em>not</em> including calling parentheses.
                      </p>
                      <p>
                        The purpose of .on() is to attach an event handler
                        function, not to execute it. After all, it's in the name
                        - in case an event occurs, then handle it with the
                        function. But no need to handle an event that hasn't
                        happened yet.
                      </p>
                      <h4>Some events to know:</h4>
                      <table>
                        <thead>
                          <tr>
                            <td>Keyboard</td>
                            <td>Form</td>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>
                              keypress<br />
                              keydown <br />
                              keyup <br />
                            </td>
                            <td>
                              blur<br />
                              select <br />
                              change <br />
                              focus <br />
                              submit <br />
                            </td>
                          </tr>
                        </tbody>
                      </table>
                      <h4>jQuery and Form Fields</h4>
                      <p>
                        To get the value of a form field such as &lt;input&gt;,
                        use the .val() method without arguments. To set the
                        value, supply an argument i.e. .val(<i>newVal)</i>.
                      </p>
                      <div class="sidenote">
                        <p>
                          Let's do a little experiment with links in which we
                          try to get the link to display the pointer (i.e.
                          Mickey Mouse hand) cursor as if the user were clicking
                          a link, except we don't want the link to go anywhere.
                          This may be useful in triggering a JS or jQuery event
                          handler:
                        </p>
                        <pre
                          class="HTML code example"
                        ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">href</span> =<span class="value"> ""</span>&gt;</span>Test 1<span class="element closetag">&lt;/a&gt;</span>  </code></pre>
                        <p>
                          <a href="">Test 1</a> -
                          <span class="fail">FAIL</span>: page refreshed because
                          "" href implicitly is a link to the current page.
                        </p>
                        <pre
                          class="HTML code example"
                        ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">href</span> =<span class="value"> "#"</span>&gt;</span>Test 2<span class="element closetag">&lt;/a&gt;</span>  </code></pre>
                        <p>
                          <a href="#">Test 2</a> -
                          <span class="fail">FAIL</span>: scrolls to top of
                          page, "#" alone causes this behavior on a scrolling
                          page.
                        </p>
                        <pre
                          class="HTML code example"
                        ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">href</span> =<span class="value"> "!#"</span>&gt;</span>Test 3<span class="element closetag">&lt;/a&gt;</span>  </code></pre>
                        <p>
                          <a href="!#">Test 3</a> -
                          <span class="fail">FAIL</span>: Attempt to psych out /
                          nullify the link MS Excel style, prepending it with an
                          exclamation point. Result: 404 error online, in
                          Brackets editor, goes to page that only says "Cannot
                          GET /!" Makes sense. We are telling it to go to a file
                          in the same directory titled only "!", with an
                          internal page link (#) to nowhere.
                        </p>

                        <pre
                          class="HTML code example"
                        ><code class="HTML"><span class="element opentag">&lt;a&gt;</span>Test 4<span class="element closetag">&lt;/a&gt;</span>  </code></pre>
                        <p>
                          <a>Test 4</a> - <span class="fail">FAIL</span>: no
                          pointer cursor because no href attribute; this a
                          element is no longer a link to anything.
                        </p>
                        <pre
                          class="HTML code example"
                        ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">href</span> =<span class="value"> "#!"</span>&gt;</span>Test 5<span class="element closetag">&lt;/a&gt;</span>  </code></pre>
                        <p>
                          <a href="#!">Test 5</a> -
                          <span class="success">PASS</span>: Returning to the
                          idea of Test 3, but switching the order of characters.
                          Now that # is the first character in the href string,
                          we are prepping the browser for an internal link.
                        </p>
                        <p>
                          "The idea here is that there hopefully isn't an
                          element on the page with id="!" (who does that!?) and
                          the hyperlink therefore refers to nothing - so nothing
                          happens."
                        </p>
                        <p>
                          "Nothing happens" isn't entirely accurate. When you
                          click the non-link, you'll see the address bar in the
                          browser change to reflect your new "location" on the
                          page.
                        </p>
                        <pre
                          class="HTML code example"
                        ><code class="HTML"><span class="element opentag">&lt;a <span class="attribute">class</span> =<span class="value"> "pointy"</span>&gt;</span>Test 6<span class="element closetag">&lt;/a&gt;</span>  </code></pre>
                        <pre
                          class="CSS code"
                        ><code class="CSS"><span class="selector">.pointy</span> {<span class="declaration"><span class="property">cursor:</span><span class="value">pointer</span>;</span><span class="declaration"><span class="property">text-decoration:</span><span class="value">underline</span>;</span>}
</code></pre>
                        <p>
                          <a class="pointy">Test 6</a> -
                          <span class="success">PASS</span>: Through some CSS
                          sorcery we can give a vanilla &lt;a&gt; element some
                          styling that will make it look like a regular link.
                        </p>
                      </div>
                      <p>
                        As you can see from the example above, you can create
                        false/dead-end "links" in order to set up clickable
                        triggers for event handlers.
                      </p>
                      <p>
                        There is another option, however. You can use the DOM
                        API method event.preventDefault() to prevent the default
                        behavior associated with an event. Here's a few examples
                        of this.
                      </p>
                      <ul>
                        <li>
                          Real life event: user clicks input box in order to
                          enter data.
                        </li>
                        <li>
                          Browser event fired:
                          <code class="HTML">mousedown</code>.
                        </li>
                        <li>Default: <input /></li>
                        <li>Default prevented: <input class="neutered" /></li>
                      </ul>
                      <a id="fsBottom"></a>
                    </div>
                  </div>
                  <a id="fsEnd"> </a>
                </div>
              </div>
            </div>
          </li>

          <li id="fsaDay1MiniNotepadDump">
            <div class="question">
              <p>Mini notepad Data Structures dump...</p>
            </div>

            <div class="answer">
              <pre>
Boolean = George Bool
                
∨ "optimistic OR" 0 || 1 = 1
^ "pessimistic AND" 0 &amp;&amp; 1 = 0

¬ = negation

These can be found in the "logic symbols" section:
http://web.uvic.ca/~salam/math_symbols.html

Babbage - made a computer
Ada Lovelace - created a language
Claude Shannon - electricity applied to Boolean logic, and/or gates

20 billion transistors in modern processor.

Each transistor has a cathode, gate, anode; upon a base.

"Turing complete" - you can do anything with 1s and 0s

The Millenial Problems - 8 problems, only 1 solved.

Von Neuman - first computer, Eniac, funded by Manhattan project/creation of hydrogen bomb, which had a 0.1 Mhz processor.

Grace Hopper - moved from punch card to magnetic tape. Punch card wires scraping over card and it would make contact with charged other side through hole in card?

Magnetic tape is still the cheapest storage medium.

"Persistent storage" - what persists is the magnetic charge? That magnetic charge is stored somehow?

RAM is also solid state memory, faster because it's closer to the processor.

32/64 bit processor = how many bits can be processed per clock cycle by the processor.

Per unit clock cycle = size of processor register.

Each processor:
L1 cache - for immediate needs
L2 cache - less immediate?
L3 - shared among processors, while L1/L2 is per processor?

(Processor?) Cache = SRAM
Memory, aka the RAM we know, is DRAM

</pre
              >
            </div>
          </li>

          <li id="fsaDay1MiniNotepadDump">
            <div class="question">
              <p>Geoff Launch Day Questions Dump...</p>
            </div>

            <div class="answer">
              <pre>
- what paradigms does JS allow and how? what are the differences?
- what does the 'new' keyword do? (in as much detail as possible)
     - how else can you instantiate an object w/ predefined behavior w/out using 'new'?
- what is a higher-order function? Give some examples in JS
 - explain context ('this')
     - call vs. apply vs. bind
- what's the difference between == and ===? (explain type coercion)
- explain how the event loop works in JS
- what happens when you omit ‘var’ (or ‘let’ or ‘const’) when declaring a variable?
    - what are the dangers of this?
- what is strict mode? How do you enable it? What does it change?
------------------------------------------------------------------------------------------------------------------------
- explain big O notation
          - list and explain some common complexities (ideally w/ examples)
- what is a promise? How do promises work?
- how do you use the Promise constructor?
- what exactly does `.then` do? / What exactly does `await` do?
- how do you handle errors w/ promises / async functions?
- how do you handle multiple async actions happening simultaneously?
- what are the alternatives to promises?
- what are the advantages of promises?
------------------------------------------------------------------------------------------------------------------------
- function declaration vs. function expression
- what is an IIFE?
- what is the revealing module pattern and how can you implement it?
- what is Node?
     - why would you use Node?
     - name some global variables in Node
     - what does 'require' do?
     - what is NPM?
------------------------------------------------------------------------------------------------------------------------
- what's an ADT?
- what's the difference between an ADT and a data structure?
- what are some examples of each? (ideally DS to implement each ADT)
- what would you use them for?
- what is a relational database
     - what is a 'relation'?
     - what are the different types of associations you can have between tables and how are they implemented?
     - what does it mean that Postgres is an ORDBMS?
     - what is an ORM?
------------------------------------------------------------------------------------------------------------------------
- how does React work?
     - what is the virtual DOM?
     - what are the advantages of React?
     - what are the two sources of data for React components?
     - what causes a component to re-render?
     - what are lifecycle methods/hooks?
          - name some, explain when they run, what you might use each for
     - What is a higher order component? 
     - what are the different ways you can define a React component?
          - bonus points for 'React.createClass'
          - when would you use each?
 -  What is redux, and when should you use it (or not)? 
      - How are Actions defined in Redux?
      - When should you use a combined reducer?
------------------------------------------------------------------------------------------------------------------------
- how do prototypes work?
          - explain exactly how you can mimic 'inheritance' using prototypes
- explain scope in JS
     - what is closure?
- var vs. let vs. const
- what is hoisting and how does it work?
- what are the primitive data types?
- what's the difference between undefined and null?
- what are the falsey values?
</pre
              >
            </div>
          </li>
          <li id="nyMagDump">
            <div class="question">
              <p>Stuff that NYMag says you should know...</p>
            </div>

            <div class="answer">
              <pre>
Fluent in HTML5 &amp; CSS3 (minimum 3 years experience): Write semantic markup that robots love. Know that
s are the elements of last resort. Arrange the trickiest of layouts, while keeping your CSS simple.
Responsive Design (minimum 3 years experience): Implement designs that flow from Phone to Phablet to Tablet to Desktop without getting dizzy.
Client-side Javascript (minimum 3 years experience): Love Javascript. Walking the DOM is a walk in the park. "use strict" isn't optional for you.
Server-side Javascript (optional, but helpful): Node.js and NPM are the bee's knees. Docker makes it easy to deliver.
Images (minimum 3 years experience): Have opinions on the best use of GIFs, JPGs, PNGs, SVGs and whether they should be in a sprite sheet, base64-encoded, linked or not used at all. Deliver retina images when needed, and not a pixel more.
Frameworks (optional, but helpful): Know when they save you time, when they get in the way, and how to spot frameworks that aren't worth the trouble
Git (optional, but helpful): Know when rebasing is your best friend, and when it can get you into hot water.
(You don't have to know all these things, but you should be excited to learn and use them -or perhaps even advocate for something you can show is better.)
</pre
              >
            </div>
          </li>
          <!--myname console  Aug 10 15:42 - The shell attributed to the login window

myname ttys000  Aug 10 16:27 - The shell when you start the Terminal.app-->
        </ol>
      </section>
    </main>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="_scripts/modernizr-custom.js"></script>
    <script src="_scripts/master.js"></script>
    <script src="_scripts/examples.js"></script>
    <a id="pageEnd"> </a>
  </body>
</html>

<!--

Word: "bonkers"
Excel: RIGHT(bonkers,1) = "s"
JS: bonkers[bonkers.length-1] = "s"

Add jQuery in the console:
var script = document.createElement('script');script.src = "https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js";document.getElementsByTagName('head')[0].appendChild(script);

***Q/A TEMPLATE*************************************************************

        <li id = "">
            <div class = "question">
                <p></p>
            </div>

            <div class = "answer">
                <p></p>
            </div>
        </li>

***HTML ELEMENT-ATT_NAME-ATT_VALUE TEMPLATE*********************************

<pre class="code"><code class="HTML"><span class = "element2">script<span class = "attribute">src</span>=<span class = "value">"_scripts/JGWebReference.js"</span></span>
</code></pre>

<pre class="code"><code class="HTML"><span class = "element2">script</span>
    nestedcontent
<span class = "element2 closetag">script</span></code></pre>
        
***CSS RULE TEMPLATE***********************************************

<code class = "block CSS">
    <span class = "selector">SELECTOR</span> { <br>
    <span class = "declaration">
        <span class = "property">PROPERTY:</span><span class = "value">VALUE</span>;
    </span>
} 
</code>                    

***JS RULE TEMPLATE******************************************************
<pre class="JS code"><code class="JS"></code></pre>

<pre class="code"><code class="JS"><span class ="statement">var</span> x<span class = "punctuation">;</span>
x <span class = "operator">=</span> <span class = "value">value</span><span class = "punctuation">;</span></code></pre>

***CSS BNF SYNTAX TEMPLATE**********************************************   

<code class = "block CSS">
   <span class ="cgen"> &nbsp;&nbsp;&nbsp;property: [ &lt;value&gt; | &lt;value&gt; ] #</span>
</code>

***TABLE TEMPLATE*******************************************************
      <table>
        <thead>
          <tr>
            <td></td>
            <td></td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td></td>
            <td></td>
          </tr>                            
        </tbody>
      </table>

-->
